// Generated by HLC 4.1.3 (HL v4)
#ifndef INC_kha__netsync__Session
#define INC_kha__netsync__Session
typedef struct _kha__netsync__$Session *kha__netsync__$Session;
typedef struct _kha__netsync__Session *kha__netsync__Session;
#include <kha/netsync/Session.h>
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <haxe/ds/IntMap.h>
#include <haxe/io/Bytes.h>
#include <kha/netsync/Network.h>


typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	kha__netsync__Session p1;
} Enumt$ctx_33ddeca;
struct _kha__netsync__$Session {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int START;
	int ENTITY_UPDATES;
	int CONTROLLER_UPDATES;
	int REMOTE_CALL;
	int PING;
	int SESSION_ERROR;
	int PLAYER_UPDATES;
	int RPC_SERVER;
	int RPC_ALL;
	kha__netsync__Session instance;
	vclosure* the;
};
struct _kha__netsync__Session {
	hl_type *$type;
	haxe__ds__IntMap entities;
	haxe__ds__IntMap controllers;
	int maxPlayers;
	int currentPlayers;
	double ping;
	String address;
	int port;
	vclosure* startCallback;
	vclosure* refusedCallback;
	vclosure* resetCallback;
	vvirtual* localClient;
	kha__netsync__Network network;
	int updateTaskId;
	int pingTaskId;
	vvirtual* me;
};
#endif


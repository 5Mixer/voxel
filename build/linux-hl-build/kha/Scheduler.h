// Generated by HLC 4.1.3 (HL v4)
#ifndef INC_kha__Scheduler
#define INC_kha__Scheduler
typedef struct _kha__$Scheduler *kha__$Scheduler;
typedef struct _kha__Scheduler *kha__Scheduler;
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <hl/types/ArrayObj.h>
#include <hl/types/ArrayBytes_Float.h>
#include <kha/TimeTask.h>


struct _kha__$Scheduler {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	hl__types__ArrayObj timeTasks;
	hl__types__ArrayObj pausedTimeTasks;
	hl__types__ArrayObj outdatedTimeTasks;
	hl__types__ArrayObj timeTasksScratchpad;
	double timeWarpSaveTime;
	hl__types__ArrayObj frameTasks;
	hl__types__ArrayObj toDeleteFrame;
	double current;
	double lastTime;
	double lastFrameEnd;
	bool frame_tasks_sorted;
	bool stopped;
	bool vsync;
	double onedifhz;
	int currentFrameTaskId;
	int currentTimeTaskId;
	int currentGroupId;
	int DIF_COUNT;
	double maxframetime;
	hl__types__ArrayBytes_Float deltas;
	double startTime;
	kha__TimeTask activeTimeTask;
	vclosure* init;
	vclosure* start;
	vclosure* stop;
	vclosure* isStopped;
	vclosure* warpTimeTasksBack;
	vclosure* warp;
	vclosure* executeFrame;
	vclosure* executeTimeTasks;
	vclosure* archiveTimeTask;
	vclosure* time;
	vclosure* realTime;
	vclosure* resetTime;
	vclosure* addBreakableFrameTask;
	vclosure* addFrameTask;
	vclosure* pauseFrameTask;
	vclosure* removeFrameTask;
	vclosure* generateGroupId;
	vclosure* addBreakableTimeTaskToGroup;
	vclosure* addTimeTaskToGroup;
	vclosure* addBreakableTimeTask;
	vclosure* addTimeTask;
	vclosure* getTimeTask;
	vclosure* pauseTimeTask;
	vclosure* pauseRunningTimeTask;
	vclosure* pauseTimeTasks;
	vclosure* removeTimeTask;
	vclosure* removeTimeTasks;
	vclosure* numTasksInSchedule;
	vclosure* insertSorted;
	vclosure* sortFrameTasks;
};
struct _kha__Scheduler {
	hl_type *$type;
};
#endif


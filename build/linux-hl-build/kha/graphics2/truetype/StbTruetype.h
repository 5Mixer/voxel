// Generated by HLC 4.1.3 (HL v4)
#ifndef INC_kha__graphics2__truetype__StbTruetype
#define INC_kha__graphics2__truetype__StbTruetype
typedef struct _kha__graphics2__truetype__$StbTruetype *kha__graphics2__truetype__$StbTruetype;
typedef struct _kha__graphics2__truetype__StbTruetype *kha__graphics2__truetype__StbTruetype;
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <kha/graphics2/truetype/Stbtt__buf.h>
#include <kha/internal/BytesBlob.h>
#include <hl/types/ArrayBytes_Int.h>
#include <kha/graphics2/truetype/Stbtt_fontinfo.h>
#include <hl/types/ArrayObj.h>
#include <kha/graphics2/truetype/Stbtt_vertex.h>
#include <kha/graphics2/truetype/Stbtt_temp_rect.h>
#include <kha/graphics2/truetype/Stbtt__csctx.h>
#include <kha/graphics2/truetype/Stbtt_temp_glyph_h_metrics.h>
#include <kha/graphics2/truetype/Stbtt_temp_font_v_metrics.h>
#include <kha/graphics2/truetype/Stbtt__active_edge.h>
#include <hl/types/ArrayBytes_Float.h>
#include <kha/graphics2/truetype/Stbtt__bitmap.h>
#include <kha/graphics2/truetype/Stbtt__edge.h>
#include <kha/graphics2/truetype/VectorOfIntPointer.h>
#include <kha/graphics2/truetype/Stbtt_temp_region.h>
#include <kha/graphics2/truetype/Stbtt_aligned_quad.h>


struct _kha__graphics2__truetype__$StbTruetype {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* STBTT_assert;
	vclosure* STBTT_POINT_SIZE;
	int STBTT_vmove;
	int STBTT_vline;
	int STBTT_vcurve;
	int STBTT_vcubic;
	int STBTT_MACSTYLE_DONTCARE;
	int STBTT_MACSTYLE_BOLD;
	int STBTT_MACSTYLE_ITALIC;
	int STBTT_MACSTYLE_UNDERSCORE;
	int STBTT_MACSTYLE_NONE;
	int STBTT_PLATFORM_ID_UNICODE;
	int STBTT_PLATFORM_ID_MAC;
	int STBTT_PLATFORM_ID_ISO;
	int STBTT_PLATFORM_ID_MICROSOFT;
	int STBTT_UNICODE_EID_UNICODE_1_0;
	int STBTT_UNICODE_EID_UNICODE_1_1;
	int STBTT_UNICODE_EID_ISO_10646;
	int STBTT_UNICODE_EID_UNICODE_2_0_BMP;
	int STBTT_UNICODE_EID_UNICODE_2_0_FULL;
	int STBTT_MS_EID_SYMBOL;
	int STBTT_MS_EID_UNICODE_BMP;
	int STBTT_MS_EID_SHIFTJIS;
	int STBTT_MS_EID_UNICODE_FULL;
	int STBTT_MAC_EID_ROMAN;
	int STBTT_MAC_EID_ARABIC;
	int STBTT_MAC_EID_JAPANESE;
	int STBTT_MAC_EID_HEBREW;
	int STBTT_MAC_EID_CHINESE_TRAD;
	int STBTT_MAC_EID_GREEK;
	int STBTT_MAC_EID_KOREAN;
	int STBTT_MAC_EID_RUSSIAN;
	int STBTT_MS_LANG_ENGLISH;
	int STBTT_MS_LANG_ITALIAN;
	int STBTT_MS_LANG_CHINESE;
	int STBTT_MS_LANG_JAPANESE;
	int STBTT_MS_LANG_DUTCH;
	int STBTT_MS_LANG_KOREAN;
	int STBTT_MS_LANG_FRENCH;
	int STBTT_MS_LANG_RUSSIAN;
	int STBTT_MS_LANG_GERMAN;
	int STBTT_MS_LANG_SPANISH;
	int STBTT_MS_LANG_HEBREW;
	int STBTT_MS_LANG_SWEDISH;
	int STBTT_MAC_LANG_ENGLISH;
	int STBTT_MAC_LANG_JAPANESE;
	int STBTT_MAC_LANG_ARABIC;
	int STBTT_MAC_LANG_KOREAN;
	int STBTT_MAC_LANG_DUTCH;
	int STBTT_MAC_LANG_RUSSIAN;
	int STBTT_MAC_LANG_FRENCH;
	int STBTT_MAC_LANG_SPANISH;
	int STBTT_MAC_LANG_GERMAN;
	int STBTT_MAC_LANG_SWEDISH;
	int STBTT_MAC_LANG_HEBREW;
	int STBTT_MAC_LANG_CHINESE_SIMPLIFIED;
	int STBTT_MAC_LANG_ITALIAN;
	int STBTT_MAC_LANG_CHINESE_TRAD;
	int STBTT_MAX_OVERSAMPLE;
	int STBTT_RASTERIZER_VERSION;
	vclosure* stbtt__buf_get8;
	vclosure* stbtt__buf_peek8;
	vclosure* stbtt__buf_seek;
	vclosure* stbtt__buf_skip;
	vclosure* stbtt__buf_get;
	vclosure* stbtt__new_buf;
	vclosure* stbtt__buf_get16;
	vclosure* stbtt__buf_get32;
	vclosure* stbtt__buf_range;
	vclosure* stbtt__cff_get_index;
	vclosure* stbtt__cff_int;
	vclosure* stbtt__cff_skip_operand;
	vclosure* stbtt__dict_get;
	vclosure* stbtt__dict_get_ints;
	vclosure* stbtt__cff_index_count;
	vclosure* stbtt__cff_index_get;
	vclosure* ttBYTE;
	vclosure* ttCHAR;
	vclosure* ttUSHORT;
	vclosure* ttSHORT;
	vclosure* ttULONG;
	vclosure* ttLONG;
	vclosure* to_stbtt_uint16;
	vclosure* ttFixed;
	vclosure* stbtt_tag4;
	vclosure* stbtt_tag;
	vclosure* stbtt__isfont;
	vclosure* stbtt__find_table;
	vclosure* stbtt_GetFontOffsetForIndex;
	vclosure* stbtt_GetNumberOfFonts;
	vclosure* stbtt__get_subrs;
	vclosure* stbtt_InitFont;
	vclosure* stbtt_FindGlyphIndex;
	vclosure* stbtt_GetCodepointShape;
	vclosure* stbtt_setvertex;
	vclosure* stbtt__GetGlyfOffset;
	vclosure* stbtt_GetGlyphBox;
	vclosure* stbtt_GetCodepointBox;
	vclosure* stbtt_IsGlyphEmpty;
	vclosure* stbtt__close_shape;
	vclosure* copyVertices;
	vclosure* stbtt__GetGlyphShapeTT;
	vclosure* STBTT__CSCTX_INIT;
	vclosure* stbtt__track_vertex;
	vclosure* stbtt__csctx_v;
	vclosure* stbtt__csctx_close_shape;
	vclosure* stbtt__csctx_rmove_to;
	vclosure* stbtt__csctx_rline_to;
	vclosure* stbtt__csctx_rccurve_to;
	vclosure* stbtt__get_subr;
	vclosure* stbtt__cid_get_glyph_subrs;
	vclosure* STBTT__CSERR;
	vclosure* stbtt__run_charstring;
	vclosure* stbtt__GetGlyphShapeT2;
	vclosure* stbtt__GetGlyphInfoT2;
	vclosure* stbtt_GetGlyphShape;
	vclosure* stbtt_GetGlyphHMetrics;
	vclosure* stbtt_GetGlyphKernAdvance;
	vclosure* stbtt_GetCodepointKernAdvance;
	vclosure* stbtt_GetCodepointHMetrics;
	vclosure* stbtt_GetFontVMetrics;
	vclosure* stbtt_GetFontBoundingBox;
	vclosure* stbtt_ScaleForPixelHeight;
	vclosure* stbtt_ScaleForMappingEmToPixels;
	vclosure* stbtt_GetGlyphBitmapBoxSubpixel;
	vclosure* stbtt_GetGlyphBitmapBox;
	vclosure* stbtt_GetCodepointBitmapBoxSubpixel;
	vclosure* stbtt_GetCodepointBitmapBox;
	vclosure* stbtt__new_active;
	vclosure* stbtt__handle_clipped_edge;
	vclosure* stbtt__fill_active_edges_new;
	vclosure* stbtt__rasterize_sorted_edges;
	vclosure* STBTT__COMPARE;
	vclosure* stbtt__sort_edges_ins_sort;
	vclosure* stbtt__sort_edges_quicksort;
	vclosure* stbtt__sort_edges;
	vclosure* stbtt__rasterize;
	vclosure* stbtt__add_point;
	vclosure* stbtt__tesselate_curve;
	vclosure* stbtt__tesselate_cubic;
	vclosure* stbtt_FlattenCurves;
	vclosure* stbtt_Rasterize;
	vclosure* stbtt_GetGlyphBitmapSubpixel;
	vclosure* stbtt_GetGlyphBitmap;
	vclosure* stbtt_MakeGlyphBitmapSubpixel;
	vclosure* stbtt_MakeGlyphBitmap;
	vclosure* stbtt_GetCodepointBitmapSubpixel;
	vclosure* stbtt_MakeCodepointBitmapSubpixel;
	vclosure* stbtt_GetCodepointBitmap;
	vclosure* stbtt_MakeCodepointBitmap;
	vclosure* stbtt_BakeFontBitmap;
	vclosure* stbtt_GetBakedQuad;
};
struct _kha__graphics2__truetype__StbTruetype {
	hl_type *$type;
};
#endif


// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_FramebufferOptions
#define INCLUDED_kha_FramebufferOptions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_0d9d3f79080dfe91_4_new)
HX_DECLARE_CLASS1(kha,FramebufferOptions)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES FramebufferOptions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FramebufferOptions_obj OBJ_;
		FramebufferOptions_obj();

	public:
		enum { _hx_ClassId = 0x262b5b51 };

		void __construct( ::Dynamic __o_frequency, ::Dynamic __o_verticalSync, ::Dynamic __o_colorBufferBits, ::Dynamic __o_depthBufferBits, ::Dynamic __o_stencilBufferBits, ::Dynamic __o_samplesPerPixel);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.FramebufferOptions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"kha.FramebufferOptions"); }

		inline static ::hx::ObjectPtr< FramebufferOptions_obj > __new( ::Dynamic __o_frequency, ::Dynamic __o_verticalSync, ::Dynamic __o_colorBufferBits, ::Dynamic __o_depthBufferBits, ::Dynamic __o_stencilBufferBits, ::Dynamic __o_samplesPerPixel) {
			::hx::ObjectPtr< FramebufferOptions_obj > __this = new FramebufferOptions_obj();
			__this->__construct(__o_frequency,__o_verticalSync,__o_colorBufferBits,__o_depthBufferBits,__o_stencilBufferBits,__o_samplesPerPixel);
			return __this;
		}

		inline static ::hx::ObjectPtr< FramebufferOptions_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_frequency, ::Dynamic __o_verticalSync, ::Dynamic __o_colorBufferBits, ::Dynamic __o_depthBufferBits, ::Dynamic __o_stencilBufferBits, ::Dynamic __o_samplesPerPixel) {
			FramebufferOptions_obj *__this = (FramebufferOptions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FramebufferOptions_obj), false, "kha.FramebufferOptions"));
			*(void **)__this = FramebufferOptions_obj::_hx_vtable;
{
            		 ::Dynamic frequency = __o_frequency;
            		if (::hx::IsNull(__o_frequency)) frequency = 60;
            		 ::Dynamic verticalSync = __o_verticalSync;
            		if (::hx::IsNull(__o_verticalSync)) verticalSync = true;
            		 ::Dynamic colorBufferBits = __o_colorBufferBits;
            		if (::hx::IsNull(__o_colorBufferBits)) colorBufferBits = 32;
            		 ::Dynamic depthBufferBits = __o_depthBufferBits;
            		if (::hx::IsNull(__o_depthBufferBits)) depthBufferBits = 16;
            		 ::Dynamic stencilBufferBits = __o_stencilBufferBits;
            		if (::hx::IsNull(__o_stencilBufferBits)) stencilBufferBits = 8;
            		 ::Dynamic samplesPerPixel = __o_samplesPerPixel;
            		if (::hx::IsNull(__o_samplesPerPixel)) samplesPerPixel = 1;
            	HX_STACKFRAME(&_hx_pos_0d9d3f79080dfe91_4_new)
HXLINE(  10)		( ( ::kha::FramebufferOptions)(__this) )->samplesPerPixel = 1;
HXLINE(   9)		( ( ::kha::FramebufferOptions)(__this) )->stencilBufferBits = 8;
HXLINE(   8)		( ( ::kha::FramebufferOptions)(__this) )->depthBufferBits = 16;
HXLINE(   7)		( ( ::kha::FramebufferOptions)(__this) )->colorBufferBits = 32;
HXLINE(   6)		( ( ::kha::FramebufferOptions)(__this) )->verticalSync = true;
HXLINE(   5)		( ( ::kha::FramebufferOptions)(__this) )->frequency = 60;
HXLINE(  13)		( ( ::kha::FramebufferOptions)(__this) )->frequency = ( (int)(frequency) );
HXLINE(  14)		( ( ::kha::FramebufferOptions)(__this) )->verticalSync = ( (bool)(verticalSync) );
HXLINE(  15)		( ( ::kha::FramebufferOptions)(__this) )->colorBufferBits = ( (int)(colorBufferBits) );
HXLINE(  16)		( ( ::kha::FramebufferOptions)(__this) )->depthBufferBits = ( (int)(depthBufferBits) );
HXLINE(  17)		( ( ::kha::FramebufferOptions)(__this) )->stencilBufferBits = ( (int)(stencilBufferBits) );
HXLINE(  18)		( ( ::kha::FramebufferOptions)(__this) )->samplesPerPixel = ( (int)(samplesPerPixel) );
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FramebufferOptions_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FramebufferOptions",11,92,27,24); }

		int frequency;
		bool verticalSync;
		int colorBufferBits;
		int depthBufferBits;
		int stencilBufferBits;
		int samplesPerPixel;
};

} // end namespace kha

#endif /* INCLUDED_kha_FramebufferOptions */ 

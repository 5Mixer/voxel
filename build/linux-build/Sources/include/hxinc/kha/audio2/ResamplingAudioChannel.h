// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_audio2_ResamplingAudioChannel
#define INCLUDED_kha_audio2_ResamplingAudioChannel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_audio2_AudioChannel
#include <hxinc/kha/audio2/AudioChannel.h>
#endif
HX_DECLARE_CLASS2(kha,arrays,Float32ArrayPrivate)
HX_DECLARE_CLASS2(kha,audio1,AudioChannel)
HX_DECLARE_CLASS2(kha,audio2,AudioChannel)
HX_DECLARE_CLASS2(kha,audio2,ResamplingAudioChannel)

namespace kha{
namespace audio2{


class HXCPP_CLASS_ATTRIBUTES ResamplingAudioChannel_obj : public  ::kha::audio2::AudioChannel_obj
{
	public:
		typedef  ::kha::audio2::AudioChannel_obj super;
		typedef ResamplingAudioChannel_obj OBJ_;
		ResamplingAudioChannel_obj();

	public:
		enum { _hx_ClassId = 0x31d2341f };

		void __construct(bool looping,int sampleRate);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.audio2.ResamplingAudioChannel")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.audio2.ResamplingAudioChannel"); }
		static ::hx::ObjectPtr< ResamplingAudioChannel_obj > __new(bool looping,int sampleRate);
		static ::hx::ObjectPtr< ResamplingAudioChannel_obj > __alloc(::hx::Ctx *_hx_ctx,bool looping,int sampleRate);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ResamplingAudioChannel_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ResamplingAudioChannel",67,0c,e8,fc); }

		static int max(int a,int b);
		static ::Dynamic max_dyn();

		static int min(int a,int b);
		static ::Dynamic min_dyn();

		int sampleRate;
		void nextSamples( ::kha::arrays::Float32ArrayPrivate requestedSamples,int requestedLength,int sampleRate);

		Float sample(int position,int sampleRate);
		::Dynamic sample_dyn();

		Float lerp(Float v0,Float v1,Float t);
		::Dynamic lerp_dyn();

		int sampleLength(int sampleRate);
		::Dynamic sampleLength_dyn();

		void play();

		void pause();

		void stop();

		Float get_length();

		Float get_position();

		Float set_position(Float value);

		Float get_volume();

		Float set_volume(Float value);

		bool get_finished();

};

} // end namespace kha
} // end namespace audio2

#endif /* INCLUDED_kha_audio2_ResamplingAudioChannel */ 

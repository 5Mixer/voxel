// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_netsync_Session
#define INCLUDED_kha_netsync_Session

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(kha,netsync,Client)
HX_DECLARE_CLASS2(kha,netsync,Controller)
HX_DECLARE_CLASS2(kha,netsync,Entity)
HX_DECLARE_CLASS2(kha,netsync,Network)
HX_DECLARE_CLASS2(kha,netsync,Session)

namespace kha{
namespace netsync{


class HXCPP_CLASS_ATTRIBUTES Session_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Session_obj OBJ_;
		Session_obj();

	public:
		enum { _hx_ClassId = 0x7b776d62 };

		void __construct(int maxPlayers,::String address,int port);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.netsync.Session")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.netsync.Session"); }
		static ::hx::ObjectPtr< Session_obj > __new(int maxPlayers,::String address,int port);
		static ::hx::ObjectPtr< Session_obj > __alloc(::hx::Ctx *_hx_ctx,int maxPlayers,::String address,int port);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Session_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Session",36,3f,e9,60); }

		static void __boot();
		static int START;
		static int ENTITY_UPDATES;
		static int CONTROLLER_UPDATES;
		static int REMOTE_CALL;
		static int PING;
		static int SESSION_ERROR;
		static int PLAYER_UPDATES;
		static int RPC_SERVER;
		static int RPC_ALL;
		static  ::kha::netsync::Session instance;
		static  ::kha::netsync::Session the();
		static ::Dynamic the_dyn();

		 ::haxe::ds::IntMap entities;
		inline  ::haxe::ds::IntMap _hx_set_entities(::hx::StackContext *_hx_ctx, ::haxe::ds::IntMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return entities=_hx_v; }
		 ::haxe::ds::IntMap controllers;
		inline  ::haxe::ds::IntMap _hx_set_controllers(::hx::StackContext *_hx_ctx, ::haxe::ds::IntMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return controllers=_hx_v; }
		int maxPlayers;
		int currentPlayers;
		Float ping;
		::String address;
		inline ::String _hx_set_address(::hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return address=_hx_v; }
		int port;
		 ::Dynamic startCallback;
		inline  ::Dynamic _hx_set_startCallback(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return startCallback=_hx_v; }
		Dynamic startCallback_dyn() { return startCallback;}
		 ::Dynamic refusedCallback;
		inline  ::Dynamic _hx_set_refusedCallback(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return refusedCallback=_hx_v; }
		Dynamic refusedCallback_dyn() { return refusedCallback;}
		 ::Dynamic resetCallback;
		inline  ::Dynamic _hx_set_resetCallback(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return resetCallback=_hx_v; }
		Dynamic resetCallback_dyn() { return resetCallback;}
		::Dynamic localClient;
		inline ::Dynamic _hx_set_localClient(::hx::StackContext *_hx_ctx,::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return localClient=_hx_v; }
		 ::kha::netsync::Network network;
		inline  ::kha::netsync::Network _hx_set_network(::hx::StackContext *_hx_ctx, ::kha::netsync::Network _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return network=_hx_v; }
		int updateTaskId;
		int pingTaskId;
		::Dynamic me;
		inline ::Dynamic _hx_set_me(::hx::StackContext *_hx_ctx,::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return me=_hx_v; }
		::Dynamic get_me();
		::Dynamic get_me_dyn();

		void addEntity(::Dynamic entity);
		::Dynamic addEntity_dyn();

		void addController( ::kha::netsync::Controller controller);
		::Dynamic addController_dyn();

		void sendControllerUpdate(int id, ::haxe::io::Bytes bytes);
		::Dynamic sendControllerUpdate_dyn();

		void sendPing();
		::Dynamic sendPing_dyn();

		void sendPlayerUpdate();
		::Dynamic sendPlayerUpdate_dyn();

		void receive( ::haxe::io::Bytes bytes,::Dynamic client);
		::Dynamic receive_dyn();

		void executeRPC( ::haxe::io::Bytes bytes);
		::Dynamic executeRPC_dyn();

		void waitForStart( ::Dynamic callback, ::Dynamic refuseCallback, ::Dynamic errorCallback, ::Dynamic closeCallback, ::Dynamic resCallback);
		::Dynamic waitForStart_dyn();

		void reset();
		::Dynamic reset_dyn();

		void update();
		::Dynamic update_dyn();

		void sendToServer( ::haxe::io::Bytes bytes);
		::Dynamic sendToServer_dyn();

};

} // end namespace kha
} // end namespace netsync

#endif /* INCLUDED_kha_netsync_Session */ 

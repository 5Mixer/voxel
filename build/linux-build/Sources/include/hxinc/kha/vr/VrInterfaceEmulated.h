// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_vr_VrInterfaceEmulated
#define INCLUDED_kha_vr_VrInterfaceEmulated

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_vr_VrInterface
#include <hxinc/kha/vr/VrInterface.h>
#endif
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Framebuffer)
HX_DECLARE_CLASS2(kha,arrays,Float32ArrayPrivate)
HX_DECLARE_CLASS2(kha,graphics4,IndexBuffer)
HX_DECLARE_CLASS2(kha,graphics4,PipelineState)
HX_DECLARE_CLASS2(kha,graphics4,PipelineStateBase)
HX_DECLARE_CLASS2(kha,graphics4,VertexBuffer)
HX_DECLARE_CLASS2(kha,math,Quaternion)
HX_DECLARE_CLASS2(kha,math,Vector2)
HX_DECLARE_CLASS2(kha,math,Vector3)
HX_DECLARE_CLASS2(kha,math,Vector4)
HX_DECLARE_CLASS2(kha,vr,SensorState)
HX_DECLARE_CLASS2(kha,vr,TimeWarpParms)
HX_DECLARE_CLASS2(kha,vr,VrInterface)
HX_DECLARE_CLASS2(kha,vr,VrInterfaceEmulated)

namespace kha{
namespace vr{


class HXCPP_CLASS_ATTRIBUTES VrInterfaceEmulated_obj : public  ::kha::vr::VrInterface_obj
{
	public:
		typedef  ::kha::vr::VrInterface_obj super;
		typedef VrInterfaceEmulated_obj OBJ_;
		VrInterfaceEmulated_obj();

	public:
		enum { _hx_ClassId = 0x18e9ac0e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.vr.VrInterfaceEmulated")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.vr.VrInterfaceEmulated"); }
		static ::hx::ObjectPtr< VrInterfaceEmulated_obj > __new();
		static ::hx::ObjectPtr< VrInterfaceEmulated_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~VrInterfaceEmulated_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("VrInterfaceEmulated",2e,40,8d,24); }

		static void __boot();
		static Float keyboardSpeed;
		static Float mouseSpeed;
		static Float minPitchDegrees;
		static Float maxPitchDegrees;
		 ::kha::Framebuffer framebuffer;
		inline  ::kha::Framebuffer _hx_set_framebuffer(::hx::StackContext *_hx_ctx, ::kha::Framebuffer _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return framebuffer=_hx_v; }
		 ::kha::math::Quaternion orientation;
		inline  ::kha::math::Quaternion _hx_set_orientation(::hx::StackContext *_hx_ctx, ::kha::math::Quaternion _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return orientation=_hx_v; }
		Float pitchDegrees;
		Float yawDegrees;
		Float pitchDelta;
		Float yawDelta;
		Float degreesToRadians(Float degrees);
		::Dynamic degreesToRadians_dyn();

		void updateOrientation();
		::Dynamic updateOrientation_dyn();

		void buttonEvent(int button,Float value);
		::Dynamic buttonEvent_dyn();

		void axisEvent(int axis,Float value);
		::Dynamic axisEvent_dyn();

		void keyDownEvent(int code);
		::Dynamic keyDownEvent_dyn();

		void keyUpEvent(int code);
		::Dynamic keyUpEvent_dyn();

		int oldMouseX;
		int oldMouseY;
		void mouseMoveEvent(int x,int y,int movementX,int movementY);
		::Dynamic mouseMoveEvent_dyn();

		bool mouseButtonDown;
		void mouseButtonDownEvent(int button,int x,int y);
		::Dynamic mouseButtonDownEvent_dyn();

		void mouseButtonUpEvent(int button,int x,int y);
		::Dynamic mouseButtonUpEvent_dyn();

		 ::kha::vr::SensorState GetSensorState();

		 ::kha::vr::SensorState GetPredictedSensorState(Float time);

		void WarpSwapBlack();

		void WarpSwapLoadingIcon();

		void WarpSwap( ::kha::vr::TimeWarpParms parms);

		Float GetTimeInSeconds();

		 ::kha::graphics4::VertexBuffer vb;
		inline  ::kha::graphics4::VertexBuffer _hx_set_vb(::hx::StackContext *_hx_ctx, ::kha::graphics4::VertexBuffer _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return vb=_hx_v; }
		 ::kha::graphics4::IndexBuffer ib;
		inline  ::kha::graphics4::IndexBuffer _hx_set_ib(::hx::StackContext *_hx_ctx, ::kha::graphics4::IndexBuffer _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return ib=_hx_v; }
		 ::kha::graphics4::PipelineState pipeline;
		inline  ::kha::graphics4::PipelineState _hx_set_pipeline(::hx::StackContext *_hx_ctx, ::kha::graphics4::PipelineState _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return pipeline=_hx_v; }
		void setVertex( ::kha::arrays::Float32ArrayPrivate a,int index, ::kha::math::Vector3 pos, ::kha::math::Vector2 uv, ::kha::math::Vector4 color);
		::Dynamic setVertex_dyn();

};

} // end namespace kha
} // end namespace vr

#endif /* INCLUDED_kha_vr_VrInterfaceEmulated */ 

// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_vr_PoseState
#define INCLUDED_kha_vr_PoseState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_a4000b2914fad01e_16_new)
HX_DECLARE_CLASS2(kha,math,Vector3)
HX_DECLARE_CLASS2(kha,vr,Pose)
HX_DECLARE_CLASS2(kha,vr,PoseState)

namespace kha{
namespace vr{


class HXCPP_CLASS_ATTRIBUTES PoseState_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PoseState_obj OBJ_;
		PoseState_obj();

	public:
		enum { _hx_ClassId = 0x0805da24 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.vr.PoseState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.vr.PoseState"); }

		inline static ::hx::ObjectPtr< PoseState_obj > __new() {
			::hx::ObjectPtr< PoseState_obj > __this = new PoseState_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< PoseState_obj > __alloc(::hx::Ctx *_hx_ctx) {
			PoseState_obj *__this = (PoseState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PoseState_obj), true, "kha.vr.PoseState"));
			*(void **)__this = PoseState_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_a4000b2914fad01e_16_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PoseState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PoseState",e0,fb,b8,df); }

		 ::kha::vr::Pose Pose;
		inline  ::kha::vr::Pose _hx_set_Pose(::hx::StackContext *_hx_ctx, ::kha::vr::Pose _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return Pose=_hx_v; }
		 ::kha::math::Vector3 AngularVelocity;
		inline  ::kha::math::Vector3 _hx_set_AngularVelocity(::hx::StackContext *_hx_ctx, ::kha::math::Vector3 _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return AngularVelocity=_hx_v; }
		 ::kha::math::Vector3 LinearVelocity;
		inline  ::kha::math::Vector3 _hx_set_LinearVelocity(::hx::StackContext *_hx_ctx, ::kha::math::Vector3 _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return LinearVelocity=_hx_v; }
		 ::kha::math::Vector3 AngularAcceleration;
		inline  ::kha::math::Vector3 _hx_set_AngularAcceleration(::hx::StackContext *_hx_ctx, ::kha::math::Vector3 _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return AngularAcceleration=_hx_v; }
		 ::kha::math::Vector3 LinearAcceleration;
		inline  ::kha::math::Vector3 _hx_set_LinearAcceleration(::hx::StackContext *_hx_ctx, ::kha::math::Vector3 _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return LinearAcceleration=_hx_v; }
		Float TimeInSeconds;
};

} // end namespace kha
} // end namespace vr

#endif /* INCLUDED_kha_vr_PoseState */ 

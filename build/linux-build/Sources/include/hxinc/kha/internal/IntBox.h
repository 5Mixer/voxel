// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_internal_IntBox
#define INCLUDED_kha_internal_IntBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_a1a0def2e47a64ba_7_new)
HX_DECLARE_CLASS2(kha,internal,IntBox)

namespace kha{
namespace internal{


class HXCPP_CLASS_ATTRIBUTES IntBox_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef IntBox_obj OBJ_;
		IntBox_obj();

	public:
		enum { _hx_ClassId = 0x0fe984b9 };

		void __construct(int value);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.internal.IntBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"kha.internal.IntBox"); }

		inline static ::hx::ObjectPtr< IntBox_obj > __new(int value) {
			::hx::ObjectPtr< IntBox_obj > __this = new IntBox_obj();
			__this->__construct(value);
			return __this;
		}

		inline static ::hx::ObjectPtr< IntBox_obj > __alloc(::hx::Ctx *_hx_ctx,int value) {
			IntBox_obj *__this = (IntBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IntBox_obj), false, "kha.internal.IntBox"));
			*(void **)__this = IntBox_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_a1a0def2e47a64ba_7_new)
HXDLIN(   7)		( ( ::kha::internal::IntBox)(__this) )->value = value;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~IntBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IntBox",7c,5c,00,d3); }

		int value;
};

} // end namespace kha
} // end namespace internal

#endif /* INCLUDED_kha_internal_IntBox */ 

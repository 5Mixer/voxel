// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_input_Keyboard
#define INCLUDED_kha_input_Keyboard

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(kha,input,BlockInterventions)
HX_DECLARE_CLASS2(kha,input,Keyboard)
HX_DECLARE_CLASS2(kha,netsync,Controller)

namespace kha{
namespace input{


class HXCPP_CLASS_ATTRIBUTES Keyboard_obj : public  ::kha::netsync::Controller_obj
{
	public:
		typedef  ::kha::netsync::Controller_obj super;
		typedef Keyboard_obj OBJ_;
		Keyboard_obj();

	public:
		enum { _hx_ClassId = 0x0fbefc61 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.input.Keyboard")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.input.Keyboard"); }
		static ::hx::ObjectPtr< Keyboard_obj > __new();
		static ::hx::ObjectPtr< Keyboard_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Keyboard_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Keyboard",c7,78,db,41); }

		static void __boot();
		static  ::Dynamic __meta__;
		static  ::kha::input::BlockInterventions keyBehavior;
		static  ::kha::input::Keyboard get(::hx::Null< int >  num);
		static ::Dynamic get_dyn();

		static void disableSystemInterventions( ::kha::input::BlockInterventions behavior);
		static ::Dynamic disableSystemInterventions_dyn();

		static  ::kha::input::Keyboard instance;
		void notify( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic pressListener);
		::Dynamic notify_dyn();

		void remove( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic pressListener);
		::Dynamic remove_dyn();

		virtual void show();
		::Dynamic show_dyn();

		virtual void hide();
		::Dynamic hide_dyn();

		::Array< ::Dynamic> downListeners;
		inline ::Array< ::Dynamic> _hx_set_downListeners(::hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return downListeners=_hx_v; }
		::Array< ::Dynamic> upListeners;
		inline ::Array< ::Dynamic> _hx_set_upListeners(::hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return upListeners=_hx_v; }
		::Array< ::Dynamic> pressListeners;
		inline ::Array< ::Dynamic> _hx_set_pressListeners(::hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return pressListeners=_hx_v; }
		void sendDownEvent(int code);
		::Dynamic sendDownEvent_dyn();

		void sendUpEvent(int code);
		::Dynamic sendUpEvent_dyn();

		void sendPressEvent(::String _hx_char);
		::Dynamic sendPressEvent_dyn();

		virtual void _receive( ::haxe::io::Bytes bytes);

};

} // end namespace kha
} // end namespace input

#endif /* INCLUDED_kha_input_Keyboard */ 

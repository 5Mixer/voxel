// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_input_Sensor
#define INCLUDED_kha_input_Sensor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_4658952827b01861_7_new)
HX_DECLARE_CLASS2(kha,input,Sensor)

namespace kha{
namespace input{


class HXCPP_CLASS_ATTRIBUTES Sensor_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Sensor_obj OBJ_;
		Sensor_obj();

	public:
		enum { _hx_ClassId = 0x467bfb80 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.input.Sensor")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.input.Sensor"); }

		inline static ::hx::ObjectPtr< Sensor_obj > __new() {
			::hx::ObjectPtr< Sensor_obj > __this = new Sensor_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Sensor_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Sensor_obj *__this = (Sensor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Sensor_obj), true, "kha.input.Sensor"));
			*(void **)__this = Sensor_obj::_hx_vtable;
{
            	HX_GC_STACKFRAME(&_hx_pos_4658952827b01861_7_new)
HXDLIN(   7)		( ( ::kha::input::Sensor)(__this) )->_hx_set_listeners(HX_CTX, ::Array_obj< ::Dynamic>::__new());
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Sensor_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Sensor",5a,a6,24,a0); }

		static void __boot();
		static  ::kha::input::Sensor accelerometer;
		static  ::kha::input::Sensor gyroscope;
		static  ::kha::input::Sensor get(int type);
		static ::Dynamic get_dyn();

		static void _changed(int type,Float x,Float y,Float z);
		static ::Dynamic _changed_dyn();

		::Array< ::Dynamic> listeners;
		inline ::Array< ::Dynamic> _hx_set_listeners(::hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return listeners=_hx_v; }
		void notify( ::Dynamic listener);
		::Dynamic notify_dyn();

};

} // end namespace kha
} // end namespace input

#endif /* INCLUDED_kha_input_Sensor */ 

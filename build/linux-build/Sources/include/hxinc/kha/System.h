// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_System
#define INCLUDED_kha_System

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Framebuffer)
HX_DECLARE_CLASS1(kha,System)
HX_DECLARE_CLASS1(kha,SystemOptions)
HX_DECLARE_CLASS1(kha,Window)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES System_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef System_obj OBJ_;
		System_obj();

	public:
		enum { _hx_ClassId = 0x246d6333 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.System")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"kha.System"); }

		inline static ::hx::ObjectPtr< System_obj > __new() {
			::hx::ObjectPtr< System_obj > __this = new System_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< System_obj > __alloc(::hx::Ctx *_hx_ctx) {
			System_obj *__this = (System_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(System_obj), false, "kha.System"));
			*(void **)__this = System_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~System_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("System",0f,0b,77,27); }

		static void __boot();
		static ::Array< ::Dynamic> renderListeners;
		static ::Array< ::Dynamic> foregroundListeners;
		static ::Array< ::Dynamic> resumeListeners;
		static ::Array< ::Dynamic> pauseListeners;
		static ::Array< ::Dynamic> backgroundListeners;
		static ::Array< ::Dynamic> shutdownListeners;
		static ::Array< ::Dynamic> dropFilesListeners;
		static  ::Dynamic cutListener;
		static Dynamic cutListener_dyn() { return cutListener;}
		static  ::Dynamic copyListener;
		static Dynamic copyListener_dyn() { return copyListener;}
		static  ::Dynamic pasteListener;
		static Dynamic pasteListener_dyn() { return pasteListener;}
		static  ::Dynamic loginListener;
		static Dynamic loginListener_dyn() { return loginListener;}
		static  ::Dynamic logoutListener;
		static Dynamic logoutListener_dyn() { return logoutListener;}
		static ::String theTitle;
		static void init( ::Dynamic options, ::Dynamic callback);
		static ::Dynamic init_dyn();

		static void start( ::kha::SystemOptions options, ::Dynamic callback);
		static ::Dynamic start_dyn();

		static ::String get_title();
		static ::Dynamic get_title_dyn();

		static void notifyOnRender( ::Dynamic listener,::hx::Null< int >  id);
		static ::Dynamic notifyOnRender_dyn();

		static void notifyOnFrames( ::Dynamic listener);
		static ::Dynamic notifyOnFrames_dyn();

		static void removeFramesListener( ::Dynamic listener);
		static ::Dynamic removeFramesListener_dyn();

		static void notifyOnApplicationState( ::Dynamic foregroundListener, ::Dynamic resumeListener, ::Dynamic pauseListener, ::Dynamic backgroundListener, ::Dynamic shutdownListener);
		static ::Dynamic notifyOnApplicationState_dyn();

		static void removeApplicationStateListeners( ::Dynamic foregroundListener, ::Dynamic resumeListener, ::Dynamic pauseListener, ::Dynamic backgroundListener, ::Dynamic shutdownListener);
		static ::Dynamic removeApplicationStateListeners_dyn();

		static void notifyOnDropFiles( ::Dynamic dropFilesListener);
		static ::Dynamic notifyOnDropFiles_dyn();

		static void removeDropListener( ::Dynamic listener);
		static ::Dynamic removeDropListener_dyn();

		static void notifyOnCutCopyPaste( ::Dynamic cutListener, ::Dynamic copyListener, ::Dynamic pasteListener);
		static ::Dynamic notifyOnCutCopyPaste_dyn();

		static void notifyOnLoginLogout( ::Dynamic loginListener, ::Dynamic logoutListener);
		static ::Dynamic notifyOnLoginLogout_dyn();

		static void login();
		static ::Dynamic login_dyn();

		static bool waitingForLogin();
		static ::Dynamic waitingForLogin_dyn();

		static void allowUserChange();
		static ::Dynamic allowUserChange_dyn();

		static void disallowUserChange();
		static ::Dynamic disallowUserChange_dyn();

		static void render(::Array< ::Dynamic> framebuffers);
		static ::Dynamic render_dyn();

		static void foreground();
		static ::Dynamic foreground_dyn();

		static void resume();
		static ::Dynamic resume_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void background();
		static ::Dynamic background_dyn();

		static void shutdown();
		static ::Dynamic shutdown_dyn();

		static void dropFiles(::String filePath);
		static ::Dynamic dropFiles_dyn();

		static Float time;
		static Float get_time();
		static ::Dynamic get_time_dyn();

		static int windowWidth(::hx::Null< int >  window);
		static ::Dynamic windowWidth_dyn();

		static int windowHeight(::hx::Null< int >  window);
		static ::Dynamic windowHeight_dyn();

		static int screenRotation;
		static int get_screenRotation();
		static ::Dynamic get_screenRotation_dyn();

		static ::String systemId;
		static ::String get_systemId();
		static ::Dynamic get_systemId_dyn();

		static void vibrate(int ms);
		static ::Dynamic vibrate_dyn();

		static ::String get_language();
		static ::Dynamic get_language_dyn();

		static bool stop();
		static ::Dynamic stop_dyn();

		static void loadUrl(::String url);
		static ::Dynamic loadUrl_dyn();

		static bool canSwitchFullscreen();
		static ::Dynamic canSwitchFullscreen_dyn();

		static bool isFullscreen();
		static ::Dynamic isFullscreen_dyn();

		static void requestFullscreen();
		static ::Dynamic requestFullscreen_dyn();

		static void exitFullscreen();
		static ::Dynamic exitFullscreen_dyn();

		static void notifyOnFullscreenChange( ::Dynamic func, ::Dynamic error);
		static ::Dynamic notifyOnFullscreenChange_dyn();

		static void removeFullscreenListener( ::Dynamic func, ::Dynamic error);
		static ::Dynamic removeFullscreenListener_dyn();

		static void changeResolution(int width,int height);
		static ::Dynamic changeResolution_dyn();

		static void requestShutdown();
		static ::Dynamic requestShutdown_dyn();

		static bool vsync;
		static bool get_vsync();
		static ::Dynamic get_vsync_dyn();

		static int refreshRate;
		static int get_refreshRate();
		static ::Dynamic get_refreshRate_dyn();

		static int screenDpi();
		static ::Dynamic screenDpi_dyn();

		static Float safeZone();
		static ::Dynamic safeZone_dyn();

		static bool automaticSafeZone();
		static ::Dynamic automaticSafeZone_dyn();

		static void setSafeZone(Float value);
		static ::Dynamic setSafeZone_dyn();

		static void unlockAchievement(int id);
		static ::Dynamic unlockAchievement_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_System */ 

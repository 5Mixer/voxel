// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_arrays_Int16ArrayPrivate
#define INCLUDED_kha_arrays_Int16ArrayPrivate

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_92bd55e89fe0c809
#define INCLUDED_92bd55e89fe0c809
#include "cpp_int16array.h"
#endif
HX_DECLARE_CLASS2(kha,arrays,Int16ArrayPrivate)

namespace kha{
namespace arrays{


class HXCPP_CLASS_ATTRIBUTES Int16ArrayPrivate_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Int16ArrayPrivate_obj OBJ_;
		Int16ArrayPrivate_obj();

	public:
		enum { _hx_ClassId = 0x00620f20 };

		void __construct(::hx::Null< int >  __o_elements);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.arrays.Int16ArrayPrivate")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.arrays.Int16ArrayPrivate"); }
		static ::hx::ObjectPtr< Int16ArrayPrivate_obj > __new(::hx::Null< int >  __o_elements);
		static ::hx::ObjectPtr< Int16ArrayPrivate_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_elements);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Int16ArrayPrivate_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Int16ArrayPrivate",fe,67,e5,6c); }

		static void finalize( ::kha::arrays::Int16ArrayPrivate arr);
		static ::Dynamic finalize_dyn();

		 int16array self;
};

} // end namespace kha
} // end namespace arrays

#endif /* INCLUDED_kha_arrays_Int16ArrayPrivate */ 

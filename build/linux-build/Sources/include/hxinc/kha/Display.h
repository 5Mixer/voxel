// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_Display
#define INCLUDED_kha_Display

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Display)
HX_DECLARE_CLASS1(kha,DisplayMode)


#include <Kore/pch.h>
#include <Kore/Display.h>

namespace kha{


class HXCPP_CLASS_ATTRIBUTES Display_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Display_obj OBJ_;
		Display_obj();

	public:
		enum { _hx_ClassId = 0x157c80e2 };

		void __construct(int num);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.Display")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.Display"); }
		static ::hx::ObjectPtr< Display_obj > __new(int num);
		static ::hx::ObjectPtr< Display_obj > __alloc(::hx::Ctx *_hx_ctx,int num);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Display_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Display",22,52,9b,88); }

		static void __boot();
		static ::Array< ::Dynamic> displays;
		static int count();
		static ::Dynamic count_dyn();

		static void init();
		static ::Dynamic init_dyn();

		static int primaryId();
		static ::Dynamic primaryId_dyn();

		static  ::kha::Display get_primary();
		static ::Dynamic get_primary_dyn();

		static ::Array< ::Dynamic> get_all();
		static ::Dynamic get_all_dyn();

		int num;
		bool get_available();
		::Dynamic get_available_dyn();

		::String get_name();
		::Dynamic get_name_dyn();

		int get_x();
		::Dynamic get_x_dyn();

		int get_y();
		::Dynamic get_y_dyn();

		int get_width();
		::Dynamic get_width_dyn();

		int get_height();
		::Dynamic get_height_dyn();

		int get_frequency();
		::Dynamic get_frequency_dyn();

		int get_pixelsPerInch();
		::Dynamic get_pixelsPerInch_dyn();

		::Array< ::Dynamic> allModes;
		inline ::Array< ::Dynamic> _hx_set_allModes(::hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return allModes=_hx_v; }
		int modeCount();
		::Dynamic modeCount_dyn();

		int getModeWidth(int num);
		::Dynamic getModeWidth_dyn();

		int getModeHeight(int num);
		::Dynamic getModeHeight_dyn();

		int getModeFrequency(int num);
		::Dynamic getModeFrequency_dyn();

		int getModeBitsPerPixel(int num);
		::Dynamic getModeBitsPerPixel_dyn();

		void initModes();
		::Dynamic initModes_dyn();

		::Array< ::Dynamic> get_modes();
		::Dynamic get_modes_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_Display */ 

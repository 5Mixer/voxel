// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_compute_TextureUnit
#define INCLUDED_kha_compute_TextureUnit

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b6b622a79d59080d_10_new)
HX_DECLARE_CLASS2(kha,compute,TextureUnit)


#include <Kore/pch.h>
#include <Kore/Compute/Compute.h>

namespace kha{
namespace compute{


class HXCPP_CLASS_ATTRIBUTES TextureUnit_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TextureUnit_obj OBJ_;
		TextureUnit_obj();

	public:
		enum { _hx_ClassId = 0x3f085988 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.compute.TextureUnit")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"kha.compute.TextureUnit"); }

		inline static ::hx::ObjectPtr< TextureUnit_obj > __new() {
			::hx::ObjectPtr< TextureUnit_obj > __this = new TextureUnit_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TextureUnit_obj > __alloc(::hx::Ctx *_hx_ctx) {
			TextureUnit_obj *__this = (TextureUnit_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextureUnit_obj), false, "kha.compute.TextureUnit"));
			*(void **)__this = TextureUnit_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_b6b622a79d59080d_10_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextureUnit_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextureUnit",df,60,5b,e8); }

Kore::ComputeTextureUnit unit;
};

} // end namespace kha
} // end namespace compute

#endif /* INCLUDED_kha_compute_TextureUnit */ 

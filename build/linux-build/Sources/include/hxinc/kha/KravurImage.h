// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_KravurImage
#define INCLUDED_kha_KravurImage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,AlignedQuad)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,KravurImage)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS3(kha,graphics2,truetype,Stbtt_bakedchar)
HX_DECLARE_CLASS2(kha,internal,BytesBlob)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES KravurImage_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef KravurImage_obj OBJ_;
		KravurImage_obj();

	public:
		enum { _hx_ClassId = 0x7e2c4676 };

		void __construct(int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.KravurImage")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.KravurImage"); }
		static ::hx::ObjectPtr< KravurImage_obj > __new(int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels);
		static ::hx::ObjectPtr< KravurImage_obj > __alloc(::hx::Ctx *_hx_ctx,int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~KravurImage_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("KravurImage",c2,28,a1,93); }

		static ::Array< int > charBlocks;
		Float mySize;
		::Array< ::Dynamic> chars;
		inline ::Array< ::Dynamic> _hx_set_chars(::hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return chars=_hx_v; }
		 ::kha::Image texture;
		inline  ::kha::Image _hx_set_texture(::hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return texture=_hx_v; }
		int width;
		int height;
		Float baseline;
		 ::kha::Image getTexture();
		::Dynamic getTexture_dyn();

		 ::kha::AlignedQuad getBakedQuad( ::kha::AlignedQuad q,int char_index,Float xpos,Float ypos);
		::Dynamic getBakedQuad_dyn();

		Float getCharWidth(int charIndex);
		::Dynamic getCharWidth_dyn();

		Float getHeight();
		::Dynamic getHeight_dyn();

		Float stringWidth(::String str);
		::Dynamic stringWidth_dyn();

		Float charactersWidth(::Array< int > characters,int start,int length);
		::Dynamic charactersWidth_dyn();

		Float getBaselinePosition();
		::Dynamic getBaselinePosition_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_KravurImage */ 

// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_graphics4_PerFramebufferPipelineCache
#define INCLUDED_kha_graphics4_PerFramebufferPipelineCache

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
HX_DECLARE_CLASS2(kha,graphics4,InternalPipeline)
HX_DECLARE_CLASS2(kha,graphics4,PerFramebufferPipelineCache)
HX_DECLARE_CLASS2(kha,graphics4,PipelineCache)
HX_DECLARE_CLASS2(kha,graphics4,PipelineState)
HX_DECLARE_CLASS2(kha,graphics4,PipelineStateBase)

namespace kha{
namespace graphics4{


class HXCPP_CLASS_ATTRIBUTES PerFramebufferPipelineCache_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PerFramebufferPipelineCache_obj OBJ_;
		PerFramebufferPipelineCache_obj();

	public:
		enum { _hx_ClassId = 0x5218572b };

		void __construct( ::kha::graphics4::PipelineState pipeline,bool texture);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.graphics4.PerFramebufferPipelineCache")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.graphics4.PerFramebufferPipelineCache"); }
		static ::hx::ObjectPtr< PerFramebufferPipelineCache_obj > __new( ::kha::graphics4::PipelineState pipeline,bool texture);
		static ::hx::ObjectPtr< PerFramebufferPipelineCache_obj > __alloc(::hx::Ctx *_hx_ctx, ::kha::graphics4::PipelineState pipeline,bool texture);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PerFramebufferPipelineCache_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("PerFramebufferPipelineCache",70,36,d8,90); }

		::Array< ::Dynamic> pipelines;
		inline ::Array< ::Dynamic> _hx_set_pipelines(::hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return pipelines=_hx_v; }
		 ::kha::graphics4::InternalPipeline get(::Array< int > colorFormats,int depthStencilFormat);
		::Dynamic get_dyn();

		int hash(::Array< int > colorFormats,int depthStencilFormat);
		::Dynamic hash_dyn();

};

} // end namespace kha
} // end namespace graphics4

#endif /* INCLUDED_kha_graphics4_PerFramebufferPipelineCache */ 

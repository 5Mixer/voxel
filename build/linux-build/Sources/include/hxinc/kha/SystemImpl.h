// Generated by Haxe 4.1.3
#ifndef INCLUDED_kha_SystemImpl
#define INCLUDED_kha_SystemImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Framebuffer)
HX_DECLARE_CLASS1(kha,FramebufferOptions)
HX_DECLARE_CLASS1(kha,SystemImpl)
HX_DECLARE_CLASS1(kha,SystemOptions)
HX_DECLARE_CLASS1(kha,Window)
HX_DECLARE_CLASS1(kha,WindowOptions)
HX_DECLARE_CLASS2(kha,input,Gamepad)
HX_DECLARE_CLASS2(kha,input,Keyboard)
HX_DECLARE_CLASS2(kha,input,Mouse)
HX_DECLARE_CLASS2(kha,input,Pen)
HX_DECLARE_CLASS2(kha,input,Surface)
HX_DECLARE_CLASS2(kha,netsync,Controller)


#include <Kore/pch.h>
#include <Kore/System.h>
#include <Kore/Input/Gamepad.h>
#include <Kore/Input/Mouse.h>
#include <Kore/Input/Pen.h>
#include <Kore/Display.h>
#include <Kore/Window.h>

#include <kinc/system.h>

Kore::WindowOptions convertWindowOptions(::kha::WindowOptions win);
Kore::FramebufferOptions convertFramebufferOptions(::kha::FramebufferOptions frame);

void init_kore(const char* name, int width, int height, Kore::WindowOptions* win, Kore::FramebufferOptions* frame);
void post_kore_init();
void run_kore();
const char* getGamepadId(int index);
const char* getGamepadVendor(int index);

namespace kha{


class HXCPP_CLASS_ATTRIBUTES SystemImpl_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SystemImpl_obj OBJ_;
		SystemImpl_obj();

	public:
		enum { _hx_ClassId = 0x257a1107 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="kha.SystemImpl")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"kha.SystemImpl"); }

		inline static ::hx::ObjectPtr< SystemImpl_obj > __new() {
			::hx::ObjectPtr< SystemImpl_obj > __this = new SystemImpl_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< SystemImpl_obj > __alloc(::hx::Ctx *_hx_ctx) {
			SystemImpl_obj *__this = (SystemImpl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SystemImpl_obj), false, "kha.SystemImpl"));
			*(void **)__this = SystemImpl_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SystemImpl_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SystemImpl",8f,e9,ee,ea); }

		static void __boot();
		static bool needs3d;
		static  ::kha::input::Mouse getMouse(int num);
		static ::Dynamic getMouse_dyn();

		static  ::kha::input::Pen getPen(int num);
		static ::Dynamic getPen_dyn();

		static  ::kha::input::Keyboard getKeyboard(int num);
		static ::Dynamic getKeyboard_dyn();

		static Float getTime();
		static ::Dynamic getTime_dyn();

		static int windowWidth(int windowId);
		static ::Dynamic windowWidth_dyn();

		static int windowHeight(int windowId);
		static ::Dynamic windowHeight_dyn();

		static int screenDpi();
		static ::Dynamic screenDpi_dyn();

		static bool getVsync();
		static ::Dynamic getVsync_dyn();

		static int getRefreshRate();
		static ::Dynamic getRefreshRate_dyn();

		static int getScreenRotation();
		static ::Dynamic getScreenRotation_dyn();

		static ::String getSystemId();
		static ::Dynamic getSystemId_dyn();

		static void vibrate(int ms);
		static ::Dynamic vibrate_dyn();

		static ::String getLanguage();
		static ::Dynamic getLanguage_dyn();

		static bool requestShutdown();
		static ::Dynamic requestShutdown_dyn();

		static ::Array< ::Dynamic> framebuffers;
		static  ::kha::input::Keyboard keyboard;
		static  ::kha::input::Mouse mouse;
		static  ::kha::input::Pen pen;
		static  ::kha::input::Gamepad gamepad1;
		static  ::kha::input::Gamepad gamepad2;
		static  ::kha::input::Gamepad gamepad3;
		static  ::kha::input::Gamepad gamepad4;
		static  ::kha::input::Surface surface;
		static ::Array< ::Dynamic> mouseLockListeners;
		static void init( ::kha::SystemOptions options, ::Dynamic callback);
		static ::Dynamic init_dyn();

		static void onWindowCreated(int index);
		static ::Dynamic onWindowCreated_dyn();

		static void postInit( ::Dynamic callback);
		static ::Dynamic postInit_dyn();

		static void loadFinished();
		static ::Dynamic loadFinished_dyn();

		static void lockMouse(::hx::Null< int >  windowId);
		static ::Dynamic lockMouse_dyn();

		static void unlockMouse(::hx::Null< int >  windowId);
		static ::Dynamic unlockMouse_dyn();

		static bool canLockMouse(::hx::Null< int >  windowId);
		static ::Dynamic canLockMouse_dyn();

		static bool isMouseLocked(::hx::Null< int >  windowId);
		static ::Dynamic isMouseLocked_dyn();

		static void notifyOfMouseLockChange( ::Dynamic func, ::Dynamic error,::hx::Null< int >  windowId);
		static ::Dynamic notifyOfMouseLockChange_dyn();

		static void removeFromMouseLockChange( ::Dynamic func, ::Dynamic error,::hx::Null< int >  windowId);
		static ::Dynamic removeFromMouseLockChange_dyn();

		static void hideSystemCursor();
		static ::Dynamic hideSystemCursor_dyn();

		static void showSystemCursor();
		static ::Dynamic showSystemCursor_dyn();

		static void setSystemCursor(int cursor);
		static ::Dynamic setSystemCursor_dyn();

		static void frame();
		static ::Dynamic frame_dyn();

		static bool checkGamepadConnected();
		static ::Dynamic checkGamepadConnected_dyn();

		static void keyDown(int code);
		static ::Dynamic keyDown_dyn();

		static void keyUp(int code);
		static ::Dynamic keyUp_dyn();

		static void keyPress(int _hx_char);
		static ::Dynamic keyPress_dyn();

		static int mouseX;
		static int mouseY;
		static void mouseDown(int windowId,int button,int x,int y);
		static ::Dynamic mouseDown_dyn();

		static void mouseUp(int windowId,int button,int x,int y);
		static ::Dynamic mouseUp_dyn();

		static void mouseMove(int windowId,int x,int y,int movementX,int movementY);
		static ::Dynamic mouseMove_dyn();

		static void mouseWheel(int windowId,int delta);
		static ::Dynamic mouseWheel_dyn();

		static void mouseLeave(int windowId);
		static ::Dynamic mouseLeave_dyn();

		static void penDown(int windowId,int x,int y,Float pressure);
		static ::Dynamic penDown_dyn();

		static void penUp(int windowId,int x,int y,Float pressure);
		static ::Dynamic penUp_dyn();

		static void penMove(int windowId,int x,int y,Float pressure);
		static ::Dynamic penMove_dyn();

		static void gamepad1Axis(int axis,Float value);
		static ::Dynamic gamepad1Axis_dyn();

		static void gamepad1Button(int button,Float value);
		static ::Dynamic gamepad1Button_dyn();

		static void gamepad2Axis(int axis,Float value);
		static ::Dynamic gamepad2Axis_dyn();

		static void gamepad2Button(int button,Float value);
		static ::Dynamic gamepad2Button_dyn();

		static void gamepad3Axis(int axis,Float value);
		static ::Dynamic gamepad3Axis_dyn();

		static void gamepad3Button(int button,Float value);
		static ::Dynamic gamepad3Button_dyn();

		static void gamepad4Axis(int axis,Float value);
		static ::Dynamic gamepad4Axis_dyn();

		static void gamepad4Button(int button,Float value);
		static ::Dynamic gamepad4Button_dyn();

		static void touchStart(int index,int x,int y);
		static ::Dynamic touchStart_dyn();

		static void touchEnd(int index,int x,int y);
		static ::Dynamic touchEnd_dyn();

		static void touchMove(int index,int x,int y);
		static ::Dynamic touchMove_dyn();

		static void foreground();
		static ::Dynamic foreground_dyn();

		static void resume();
		static ::Dynamic resume_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void background();
		static ::Dynamic background_dyn();

		static void shutdown();
		static ::Dynamic shutdown_dyn();

		static void dropFiles(::String filePath);
		static ::Dynamic dropFiles_dyn();

		static ::String copy();
		static ::Dynamic copy_dyn();

		static ::String cut();
		static ::Dynamic cut_dyn();

		static void paste(::String data);
		static ::Dynamic paste_dyn();

		static void login();
		static ::Dynamic login_dyn();

		static bool waitingForLogin();
		static ::Dynamic waitingForLogin_dyn();

		static void disallowUserChange();
		static ::Dynamic disallowUserChange_dyn();

		static void allowUserChange();
		static ::Dynamic allowUserChange_dyn();

		static void loginevent();
		static ::Dynamic loginevent_dyn();

		static void logoutevent();
		static ::Dynamic logoutevent_dyn();

		static void initKore(::String name,int width,int height, ::kha::WindowOptions win, ::kha::FramebufferOptions frame);
		static ::Dynamic initKore_dyn();

		static void setKeepScreenOn(bool on);
		static ::Dynamic setKeepScreenOn_dyn();

		static void loadUrl(::String url);
		static ::Dynamic loadUrl_dyn();

		static ::String getGamepadId(int index);
		static ::Dynamic getGamepadId_dyn();

		static ::String getGamepadVendor(int index);
		static ::Dynamic getGamepadVendor_dyn();

		static Float safeZone();
		static ::Dynamic safeZone_dyn();

		static bool automaticSafeZone();
		static ::Dynamic automaticSafeZone_dyn();

		static void setSafeZone(Float value);
		static ::Dynamic setSafeZone_dyn();

		static void unlockAchievement(int id);
		static ::Dynamic unlockAchievement_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_SystemImpl */ 

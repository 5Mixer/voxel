// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <hxinc/haxe/Timer.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_102f69689d37b2bb_67_new,"haxe.Timer","new",0x4136b0cf,"haxe.Timer.new","haxe/Timer.hx",67,0x1a690682)
HX_DEFINE_STACK_FRAME(_hx_pos_102f69689d37b2bb_57_new,"haxe.Timer","new",0x4136b0cf,"haxe.Timer.new","haxe/Timer.hx",57,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_79_stop,"haxe.Timer","stop",0xd1fd70b3,"haxe.Timer.stop","haxe/Timer.hx",79,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_104___default_run,"haxe.Timer","__default_run",0xdc2b9b9c,"haxe.Timer.__default_run","haxe/Timer.hx",104,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_119_delay,"haxe.Timer","delay",0x3ed5f1b2,"haxe.Timer.delay","haxe/Timer.hx",119,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_117_delay,"haxe.Timer","delay",0x3ed5f1b2,"haxe.Timer.delay","haxe/Timer.hx",117,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_137_measure,"haxe.Timer","measure",0x42373f4d,"haxe.Timer.measure","haxe/Timer.hx",137,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_154_stamp,"haxe.Timer","stamp",0xebba8a32,"haxe.Timer.stamp","haxe/Timer.hx",154,0x1a690682)
namespace haxe{

void Timer_obj::__construct(int time_ms){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::haxe::Timer,me) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_67_new)
HXLINE(  67)			me->run();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_102f69689d37b2bb_57_new)
HXLINE(  58)		 ::haxe::Timer me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  67)		this->_hx_set_id(HX_CTX, ::kha::Scheduler_obj::addTimeTask( ::Dynamic(new _hx_Closure_0(me)),(( (Float)(time_ms) ) / ( (Float)(1000) )),(( (Float)(time_ms) ) / ( (Float)(1000) )),null()));
            	}

Dynamic Timer_obj::__CreateEmpty() { return new Timer_obj; }

void *Timer_obj::_hx_vtable = 0;

Dynamic Timer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Timer_obj > _hx_result = new Timer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Timer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04eaa0bb;
}

void Timer_obj::stop(){
            	HX_GC_STACKFRAME(&_hx_pos_102f69689d37b2bb_79_stop)
HXLINE(  86)		if (::hx::IsNull( this->id )) {
HXLINE(  87)			return;
            		}
HXLINE(  88)		::kha::Scheduler_obj::removeTimeTask(( (int)(this->id) ));
HXLINE(  89)		this->_hx_set_id(HX_CTX, null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,stop,(void))

HX_BEGIN_DEFAULT_FUNC(__default_run,Timer_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_104___default_run)
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

 ::haxe::Timer Timer_obj::delay( ::Dynamic f,int time_ms){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::haxe::Timer,t) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_102f69689d37b2bb_119_delay)
HXLINE( 120)			t->stop();
HXLINE( 121)			f();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_102f69689d37b2bb_117_delay)
HXLINE( 118)		 ::haxe::Timer t =  ::haxe::Timer_obj::__alloc( HX_CTX ,time_ms);
HXLINE( 119)		t->_hx_set_run(HX_CTX,  ::Dynamic(new _hx_Closure_0(f,t)));
HXLINE( 123)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timer_obj,delay,return )

 ::Dynamic Timer_obj::measure( ::Dynamic f, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_137_measure)
HXLINE( 138)		Float t0 = ::kha::Scheduler_obj::realTime();
HXLINE( 139)		 ::Dynamic r = f();
HXLINE( 140)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 140)		_hx_tmp(((::kha::Scheduler_obj::realTime() - t0) + HX_("s",73,00,00,00)),pos);
HXLINE( 141)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timer_obj,measure,return )

Float Timer_obj::stamp(){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_154_stamp)
HXDLIN( 154)		return ::kha::Scheduler_obj::realTime();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,stamp,return )


void Timer_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,Timer_obj *_hx_obj) {
	if (!_hx_obj->run.mPtr) _hx_obj->run = new __default_run(_hx_obj);
}
::hx::ObjectPtr< Timer_obj > Timer_obj::__new(int time_ms) {
	::hx::ObjectPtr< Timer_obj > __this = new Timer_obj();
	__this->__construct(time_ms);
	return __this;
}

::hx::ObjectPtr< Timer_obj > Timer_obj::__alloc(::hx::Ctx *_hx_ctx,int time_ms) {
	Timer_obj *__this = (Timer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Timer_obj), true, "haxe.Timer"));
	*(void **)__this = Timer_obj::_hx_vtable;
	haxe::Timer_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(time_ms);
	return __this;
}

Timer_obj::Timer_obj()
{
	run = new __default_run(this);
}

void Timer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Timer);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(run,"run");
	HX_MARK_END_CLASS();
}

void Timer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(run,"run");
}

::hx::Val Timer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Timer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { outValue = delay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stamp") ) { outValue = stamp_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"measure") ) { outValue = measure_dyn(); return true; }
	}
	return false;
}

::hx::Val Timer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { _hx_set_id(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { _hx_set_run(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Timer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Timer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Timer_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Timer_obj,run),HX_("run",4b,e7,56,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Timer_obj_sStaticStorageInfo = 0;
#endif

static ::String Timer_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("stop",02,f0,5b,4c),
	HX_("run",4b,e7,56,00),
	::String(null()) };

::hx::Class Timer_obj::__mClass;

static ::String Timer_obj_sStaticFields[] = {
	HX_("delay",83,d7,26,d7),
	HX_("measure",5e,fb,e9,3c),
	HX_("stamp",03,70,0b,84),
	::String(null())
};

void Timer_obj::__register()
{
	Timer_obj _hx_dummy;
	Timer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.Timer",5d,9d,24,4b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Timer_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Timer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Timer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Timer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Timer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Timer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
#ifndef INCLUDED_kha_netsync_ControllerBuilder
#include <hxinc/kha/netsync/ControllerBuilder.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d583c86a58345f5b_11_new,"kha.netsync.Controller","new",0x9522ad2e,"kha.netsync.Controller.new","kha/netsync/Controller.hx",11,0x2b3d2fc0)
HX_LOCAL_STACK_FRAME(_hx_pos_d583c86a58345f5b_17__id,"kha.netsync.Controller","_id",0x95174ec8,"kha.netsync.Controller._id","kha/netsync/Controller.hx",17,0x2b3d2fc0)
HX_LOCAL_STACK_FRAME(_hx_pos_d583c86a58345f5b_21__receive,"kha.netsync.Controller","_receive",0x8568b3d6,"kha.netsync.Controller._receive","kha/netsync/Controller.hx",21,0x2b3d2fc0)
namespace kha{
namespace netsync{

void Controller_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d583c86a58345f5b_11_new)
HXLINE(  12)		this->_hx___id = ::kha::netsync::ControllerBuilder_obj::nextId++;
HXLINE(  13)		this->_hx_set__inputBuffer(HX_CTX, ::haxe::io::Bytes_obj::alloc(1));
            	}

Dynamic Controller_obj::__CreateEmpty() { return new Controller_obj; }

void *Controller_obj::_hx_vtable = 0;

Dynamic Controller_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Controller_obj > _hx_result = new Controller_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Controller_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1d817f74;
}

int Controller_obj::_id(){
            	HX_STACKFRAME(&_hx_pos_d583c86a58345f5b_17__id)
HXDLIN(  17)		return this->_hx___id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controller_obj,_id,return )

void Controller_obj::_receive( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_d583c86a58345f5b_21__receive)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controller_obj,_receive,(void))


::hx::ObjectPtr< Controller_obj > Controller_obj::__new() {
	::hx::ObjectPtr< Controller_obj > __this = new Controller_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Controller_obj > Controller_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Controller_obj *__this = (Controller_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Controller_obj), true, "kha.netsync.Controller"));
	*(void **)__this = Controller_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Controller_obj::Controller_obj()
{
}

void Controller_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controller);
	HX_MARK_MEMBER_NAME(_hx___id,"__id");
	HX_MARK_MEMBER_NAME(_inputBufferIndex,"_inputBufferIndex");
	HX_MARK_MEMBER_NAME(_inputBuffer,"_inputBuffer");
	HX_MARK_END_CLASS();
}

void Controller_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___id,"__id");
	HX_VISIT_MEMBER_NAME(_inputBufferIndex,"_inputBufferIndex");
	HX_VISIT_MEMBER_NAME(_inputBuffer,"_inputBuffer");
}

::hx::Val Controller_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_id") ) { return ::hx::Val( _id_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"__id") ) { return ::hx::Val( _hx___id ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_receive") ) { return ::hx::Val( _receive_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_inputBuffer") ) { return ::hx::Val( _inputBuffer ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_inputBufferIndex") ) { return ::hx::Val( _inputBufferIndex ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Controller_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"__id") ) { _hx___id=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_inputBuffer") ) { _hx_set__inputBuffer(HX_CTX_GET,inValue.Cast<  ::haxe::io::Bytes >()); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_inputBufferIndex") ) { _inputBufferIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Controller_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__id",fb,b6,13,3f));
	outFields->push(HX_("_inputBufferIndex",67,b8,78,66));
	outFields->push(HX_("_inputBuffer",ab,46,d2,2b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Controller_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Controller_obj,_hx___id),HX_("__id",fb,b6,13,3f)},
	{::hx::fsInt,(int)offsetof(Controller_obj,_inputBufferIndex),HX_("_inputBufferIndex",67,b8,78,66)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Controller_obj,_inputBuffer),HX_("_inputBuffer",ab,46,d2,2b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Controller_obj_sStaticStorageInfo = 0;
#endif

static ::String Controller_obj_sMemberFields[] = {
	HX_("__id",fb,b6,13,3f),
	HX_("_inputBufferIndex",67,b8,78,66),
	HX_("_inputBuffer",ab,46,d2,2b),
	HX_("_id",fa,71,48,00),
	HX_("_receive",64,bb,10,64),
	::String(null()) };

::hx::Class Controller_obj::__mClass;

void Controller_obj::__register()
{
	Controller_obj _hx_dummy;
	Controller_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.netsync.Controller",3c,3e,e5,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Controller_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Controller_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controller_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controller_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace netsync

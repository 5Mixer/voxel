// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_netsync_ControllerBuilder
#include <hxinc/kha/netsync/ControllerBuilder.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_08dd9b6c7873e75a_7_boot,"kha.netsync.ControllerBuilder","boot",0x3e322ac1,"kha.netsync.ControllerBuilder.boot","kha/netsync/ControllerBuilder.hx",7,0xeaffa5e1)
namespace kha{
namespace netsync{

void ControllerBuilder_obj::__construct() { }

Dynamic ControllerBuilder_obj::__CreateEmpty() { return new ControllerBuilder_obj; }

void *ControllerBuilder_obj::_hx_vtable = 0;

Dynamic ControllerBuilder_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ControllerBuilder_obj > _hx_result = new ControllerBuilder_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ControllerBuilder_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11a1d2eb;
}

int ControllerBuilder_obj::nextId;


ControllerBuilder_obj::ControllerBuilder_obj()
{
}

bool ControllerBuilder_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { outValue = ( nextId ); return true; }
	}
	return false;
}

bool ControllerBuilder_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { nextId=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ControllerBuilder_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ControllerBuilder_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &ControllerBuilder_obj::nextId,HX_("nextId",ae,27,64,72)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ControllerBuilder_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ControllerBuilder_obj::nextId,"nextId");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ControllerBuilder_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ControllerBuilder_obj::nextId,"nextId");
};

#endif

::hx::Class ControllerBuilder_obj::__mClass;

static ::String ControllerBuilder_obj_sStaticFields[] = {
	HX_("nextId",ae,27,64,72),
	::String(null())
};

void ControllerBuilder_obj::__register()
{
	ControllerBuilder_obj _hx_dummy;
	ControllerBuilder_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.netsync.ControllerBuilder",3f,44,3d,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ControllerBuilder_obj::__GetStatic;
	__mClass->mSetStaticField = &ControllerBuilder_obj::__SetStatic;
	__mClass->mMarkFunc = ControllerBuilder_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ControllerBuilder_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ControllerBuilder_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ControllerBuilder_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ControllerBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ControllerBuilder_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ControllerBuilder_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_08dd9b6c7873e75a_7_boot)
HXDLIN(   7)		nextId = 0;
            	}
}

} // end namespace kha
} // end namespace netsync

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <hxinc/haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <hxinc/haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <hxinc/haxe/io/Error.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_netsync_Client
#include <hxinc/kha/netsync/Client.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
#ifndef INCLUDED_kha_netsync_Entity
#include <hxinc/kha/netsync/Entity.h>
#endif
#ifndef INCLUDED_kha_netsync_LocalClient
#include <hxinc/kha/netsync/LocalClient.h>
#endif
#ifndef INCLUDED_kha_netsync_Network
#include <hxinc/kha/netsync/Network.h>
#endif
#ifndef INCLUDED_kha_netsync_Session
#include <hxinc/kha/netsync/Session.h>
#endif
#ifndef INCLUDED_kha_netsync_SyncBuilder
#include <hxinc/kha/netsync/SyncBuilder.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_acab1baa45b33052_25_new,"kha.netsync.Session","new",0xa4cb61a8,"kha.netsync.Session.new","kha/netsync/Session.hx",25,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_68_get_me,"kha.netsync.Session","get_me",0xeaa06259,"kha.netsync.Session.get_me","kha/netsync/Session.hx",68,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_84_addEntity,"kha.netsync.Session","addEntity",0xef43ff6c,"kha.netsync.Session.addEntity","kha/netsync/Session.hx",84,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_87_addController,"kha.netsync.Session","addController",0x278cdd65,"kha.netsync.Session.addController","kha/netsync/Session.hx",87,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_121_sendControllerUpdate,"kha.netsync.Session","sendControllerUpdate",0xca07e6e5,"kha.netsync.Session.sendControllerUpdate","kha/netsync/Session.hx",121,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_135_sendPing,"kha.netsync.Session","sendPing",0x3352b992,"kha.netsync.Session.sendPing","kha/netsync/Session.hx",135,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_145_sendPlayerUpdate,"kha.netsync.Session","sendPlayerUpdate",0xfcbe0b6a,"kha.netsync.Session.sendPlayerUpdate","kha/netsync/Session.hx",145,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_191_receive,"kha.netsync.Session","receive",0x6546372b,"kha.netsync.Session.receive","kha/netsync/Session.hx",191,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_267_executeRPC,"kha.netsync.Session","executeRPC",0xcab8ab68,"kha.netsync.Session.executeRPC","kha/netsync/Session.hx",267,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_384_waitForStart,"kha.netsync.Session","waitForStart",0x073315e6,"kha.netsync.Session.waitForStart","kha/netsync/Session.hx",384,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_389_waitForStart,"kha.netsync.Session","waitForStart",0x073315e6,"kha.netsync.Session.waitForStart","kha/netsync/Session.hx",389,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_329_waitForStart,"kha.netsync.Session","waitForStart",0x073315e6,"kha.netsync.Session.waitForStart","kha/netsync/Session.hx",329,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_397_reset,"kha.netsync.Session","reset",0x453cbd17,"kha.netsync.Session.reset","kha/netsync/Session.hx",397,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_417_update,"kha.netsync.Session","update",0xce75f1c1,"kha.netsync.Session.update","kha/netsync/Session.hx",417,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_446_sendToServer,"kha.netsync.Session","sendToServer",0xadb2c9be,"kha.netsync.Session.sendToServer","kha/netsync/Session.hx",446,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_80_the,"kha.netsync.Session","the",0xa4cff1b9,"kha.netsync.Session.the","kha/netsync/Session.hx",80,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_26_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",26,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_27_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",27,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_28_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",28,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_29_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",29,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_30_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",30,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_31_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",31,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_32_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",32,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_34_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",34,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_35_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",35,0x655e0a4a)
HX_LOCAL_STACK_FRAME(_hx_pos_acab1baa45b33052_37_boot,"kha.netsync.Session","boot",0x854311ea,"kha.netsync.Session.boot","kha/netsync/Session.hx",37,0x655e0a4a)
namespace kha{
namespace netsync{

void Session_obj::__construct(int maxPlayers,::String address,int port){
            	HX_GC_STACKFRAME(&_hx_pos_acab1baa45b33052_25_new)
HXLINE(  42)		this->ping = ((Float)1);
HXLINE(  41)		this->currentPlayers = 0;
HXLINE(  39)		this->_hx_set_controllers(HX_CTX,  ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
HXLINE(  38)		this->_hx_set_entities(HX_CTX,  ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
HXLINE(  73)		::kha::netsync::Session_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  74)		this->maxPlayers = maxPlayers;
HXLINE(  75)		this->_hx_set_address(HX_CTX, address);
HXLINE(  76)		this->port = port;
            	}

Dynamic Session_obj::__CreateEmpty() { return new Session_obj; }

void *Session_obj::_hx_vtable = 0;

Dynamic Session_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Session_obj > _hx_result = new Session_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Session_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7b776d62;
}

::Dynamic Session_obj::get_me(){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_68_get_me)
HXDLIN(  68)		return this->localClient;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,get_me,return )

void Session_obj::addEntity(::Dynamic entity){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_84_addEntity)
HXDLIN(  84)		::Dynamic this1 = this->entities;
HXDLIN(  84)		( ( ::haxe::ds::IntMap)(this1) )->set(::kha::netsync::Entity_obj::_id(entity),entity);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,addEntity,(void))

void Session_obj::addController( ::kha::netsync::Controller controller){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_87_addController)
HXLINE(  88)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  88)		::String _hx_tmp1 = (HX_("Adding controller id ",20,e6,6a,34) + controller->_id());
HXDLIN(  88)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("kha/netsync/Session.hx",4a,0a,5e,65),88,HX_("kha.netsync.Session",b6,ad,47,b9),HX_("addController",1d,e2,07,6f)));
HXLINE(  89)		controller->_inputBufferIndex = 0;
HXLINE(  90)		{
HXLINE(  90)			::Dynamic this1 = this->controllers;
HXDLIN(  90)			( ( ::haxe::ds::IntMap)(this1) )->set(controller->_id(),controller);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,addController,(void))

void Session_obj::sendControllerUpdate(int id, ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_acab1baa45b33052_121_sendControllerUpdate)
HXDLIN( 121)		if (this->controllers->exists(id)) {
HXLINE( 122)			int _hx_tmp = ( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBuffer->length;
HXDLIN( 122)			int _hx_tmp1 = (( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBufferIndex + 4);
HXDLIN( 122)			if ((_hx_tmp < (_hx_tmp1 + bytes->length))) {
HXLINE( 123)				int newBuffer = (( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBufferIndex + 4);
HXDLIN( 123)				 ::haxe::io::Bytes newBuffer1 = ::haxe::io::Bytes_obj::alloc((newBuffer + bytes->length));
HXLINE( 124)				 ::haxe::io::Bytes _hx_tmp = ( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBuffer;
HXDLIN( 124)				newBuffer1->blit(0,_hx_tmp,0,( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBufferIndex);
HXLINE( 125)				( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_hx_set__inputBuffer(HX_CTX, newBuffer1);
            			}
HXLINE( 128)			{
HXLINE( 128)				 ::haxe::io::Bytes _this = ( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBuffer;
HXDLIN( 128)				int pos = ( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBufferIndex;
HXDLIN( 128)				int v = bytes->length;
HXDLIN( 128)				_this->b[pos] = ( (unsigned char)(v) );
HXDLIN( 128)				_this->b[(pos + 1)] = ( (unsigned char)((v >> 8)) );
HXDLIN( 128)				_this->b[(pos + 2)] = ( (unsigned char)((v >> 16)) );
HXDLIN( 128)				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(v,24)) );
            			}
HXLINE( 129)			 ::haxe::io::Bytes _hx_tmp2 = ( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBuffer;
HXDLIN( 129)			int _hx_tmp3 = (( ( ::kha::netsync::Controller)(this->controllers->get(id)) )->_inputBufferIndex + 4);
HXDLIN( 129)			_hx_tmp2->blit(_hx_tmp3,bytes,0,bytes->length);
HXLINE( 130)			 ::kha::netsync::Controller _hx_tmp4 = ( ( ::kha::netsync::Controller)(this->controllers->get(id)) );
HXDLIN( 130)			_hx_tmp4->_inputBufferIndex = (_hx_tmp4->_inputBufferIndex + (4 + bytes->length));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Session_obj,sendControllerUpdate,(void))

void Session_obj::sendPing(){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_135_sendPing)
HXLINE( 137)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(5);
HXLINE( 138)		bytes->b[0] = ( (unsigned char)(4) );
HXLINE( 139)		bytes->setFloat(1,::kha::Scheduler_obj::realTime());
HXLINE( 141)		this->sendToServer(bytes);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,sendPing,(void))

void Session_obj::sendPlayerUpdate(){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_145_sendPlayerUpdate)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,sendPlayerUpdate,(void))

void Session_obj::receive( ::haxe::io::Bytes bytes,::Dynamic client){
            	HX_GC_STACKFRAME(&_hx_pos_acab1baa45b33052_191_receive)
HXDLIN( 191)		switch((int)(( (int)(bytes->b->__get(0)) ))){
            			case (int)0: {
HXLINE( 193)				int index = ( (int)(bytes->b->__get(1)) );
HXLINE( 194)				this->_hx_set_localClient(HX_CTX,  ::kha::netsync::LocalClient_obj::__alloc( HX_CTX ,index));
HXLINE( 195)				::kha::Scheduler_obj::resetTime();
HXLINE( 196)				this->startCallback();
            			}
            			break;
            			case (int)1: {
HXLINE( 198)				if ((9 > bytes->length)) {
HXLINE( 198)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN( 198)				Float time =  ::__hxcpp_memory_get_double(bytes->b,1);
HXLINE( 199)				int offset = 9;
HXLINE( 200)				{
HXLINE( 200)					 ::Dynamic entity = this->entities->iterator();
HXDLIN( 200)					while(( (bool)(entity->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 200)						::Dynamic entity1 = entity->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE( 201)						::kha::netsync::Entity_obj::_receive(entity1,offset,bytes);
HXLINE( 202)						offset = (offset + ::kha::netsync::Entity_obj::_size(entity1));
            					}
            				}
HXLINE( 204)				::kha::Scheduler_obj::warp(time);
            			}
            			break;
            			case (int)3: {
HXLINE( 206)				switch((int)(( (int)(bytes->b->__get(1)) ))){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE( 210)						this->executeRPC(bytes);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 213)				if ((5 > bytes->length)) {
HXLINE( 213)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            				}
HXDLIN( 213)				Float sendTime =  ::__hxcpp_memory_get_float(bytes->b,1);
HXLINE( 214)				this->ping = (::kha::Scheduler_obj::realTime() - sendTime);
            			}
            			break;
            			case (int)5: {
HXLINE( 216)				this->refusedCallback();
            			}
            			break;
            			case (int)6: {
HXLINE( 218)				this->currentPlayers = (((( (int)(bytes->b->__get(1)) ) | (( (int)(bytes->b->__get(2)) ) << 8)) | (( (int)(bytes->b->__get(3)) ) << 16)) | (( (int)(bytes->b->__get(4)) ) << 24));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Session_obj,receive,(void))

void Session_obj::executeRPC( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_267_executeRPC)
HXLINE( 268)		::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 269)		int syncId = (((( (int)(bytes->b->__get(2)) ) | (( (int)(bytes->b->__get(3)) ) << 8)) | (( (int)(bytes->b->__get(4)) ) << 16)) | (( (int)(bytes->b->__get(5)) ) << 24));
HXLINE( 270)		int index = 6;
HXLINE( 272)		int classnamelength = (( (int)(bytes->b->__get(index)) ) | (( (int)(bytes->b->__get((index + 1))) ) << 8));
HXLINE( 273)		index = (index + 2);
HXLINE( 274)		::String classname = HX_("",00,00,00,00);
HXLINE( 275)		{
HXLINE( 275)			int _g = 0;
HXDLIN( 275)			int _g1 = classnamelength;
HXDLIN( 275)			while((_g < _g1)){
HXLINE( 275)				_g = (_g + 1);
HXDLIN( 275)				int i = (_g - 1);
HXLINE( 276)				classname = (classname + ::String::fromCharCode(( (int)(bytes->b->__get(index)) )));
HXLINE( 277)				index = (index + 1);
            			}
            		}
HXLINE( 280)		int methodnamelength = (( (int)(bytes->b->__get(index)) ) | (( (int)(bytes->b->__get((index + 1))) ) << 8));
HXLINE( 281)		index = (index + 2);
HXLINE( 282)		::String methodname = HX_("",00,00,00,00);
HXLINE( 283)		{
HXLINE( 283)			int _g2 = 0;
HXDLIN( 283)			int _g3 = methodnamelength;
HXDLIN( 283)			while((_g2 < _g3)){
HXLINE( 283)				_g2 = (_g2 + 1);
HXDLIN( 283)				int i = (_g2 - 1);
HXLINE( 284)				methodname = (methodname + ::String::fromCharCode(( (int)(bytes->b->__get(index)) )));
HXLINE( 285)				index = (index + 1);
            			}
            		}
HXLINE( 288)		while((index < bytes->length)){
HXLINE( 289)			int type = ( (int)(bytes->b->__get(index)) );
HXLINE( 290)			index = (index + 1);
HXLINE( 291)			switch((int)(type)){
            				case (int)66: {
HXLINE( 293)					bool value = (bytes->b->__get(index) == 1);
HXLINE( 294)					index = (index + 1);
HXLINE( 295)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 295)					::String _hx_tmp1 = (HX_("Bool: ",70,09,b9,96) + ::Std_obj::string(value));
HXDLIN( 295)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("kha/netsync/Session.hx",4a,0a,5e,65),295,HX_("kha.netsync.Session",b6,ad,47,b9),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 296)					args->push(value);
            				}
            				break;
            				case (int)70: {
HXLINE( 298)					bool _hx_tmp;
HXDLIN( 298)					if ((index >= 0)) {
HXLINE( 298)						_hx_tmp = ((index + 8) > bytes->length);
            					}
            					else {
HXLINE( 298)						_hx_tmp = true;
            					}
HXDLIN( 298)					if (_hx_tmp) {
HXLINE( 298)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
            					}
HXDLIN( 298)					Float value =  ::__hxcpp_memory_get_double(bytes->b,index);
HXLINE( 299)					index = (index + 8);
HXLINE( 300)					::haxe::Log_obj::trace((HX_("Float: ",22,bf,59,b7) + value),::hx::SourceInfo(HX_("kha/netsync/Session.hx",4a,0a,5e,65),300,HX_("kha.netsync.Session",b6,ad,47,b9),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 301)					args->push(value);
            				}
            				break;
            				case (int)73: {
HXLINE( 303)					int value = (((( (int)(bytes->b->__get(index)) ) | (( (int)(bytes->b->__get((index + 1))) ) << 8)) | (( (int)(bytes->b->__get((index + 2))) ) << 16)) | (( (int)(bytes->b->__get((index + 3))) ) << 24));
HXLINE( 304)					index = (index + 4);
HXLINE( 305)					::haxe::Log_obj::trace((HX_("Int: ",35,09,4e,51) + value),::hx::SourceInfo(HX_("kha/netsync/Session.hx",4a,0a,5e,65),305,HX_("kha.netsync.Session",b6,ad,47,b9),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 306)					args->push(value);
            				}
            				break;
            				case (int)83: {
HXLINE( 308)					int length = (( (int)(bytes->b->__get(index)) ) | (( (int)(bytes->b->__get((index + 1))) ) << 8));
HXLINE( 309)					index = (index + 2);
HXLINE( 310)					::String str = HX_("",00,00,00,00);
HXLINE( 311)					{
HXLINE( 311)						int _g = 0;
HXDLIN( 311)						int _g1 = length;
HXDLIN( 311)						while((_g < _g1)){
HXLINE( 311)							_g = (_g + 1);
HXDLIN( 311)							int i = (_g - 1);
HXLINE( 312)							str = (str + ::String::fromCharCode(( (int)(bytes->b->__get(index)) )));
HXLINE( 313)							index = (index + 1);
            						}
            					}
HXLINE( 315)					::haxe::Log_obj::trace((HX_("String: ",d7,ad,da,b5) + str),::hx::SourceInfo(HX_("kha/netsync/Session.hx",4a,0a,5e,65),315,HX_("kha.netsync.Session",b6,ad,47,b9),HX_("executeRPC",b0,03,7c,39)));
HXLINE( 316)					args->push(str);
            				}
            				break;
            				default:{
HXLINE( 318)					::haxe::Log_obj::trace(HX_("Unknown argument type.",47,fa,c6,a3),::hx::SourceInfo(HX_("kha/netsync/Session.hx",4a,0a,5e,65),318,HX_("kha.netsync.Session",b6,ad,47,b9),HX_("executeRPC",b0,03,7c,39)));
            				}
            			}
            		}
HXLINE( 321)		if ((syncId == -1)) {
HXLINE( 322)			::Reflect_obj::callMethod(null(),::Reflect_obj::field(::Type_obj::resolveClass(classname),(methodname + HX_("_remotely",f2,1d,5f,f3))),args);
            		}
            		else {
HXLINE( 325)			 ::Dynamic _hx_tmp = ::kha::netsync::SyncBuilder_obj::objects->__get(syncId);
HXDLIN( 325)			::Reflect_obj::callMethod(_hx_tmp,::Reflect_obj::field(::kha::netsync::SyncBuilder_obj::objects->__get(syncId),(methodname + HX_("_remotely",f2,1d,5f,f3))),args);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,executeRPC,(void))

void Session_obj::waitForStart( ::Dynamic callback, ::Dynamic refuseCallback, ::Dynamic errorCallback, ::Dynamic closeCallback, ::Dynamic resCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::kha::netsync::Session,_gthis, ::Dynamic,closeCallback) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_acab1baa45b33052_384_waitForStart)
HXLINE( 385)			closeCallback();
HXLINE( 386)			_gthis->reset();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::kha::netsync::Session,_gthis) HXARGC(1)
            		void _hx_run( ::haxe::io::Bytes bytes){
            			HX_GC_STACKFRAME(&_hx_pos_acab1baa45b33052_389_waitForStart)
HXLINE( 389)			_gthis->receive(bytes,null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_acab1baa45b33052_329_waitForStart)
HXDLIN( 329)		 ::kha::netsync::Session _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 330)		this->_hx_set_startCallback(HX_CTX, callback);
HXLINE( 331)		this->_hx_set_refusedCallback(HX_CTX, refuseCallback);
HXLINE( 332)		this->_hx_set_resetCallback(HX_CTX, resCallback);
HXLINE( 384)		this->_hx_set_network(HX_CTX,  ::kha::netsync::Network_obj::__alloc( HX_CTX ,this->address,this->port,errorCallback, ::Dynamic(new _hx_Closure_0(_gthis,closeCallback))));
HXLINE( 388)		this->network->listen( ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 391)		this->updateTaskId = ::kha::Scheduler_obj::addFrameTask(this->update_dyn(),0);
HXLINE( 392)		this->ping = ( (Float)(1) );
HXLINE( 393)		this->pingTaskId = ::kha::Scheduler_obj::addTimeTask(this->sendPing_dyn(),( (Float)(0) ),1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(Session_obj,waitForStart,(void))

void Session_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_acab1baa45b33052_397_reset)
HXLINE( 402)		::kha::Scheduler_obj::removeFrameTask(this->updateTaskId);
HXLINE( 403)		::kha::Scheduler_obj::removeTimeTask(this->pingTaskId);
HXLINE( 405)		this->currentPlayers = 0;
HXLINE( 406)		this->ping = ( (Float)(1) );
HXLINE( 407)		this->_hx_set_controllers(HX_CTX,  ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
HXLINE( 408)		this->_hx_set_entities(HX_CTX,  ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
HXLINE( 409)		this->resetCallback();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,reset,(void))

void Session_obj::update(){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_417_update)
HXDLIN( 417)		 ::Dynamic controller = this->controllers->iterator();
HXDLIN( 417)		while(( (bool)(controller->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 417)			 ::kha::netsync::Controller controller1 = ( ( ::kha::netsync::Controller)(controller->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 418)			if ((controller1->_inputBufferIndex > 0)) {
HXLINE( 419)				 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((22 + controller1->_inputBufferIndex));
HXLINE( 420)				bytes->b[0] = ( (unsigned char)(2) );
HXLINE( 421)				{
HXLINE( 421)					int v = controller1->_id();
HXDLIN( 421)					bytes->b[1] = ( (unsigned char)(v) );
HXDLIN( 421)					bytes->b[2] = ( (unsigned char)((v >> 8)) );
HXDLIN( 421)					bytes->b[3] = ( (unsigned char)((v >> 16)) );
HXDLIN( 421)					bytes->b[4] = ( (unsigned char)(::hx::UShr(v,24)) );
            				}
HXLINE( 422)				bytes->setDouble(5,::kha::Scheduler_obj::time());
HXLINE( 423)				{
HXLINE( 423)					int v1 = ::kha::System_obj::windowWidth(0);
HXDLIN( 423)					bytes->b[13] = ( (unsigned char)(v1) );
HXDLIN( 423)					bytes->b[14] = ( (unsigned char)((v1 >> 8)) );
HXDLIN( 423)					bytes->b[15] = ( (unsigned char)((v1 >> 16)) );
HXDLIN( 423)					bytes->b[16] = ( (unsigned char)(::hx::UShr(v1,24)) );
            				}
HXLINE( 424)				{
HXLINE( 424)					int v2 = ::kha::System_obj::windowHeight(0);
HXDLIN( 424)					bytes->b[17] = ( (unsigned char)(v2) );
HXDLIN( 424)					bytes->b[18] = ( (unsigned char)((v2 >> 8)) );
HXDLIN( 424)					bytes->b[19] = ( (unsigned char)((v2 >> 16)) );
HXDLIN( 424)					bytes->b[20] = ( (unsigned char)(::hx::UShr(v2,24)) );
            				}
HXLINE( 425)				bytes->b[21] = ( (unsigned char)(0) );
HXLINE( 427)				bytes->blit(22,controller1->_inputBuffer,0,controller1->_inputBufferIndex);
HXLINE( 429)				this->sendToServer(bytes);
HXLINE( 430)				controller1->_inputBufferIndex = 0;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,update,(void))

void Session_obj::sendToServer( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_446_sendToServer)
HXDLIN( 446)		this->network->send(bytes,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Session_obj,sendToServer,(void))

int Session_obj::START;

int Session_obj::ENTITY_UPDATES;

int Session_obj::CONTROLLER_UPDATES;

int Session_obj::REMOTE_CALL;

int Session_obj::PING;

int Session_obj::SESSION_ERROR;

int Session_obj::PLAYER_UPDATES;

int Session_obj::RPC_SERVER;

int Session_obj::RPC_ALL;

 ::kha::netsync::Session Session_obj::instance;

 ::kha::netsync::Session Session_obj::the(){
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_80_the)
HXDLIN(  80)		return ::kha::netsync::Session_obj::instance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Session_obj,the,return )


::hx::ObjectPtr< Session_obj > Session_obj::__new(int maxPlayers,::String address,int port) {
	::hx::ObjectPtr< Session_obj > __this = new Session_obj();
	__this->__construct(maxPlayers,address,port);
	return __this;
}

::hx::ObjectPtr< Session_obj > Session_obj::__alloc(::hx::Ctx *_hx_ctx,int maxPlayers,::String address,int port) {
	Session_obj *__this = (Session_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Session_obj), true, "kha.netsync.Session"));
	*(void **)__this = Session_obj::_hx_vtable;
	__this->__construct(maxPlayers,address,port);
	return __this;
}

Session_obj::Session_obj()
{
}

void Session_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Session);
	HX_MARK_MEMBER_NAME(entities,"entities");
	HX_MARK_MEMBER_NAME(controllers,"controllers");
	HX_MARK_MEMBER_NAME(maxPlayers,"maxPlayers");
	HX_MARK_MEMBER_NAME(currentPlayers,"currentPlayers");
	HX_MARK_MEMBER_NAME(ping,"ping");
	HX_MARK_MEMBER_NAME(address,"address");
	HX_MARK_MEMBER_NAME(port,"port");
	HX_MARK_MEMBER_NAME(startCallback,"startCallback");
	HX_MARK_MEMBER_NAME(refusedCallback,"refusedCallback");
	HX_MARK_MEMBER_NAME(resetCallback,"resetCallback");
	HX_MARK_MEMBER_NAME(localClient,"localClient");
	HX_MARK_MEMBER_NAME(network,"network");
	HX_MARK_MEMBER_NAME(updateTaskId,"updateTaskId");
	HX_MARK_MEMBER_NAME(pingTaskId,"pingTaskId");
	HX_MARK_MEMBER_NAME(me,"me");
	HX_MARK_END_CLASS();
}

void Session_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(entities,"entities");
	HX_VISIT_MEMBER_NAME(controllers,"controllers");
	HX_VISIT_MEMBER_NAME(maxPlayers,"maxPlayers");
	HX_VISIT_MEMBER_NAME(currentPlayers,"currentPlayers");
	HX_VISIT_MEMBER_NAME(ping,"ping");
	HX_VISIT_MEMBER_NAME(address,"address");
	HX_VISIT_MEMBER_NAME(port,"port");
	HX_VISIT_MEMBER_NAME(startCallback,"startCallback");
	HX_VISIT_MEMBER_NAME(refusedCallback,"refusedCallback");
	HX_VISIT_MEMBER_NAME(resetCallback,"resetCallback");
	HX_VISIT_MEMBER_NAME(localClient,"localClient");
	HX_VISIT_MEMBER_NAME(network,"network");
	HX_VISIT_MEMBER_NAME(updateTaskId,"updateTaskId");
	HX_VISIT_MEMBER_NAME(pingTaskId,"pingTaskId");
	HX_VISIT_MEMBER_NAME(me,"me");
}

::hx::Val Session_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"me") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_me() : me ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ping") ) { return ::hx::Val( ping ); }
		if (HX_FIELD_EQ(inName,"port") ) { return ::hx::Val( port ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_me") ) { return ::hx::Val( get_me_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"address") ) { return ::hx::Val( address ); }
		if (HX_FIELD_EQ(inName,"network") ) { return ::hx::Val( network ); }
		if (HX_FIELD_EQ(inName,"receive") ) { return ::hx::Val( receive_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { return ::hx::Val( entities ); }
		if (HX_FIELD_EQ(inName,"sendPing") ) { return ::hx::Val( sendPing_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addEntity") ) { return ::hx::Val( addEntity_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxPlayers") ) { return ::hx::Val( maxPlayers ); }
		if (HX_FIELD_EQ(inName,"pingTaskId") ) { return ::hx::Val( pingTaskId ); }
		if (HX_FIELD_EQ(inName,"executeRPC") ) { return ::hx::Val( executeRPC_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"controllers") ) { return ::hx::Val( controllers ); }
		if (HX_FIELD_EQ(inName,"localClient") ) { return ::hx::Val( localClient ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateTaskId") ) { return ::hx::Val( updateTaskId ); }
		if (HX_FIELD_EQ(inName,"waitForStart") ) { return ::hx::Val( waitForStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToServer") ) { return ::hx::Val( sendToServer_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startCallback") ) { return ::hx::Val( startCallback ); }
		if (HX_FIELD_EQ(inName,"resetCallback") ) { return ::hx::Val( resetCallback ); }
		if (HX_FIELD_EQ(inName,"addController") ) { return ::hx::Val( addController_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentPlayers") ) { return ::hx::Val( currentPlayers ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"refusedCallback") ) { return ::hx::Val( refusedCallback ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sendPlayerUpdate") ) { return ::hx::Val( sendPlayerUpdate_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sendControllerUpdate") ) { return ::hx::Val( sendControllerUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Session_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"the") ) { outValue = the_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
	}
	return false;
}

::hx::Val Session_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"me") ) { _hx_set_me(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ping") ) { ping=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"port") ) { port=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"address") ) { _hx_set_address(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"network") ) { _hx_set_network(HX_CTX_GET,inValue.Cast<  ::kha::netsync::Network >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"entities") ) { _hx_set_entities(HX_CTX_GET,inValue.Cast<  ::haxe::ds::IntMap >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxPlayers") ) { maxPlayers=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pingTaskId") ) { pingTaskId=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"controllers") ) { _hx_set_controllers(HX_CTX_GET,inValue.Cast<  ::haxe::ds::IntMap >()); return inValue; }
		if (HX_FIELD_EQ(inName,"localClient") ) { _hx_set_localClient(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateTaskId") ) { updateTaskId=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startCallback") ) { _hx_set_startCallback(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"resetCallback") ) { _hx_set_resetCallback(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentPlayers") ) { currentPlayers=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"refusedCallback") ) { _hx_set_refusedCallback(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Session_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::kha::netsync::Session >(); return true; }
	}
	return false;
}

void Session_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("entities",41,96,95,92));
	outFields->push(HX_("controllers",57,f0,06,22));
	outFields->push(HX_("maxPlayers",ae,83,39,f4));
	outFields->push(HX_("currentPlayers",b9,7e,a9,97));
	outFields->push(HX_("ping",72,f2,57,4a));
	outFields->push(HX_("address",b4,71,0b,9d));
	outFields->push(HX_("port",81,83,5c,4a));
	outFields->push(HX_("localClient",16,6a,8a,c7));
	outFields->push(HX_("network",ae,c4,bc,59));
	outFields->push(HX_("updateTaskId",69,c1,5c,87));
	outFields->push(HX_("pingTaskId",92,e2,95,b0));
	outFields->push(HX_("me",58,5f,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Session_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Session_obj,entities),HX_("entities",41,96,95,92)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Session_obj,controllers),HX_("controllers",57,f0,06,22)},
	{::hx::fsInt,(int)offsetof(Session_obj,maxPlayers),HX_("maxPlayers",ae,83,39,f4)},
	{::hx::fsInt,(int)offsetof(Session_obj,currentPlayers),HX_("currentPlayers",b9,7e,a9,97)},
	{::hx::fsFloat,(int)offsetof(Session_obj,ping),HX_("ping",72,f2,57,4a)},
	{::hx::fsString,(int)offsetof(Session_obj,address),HX_("address",b4,71,0b,9d)},
	{::hx::fsInt,(int)offsetof(Session_obj,port),HX_("port",81,83,5c,4a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Session_obj,startCallback),HX_("startCallback",47,fc,c1,83)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Session_obj,refusedCallback),HX_("refusedCallback",f5,f6,ee,7d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Session_obj,resetCallback),HX_("resetCallback",b4,86,a5,af)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(Session_obj,localClient),HX_("localClient",16,6a,8a,c7)},
	{::hx::fsObject /*  ::kha::netsync::Network */ ,(int)offsetof(Session_obj,network),HX_("network",ae,c4,bc,59)},
	{::hx::fsInt,(int)offsetof(Session_obj,updateTaskId),HX_("updateTaskId",69,c1,5c,87)},
	{::hx::fsInt,(int)offsetof(Session_obj,pingTaskId),HX_("pingTaskId",92,e2,95,b0)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(Session_obj,me),HX_("me",58,5f,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Session_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Session_obj::START,HX_("START",42,ac,f9,01)},
	{::hx::fsInt,(void *) &Session_obj::ENTITY_UPDATES,HX_("ENTITY_UPDATES",ce,09,53,d1)},
	{::hx::fsInt,(void *) &Session_obj::CONTROLLER_UPDATES,HX_("CONTROLLER_UPDATES",47,f8,2b,32)},
	{::hx::fsInt,(void *) &Session_obj::REMOTE_CALL,HX_("REMOTE_CALL",37,50,b5,4f)},
	{::hx::fsInt,(void *) &Session_obj::PING,HX_("PING",72,ba,18,35)},
	{::hx::fsInt,(void *) &Session_obj::SESSION_ERROR,HX_("SESSION_ERROR",9f,82,34,dc)},
	{::hx::fsInt,(void *) &Session_obj::PLAYER_UPDATES,HX_("PLAYER_UPDATES",0c,50,ff,c6)},
	{::hx::fsInt,(void *) &Session_obj::RPC_SERVER,HX_("RPC_SERVER",3d,1c,b0,0a)},
	{::hx::fsInt,(void *) &Session_obj::RPC_ALL,HX_("RPC_ALL",47,9f,42,21)},
	{::hx::fsObject /*  ::kha::netsync::Session */ ,(void *) &Session_obj::instance,HX_("instance",95,1f,e1,59)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Session_obj_sMemberFields[] = {
	HX_("entities",41,96,95,92),
	HX_("controllers",57,f0,06,22),
	HX_("maxPlayers",ae,83,39,f4),
	HX_("currentPlayers",b9,7e,a9,97),
	HX_("ping",72,f2,57,4a),
	HX_("address",b4,71,0b,9d),
	HX_("port",81,83,5c,4a),
	HX_("startCallback",47,fc,c1,83),
	HX_("refusedCallback",f5,f6,ee,7d),
	HX_("resetCallback",b4,86,a5,af),
	HX_("localClient",16,6a,8a,c7),
	HX_("network",ae,c4,bc,59),
	HX_("updateTaskId",69,c1,5c,87),
	HX_("pingTaskId",92,e2,95,b0),
	HX_("me",58,5f,00,00),
	HX_("get_me",a1,f6,2f,a3),
	HX_("addEntity",24,48,40,bd),
	HX_("addController",1d,e2,07,6f),
	HX_("sendControllerUpdate",2d,69,f7,1d),
	HX_("sendPing",da,ef,25,de),
	HX_("sendPlayerUpdate",b2,c9,9c,72),
	HX_("receive",e3,61,58,2a),
	HX_("executeRPC",b0,03,7c,39),
	HX_("waitForStart",2e,10,b3,2f),
	HX_("reset",cf,49,c8,e6),
	HX_("update",09,86,05,87),
	HX_("sendToServer",06,c4,32,d6),
	::String(null()) };

static void Session_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Session_obj::START,"START");
	HX_MARK_MEMBER_NAME(Session_obj::ENTITY_UPDATES,"ENTITY_UPDATES");
	HX_MARK_MEMBER_NAME(Session_obj::CONTROLLER_UPDATES,"CONTROLLER_UPDATES");
	HX_MARK_MEMBER_NAME(Session_obj::REMOTE_CALL,"REMOTE_CALL");
	HX_MARK_MEMBER_NAME(Session_obj::PING,"PING");
	HX_MARK_MEMBER_NAME(Session_obj::SESSION_ERROR,"SESSION_ERROR");
	HX_MARK_MEMBER_NAME(Session_obj::PLAYER_UPDATES,"PLAYER_UPDATES");
	HX_MARK_MEMBER_NAME(Session_obj::RPC_SERVER,"RPC_SERVER");
	HX_MARK_MEMBER_NAME(Session_obj::RPC_ALL,"RPC_ALL");
	HX_MARK_MEMBER_NAME(Session_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Session_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Session_obj::START,"START");
	HX_VISIT_MEMBER_NAME(Session_obj::ENTITY_UPDATES,"ENTITY_UPDATES");
	HX_VISIT_MEMBER_NAME(Session_obj::CONTROLLER_UPDATES,"CONTROLLER_UPDATES");
	HX_VISIT_MEMBER_NAME(Session_obj::REMOTE_CALL,"REMOTE_CALL");
	HX_VISIT_MEMBER_NAME(Session_obj::PING,"PING");
	HX_VISIT_MEMBER_NAME(Session_obj::SESSION_ERROR,"SESSION_ERROR");
	HX_VISIT_MEMBER_NAME(Session_obj::PLAYER_UPDATES,"PLAYER_UPDATES");
	HX_VISIT_MEMBER_NAME(Session_obj::RPC_SERVER,"RPC_SERVER");
	HX_VISIT_MEMBER_NAME(Session_obj::RPC_ALL,"RPC_ALL");
	HX_VISIT_MEMBER_NAME(Session_obj::instance,"instance");
};

#endif

::hx::Class Session_obj::__mClass;

static ::String Session_obj_sStaticFields[] = {
	HX_("START",42,ac,f9,01),
	HX_("ENTITY_UPDATES",ce,09,53,d1),
	HX_("CONTROLLER_UPDATES",47,f8,2b,32),
	HX_("REMOTE_CALL",37,50,b5,4f),
	HX_("PING",72,ba,18,35),
	HX_("SESSION_ERROR",9f,82,34,dc),
	HX_("PLAYER_UPDATES",0c,50,ff,c6),
	HX_("RPC_SERVER",3d,1c,b0,0a),
	HX_("RPC_ALL",47,9f,42,21),
	HX_("instance",95,1f,e1,59),
	HX_("the",71,60,58,00),
	::String(null())
};

void Session_obj::__register()
{
	Session_obj _hx_dummy;
	Session_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.netsync.Session",b6,ad,47,b9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Session_obj::__GetStatic;
	__mClass->mSetStaticField = &Session_obj::__SetStatic;
	__mClass->mMarkFunc = Session_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Session_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Session_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Session_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Session_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Session_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Session_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Session_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_26_boot)
HXDLIN(  26)		START = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_27_boot)
HXDLIN(  27)		ENTITY_UPDATES = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_28_boot)
HXDLIN(  28)		CONTROLLER_UPDATES = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_29_boot)
HXDLIN(  29)		REMOTE_CALL = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_30_boot)
HXDLIN(  30)		PING = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_31_boot)
HXDLIN(  31)		SESSION_ERROR = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_32_boot)
HXDLIN(  32)		PLAYER_UPDATES = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_34_boot)
HXDLIN(  34)		RPC_SERVER = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_35_boot)
HXDLIN(  35)		RPC_ALL = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_acab1baa45b33052_37_boot)
HXDLIN(  37)		instance = null();
            	}
}

} // end namespace kha
} // end namespace netsync

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <hxinc/haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_netsync_Network
#include <hxinc/kha/netsync/Network.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e4808080a977b708_21_new,"kha.netsync.Network","new",0x4a8d9b00,"kha.netsync.Network.new","kha/netsync/Network.hx",21,0xa1ce43f2)
HX_LOCAL_STACK_FRAME(_hx_pos_e4808080a977b708_36_init,"kha.netsync.Network","init",0xee12bc70,"kha.netsync.Network.init","kha/netsync/Network.hx",36,0xa1ce43f2)
HX_LOCAL_STACK_FRAME(_hx_pos_e4808080a977b708_43_send,"kha.netsync.Network","send",0xf4a80ea8,"kha.netsync.Network.send","kha/netsync/Network.hx",43,0xa1ce43f2)
HX_LOCAL_STACK_FRAME(_hx_pos_e4808080a977b708_48_listen,"kha.netsync.Network","listen",0xfe3c61a7,"kha.netsync.Network.listen","kha/netsync/Network.hx",48,0xa1ce43f2)
HX_LOCAL_STACK_FRAME(_hx_pos_e4808080a977b708_51_update,"kha.netsync.Network","update",0x95481f69,"kha.netsync.Network.update","kha/netsync/Network.hx",51,0xa1ce43f2)
HX_LOCAL_STACK_FRAME(_hx_pos_e4808080a977b708_78_getBytesFromSocket,"kha.netsync.Network","getBytesFromSocket",0x2b5d3a72,"kha.netsync.Network.getBytesFromSocket","kha/netsync/Network.hx",78,0xa1ce43f2)
namespace kha{
namespace netsync{

void Network_obj::__construct(::String url,int port, ::Dynamic errorCallback, ::Dynamic closeCallback){
            	HX_GC_STACKFRAME(&_hx_pos_e4808080a977b708_21_new)
HXLINE(  22)		this->_hx_set_url(HX_CTX, url);
HXLINE(  23)		this->port = (port + 1);
HXLINE(  24)		this->bufferPos = 0;
HXLINE(  25)		this->_hx_set_buffer(HX_CTX, ::haxe::io::Bytes_obj::alloc(256));
HXLINE(  26)		this->_hx_set_tempBuffer(HX_CTX, ::haxe::io::Bytes_obj::alloc(256));
HXLINE(  27)		this->init(url,port);
HXLINE(  28)		::kha::Scheduler_obj::addFrameTask(this->update_dyn(),0);
            	}

Dynamic Network_obj::__CreateEmpty() { return new Network_obj; }

void *Network_obj::_hx_vtable = 0;

Dynamic Network_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Network_obj > _hx_result = new Network_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Network_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x419c1aba;
}

void Network_obj::init(::String url,int port){
            	HX_STACKFRAME(&_hx_pos_e4808080a977b708_36_init)
            	
		socket = new Kore::Socket();
		socket->open(port);
	

HXDLIN(  36)		this->send(::haxe::io::Bytes_obj::ofString(HX_("JOIN",ea,fb,25,31),null()),true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Network_obj,init,(void))

void Network_obj::send( ::haxe::io::Bytes bytes,bool mandatory){
            	HX_STACKFRAME(&_hx_pos_e4808080a977b708_43_send)
            	
		// TODO: mandatory
		socket->send(url, port, (const unsigned char*)bytes->b->getBase(), bytes->length);
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Network_obj,send,(void))

void Network_obj::listen( ::Dynamic listener){
            	HX_GC_STACKFRAME(&_hx_pos_e4808080a977b708_48_listen)
HXDLIN(  48)		this->_hx_set_listener(HX_CTX, listener);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Network_obj,listen,(void))

void Network_obj::update(){
            	HX_STACKFRAME(&_hx_pos_e4808080a977b708_51_update)
HXLINE(  52)		int received = this->getBytesFromSocket(this->tempBuffer);
HXLINE(  53)		this->buffer->blit(this->bufferPos,this->tempBuffer,0,received);
HXLINE(  54)		 ::kha::netsync::Network _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  54)		_hx_tmp->bufferPos = (_hx_tmp->bufferPos + received);
HXLINE(  58)		bool _hx_tmp1;
HXDLIN(  58)		if (::hx::IsNotNull( this->listener )) {
HXLINE(  58)			_hx_tmp1 = (this->bufferPos > 0);
            		}
            		else {
HXLINE(  58)			_hx_tmp1 = false;
            		}
HXDLIN(  58)		if (_hx_tmp1) {
HXLINE(  59)			 ::haxe::io::Bytes result = ::haxe::io::Bytes_obj::alloc(this->bufferPos);
HXLINE(  60)			result->blit(0,this->buffer,0,this->bufferPos);
HXLINE(  61)			this->listener(result);
HXLINE(  62)			this->bufferPos = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Network_obj,update,(void))

int Network_obj::getBytesFromSocket( ::haxe::io::Bytes inBuffer){
            	HX_STACKFRAME(&_hx_pos_e4808080a977b708_78_getBytesFromSocket)
            	
		unsigned int recAddr;
		unsigned int recPort;
		int size = socket->receive((unsigned char*)inBuffer->b->getBase(), inBuffer->length, recAddr, recPort);
		if (size >= 0) {
			return size;
		}
		else {
			return 0;
		}
	

HXDLIN(  78)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Network_obj,getBytesFromSocket,return )


::hx::ObjectPtr< Network_obj > Network_obj::__new(::String url,int port, ::Dynamic errorCallback, ::Dynamic closeCallback) {
	::hx::ObjectPtr< Network_obj > __this = new Network_obj();
	__this->__construct(url,port,errorCallback,closeCallback);
	return __this;
}

::hx::ObjectPtr< Network_obj > Network_obj::__alloc(::hx::Ctx *_hx_ctx,::String url,int port, ::Dynamic errorCallback, ::Dynamic closeCallback) {
	Network_obj *__this = (Network_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Network_obj), true, "kha.netsync.Network"));
	*(void **)__this = Network_obj::_hx_vtable;
	__this->__construct(url,port,errorCallback,closeCallback);
	return __this;
}

Network_obj::Network_obj()
{
}

void Network_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Network);
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(port,"port");
	HX_MARK_MEMBER_NAME(bufferPos,"bufferPos");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(tempBuffer,"tempBuffer");
	HX_MARK_MEMBER_NAME(listener,"listener");
	HX_MARK_END_CLASS();
}

void Network_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(port,"port");
	HX_VISIT_MEMBER_NAME(bufferPos,"bufferPos");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(tempBuffer,"tempBuffer");
	HX_VISIT_MEMBER_NAME(listener,"listener");
}

::hx::Val Network_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"port") ) { return ::hx::Val( port ); }
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"send") ) { return ::hx::Val( send_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return ::hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"listen") ) { return ::hx::Val( listen_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return ::hx::Val( listener ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bufferPos") ) { return ::hx::Val( bufferPos ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tempBuffer") ) { return ::hx::Val( tempBuffer ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getBytesFromSocket") ) { return ::hx::Val( getBytesFromSocket_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Network_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { _hx_set_url(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"port") ) { port=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { _hx_set_buffer(HX_CTX_GET,inValue.Cast<  ::haxe::io::Bytes >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { _hx_set_listener(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bufferPos") ) { bufferPos=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tempBuffer") ) { _hx_set_tempBuffer(HX_CTX_GET,inValue.Cast<  ::haxe::io::Bytes >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Network_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("url",6f,2b,59,00));
	outFields->push(HX_("port",81,83,5c,4a));
	outFields->push(HX_("bufferPos",74,78,7c,b1));
	outFields->push(HX_("buffer",00,bd,94,d0));
	outFields->push(HX_("tempBuffer",34,7b,04,ec));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Network_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Network_obj,url),HX_("url",6f,2b,59,00)},
	{::hx::fsInt,(int)offsetof(Network_obj,port),HX_("port",81,83,5c,4a)},
	{::hx::fsInt,(int)offsetof(Network_obj,bufferPos),HX_("bufferPos",74,78,7c,b1)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Network_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Network_obj,tempBuffer),HX_("tempBuffer",34,7b,04,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Network_obj,listener),HX_("listener",74,00,32,38)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Network_obj_sStaticStorageInfo = 0;
#endif

static ::String Network_obj_sMemberFields[] = {
	HX_("url",6f,2b,59,00),
	HX_("port",81,83,5c,4a),
	HX_("bufferPos",74,78,7c,b1),
	HX_("buffer",00,bd,94,d0),
	HX_("tempBuffer",34,7b,04,ec),
	HX_("listener",74,00,32,38),
	HX_("init",10,3b,bb,45),
	HX_("send",48,8d,50,4c),
	HX_("listen",47,c8,f9,ef),
	HX_("update",09,86,05,87),
	HX_("getBytesFromSocket",12,11,ea,8e),
	::String(null()) };

::hx::Class Network_obj::__mClass;

void Network_obj::__register()
{
	Network_obj _hx_dummy;
	Network_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.netsync.Network",0e,5b,6c,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Network_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Network_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Network_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Network_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace netsync

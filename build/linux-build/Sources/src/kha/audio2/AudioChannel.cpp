// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <hxinc/kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio
#include <hxinc/kha/audio2/Audio.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio1
#include <hxinc/kha/audio2/Audio1.h>
#endif
#ifndef INCLUDED_kha_audio2_AudioChannel
#include <hxinc/kha/audio2/AudioChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_5_new,"kha.audio2.AudioChannel","new",0x149245e7,"kha.audio2.AudioChannel.new","kha/audio2/AudioChannel.hx",5,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_17_nextSamples,"kha.audio2.AudioChannel","nextSamples",0x6e9d10dd,"kha.audio2.AudioChannel.nextSamples","kha/audio2/AudioChannel.hx",17,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_45_play,"kha.audio2.AudioChannel","play",0xecc28e8d,"kha.audio2.AudioChannel.play","kha/audio2/AudioChannel.hx",45,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_52_pause,"kha.audio2.AudioChannel","pause",0x3643fc3d,"kha.audio2.AudioChannel.pause","kha/audio2/AudioChannel.hx",52,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_55_stop,"kha.audio2.AudioChannel","stop",0xeec4509b,"kha.audio2.AudioChannel.stop","kha/audio2/AudioChannel.hx",55,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_63_get_length,"kha.audio2.AudioChannel","get_length",0xd6d35e08,"kha.audio2.AudioChannel.get_length","kha/audio2/AudioChannel.hx",63,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_69_get_position,"kha.audio2.AudioChannel","get_position",0x6424764b,"kha.audio2.AudioChannel.get_position","kha/audio2/AudioChannel.hx",69,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_72_set_position,"kha.audio2.AudioChannel","set_position",0x791d99bf,"kha.audio2.AudioChannel.set_position","kha/audio2/AudioChannel.hx",72,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_81_get_volume,"kha.audio2.AudioChannel","get_volume",0x971ef2fc,"kha.audio2.AudioChannel.get_volume","kha/audio2/AudioChannel.hx",81,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_85_set_volume,"kha.audio2.AudioChannel","set_volume",0x9a9c9170,"kha.audio2.AudioChannel.set_volume","kha/audio2/AudioChannel.hx",85,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_91_get_finished,"kha.audio2.AudioChannel","get_finished",0x2e386914,"kha.audio2.AudioChannel.get_finished","kha/audio2/AudioChannel.hx",91,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_95_max,"kha.audio2.AudioChannel","max",0x1491802b,"kha.audio2.AudioChannel.max","kha/audio2/AudioChannel.hx",95,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_99_min,"kha.audio2.AudioChannel","min",0x14918719,"kha.audio2.AudioChannel.min","kha/audio2/AudioChannel.hx",99,0x9a222549)
namespace kha{
namespace audio2{

void AudioChannel_obj::__construct(bool looping){
            	HX_GC_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_5_new)
HXLINE(  11)		this->looping = false;
HXLINE(  10)		this->stopped = false;
HXLINE(   9)		this->paused = false;
HXLINE(   8)		this->myPosition = 0;
HXLINE(   7)		this->myVolume = ((Float)1);
HXLINE(   6)		this->_hx_set_data(HX_CTX, null());
HXLINE(  14)		this->looping = looping;
            	}

Dynamic AudioChannel_obj::__CreateEmpty() { return new AudioChannel_obj; }

void *AudioChannel_obj::_hx_vtable = 0;

Dynamic AudioChannel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AudioChannel_obj > _hx_result = new AudioChannel_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AudioChannel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61e76a49;
}

static ::kha::audio1::AudioChannel_obj _hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel= {
	( void (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::play,
	( void (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::pause,
	( void (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::stop,
	( Float (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_length,
	( Float (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_position,
	( Float (::hx::Object::*)(Float))&::kha::audio2::AudioChannel_obj::set_position,
	( Float (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_volume,
	( Float (::hx::Object::*)(Float))&::kha::audio2::AudioChannel_obj::set_volume,
	( bool (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_finished,
};

void *AudioChannel_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x78040b2c: return &_hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void AudioChannel_obj::nextSamples( ::kha::arrays::Float32ArrayPrivate requestedSamples,int requestedLength,int sampleRate){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_17_nextSamples)
HXLINE(  18)		bool _hx_tmp;
HXDLIN(  18)		if (!(this->paused)) {
HXLINE(  18)			_hx_tmp = this->stopped;
            		}
            		else {
HXLINE(  18)			_hx_tmp = true;
            		}
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  19)			{
HXLINE(  19)				int _g = 0;
HXDLIN(  19)				int _g1 = requestedLength;
HXDLIN(  19)				while((_g < _g1)){
HXLINE(  19)					_g = (_g + 1);
HXDLIN(  19)					int i = (_g - 1);
HXLINE(  20)					requestedSamples->self.set(i,( (float)(0) ));
            				}
            			}
HXLINE(  22)			return;
            		}
HXLINE(  25)		int requestedSamplesIndex = 0;
HXLINE(  26)		while((requestedSamplesIndex < requestedLength)){
HXLINE(  27)			{
HXLINE(  27)				int _g = 0;
HXDLIN(  27)				int a = this->data->self.length();
HXDLIN(  27)				int a1 = (a - this->myPosition);
HXDLIN(  27)				int b = (requestedLength - requestedSamplesIndex);
HXDLIN(  27)				int _g1;
HXDLIN(  27)				if ((a1 < b)) {
HXLINE(  27)					_g1 = a1;
            				}
            				else {
HXLINE(  27)					_g1 = b;
            				}
HXDLIN(  27)				while((_g < _g1)){
HXLINE(  27)					_g = (_g + 1);
HXDLIN(  27)					int i = (_g - 1);
HXLINE(  28)					{
HXLINE(  28)						requestedSamplesIndex = (requestedSamplesIndex + 1);
HXDLIN(  28)						float value = this->data->self.get(this->myPosition++);
HXDLIN(  28)						requestedSamples->self.set((requestedSamplesIndex - 1),value);
            					}
            				}
            			}
HXLINE(  31)			int _hx_tmp = this->myPosition;
HXDLIN(  31)			if ((_hx_tmp >= this->data->self.length())) {
HXLINE(  32)				this->myPosition = 0;
HXLINE(  33)				if (!(this->looping)) {
HXLINE(  34)					this->stopped = true;
HXLINE(  35)					goto _hx_goto_2;
            				}
            			}
            		}
            		_hx_goto_2:;
HXLINE(  40)		while((requestedSamplesIndex < requestedLength)){
HXLINE(  41)			requestedSamplesIndex = (requestedSamplesIndex + 1);
HXDLIN(  41)			requestedSamples->self.set((requestedSamplesIndex - 1),( (float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AudioChannel_obj,nextSamples,(void))

void AudioChannel_obj::play(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_45_play)
HXLINE(  46)		this->paused = false;
HXLINE(  47)		this->stopped = false;
HXLINE(  48)		::kha::audio2::Audio1_obj::_playAgain(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,play,(void))

void AudioChannel_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_52_pause)
HXDLIN(  52)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,pause,(void))

void AudioChannel_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_55_stop)
HXLINE(  56)		this->myPosition = 0;
HXLINE(  57)		this->stopped = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,stop,(void))

Float AudioChannel_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_63_get_length)
HXDLIN(  63)		int _hx_tmp = this->data->self.length();
HXDLIN(  63)		return ((( (Float)(_hx_tmp) ) / ( (Float)(::kha::audio2::Audio_obj::samplesPerSecond) )) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_length,return )

Float AudioChannel_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_69_get_position)
HXDLIN(  69)		return ((( (Float)(this->myPosition) ) / ( (Float)(::kha::audio2::Audio_obj::samplesPerSecond) )) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_position,return )

Float AudioChannel_obj::set_position(Float value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_72_set_position)
HXLINE(  73)		this->myPosition = ::Math_obj::round(((value * ( (Float)(::kha::audio2::Audio_obj::samplesPerSecond) )) * ( (Float)(2) )));
HXLINE(  74)		int a = this->myPosition;
HXDLIN(  74)		int b = this->data->self.length();
HXDLIN(  74)		int a1;
HXDLIN(  74)		if ((a < b)) {
HXLINE(  74)			a1 = a;
            		}
            		else {
HXLINE(  74)			a1 = b;
            		}
HXDLIN(  74)		int _hx_tmp;
HXDLIN(  74)		if ((a1 > 0)) {
HXLINE(  74)			_hx_tmp = a1;
            		}
            		else {
HXLINE(  74)			_hx_tmp = 0;
            		}
HXDLIN(  74)		this->myPosition = _hx_tmp;
HXLINE(  75)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_position,return )

Float AudioChannel_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_81_get_volume)
HXDLIN(  81)		return this->myVolume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_volume,return )

Float AudioChannel_obj::set_volume(Float value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_85_set_volume)
HXDLIN(  85)		return (this->myVolume = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_volume,return )

bool AudioChannel_obj::get_finished(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_91_get_finished)
HXDLIN(  91)		return this->stopped;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_finished,return )

int AudioChannel_obj::max(int a,int b){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_95_max)
HXDLIN(  95)		if ((a > b)) {
HXDLIN(  95)			return a;
            		}
            		else {
HXDLIN(  95)			return b;
            		}
HXDLIN(  95)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AudioChannel_obj,max,return )

int AudioChannel_obj::min(int a,int b){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_99_min)
HXDLIN(  99)		if ((a < b)) {
HXDLIN(  99)			return a;
            		}
            		else {
HXDLIN(  99)			return b;
            		}
HXDLIN(  99)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AudioChannel_obj,min,return )


::hx::ObjectPtr< AudioChannel_obj > AudioChannel_obj::__new(bool looping) {
	::hx::ObjectPtr< AudioChannel_obj > __this = new AudioChannel_obj();
	__this->__construct(looping);
	return __this;
}

::hx::ObjectPtr< AudioChannel_obj > AudioChannel_obj::__alloc(::hx::Ctx *_hx_ctx,bool looping) {
	AudioChannel_obj *__this = (AudioChannel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AudioChannel_obj), true, "kha.audio2.AudioChannel"));
	*(void **)__this = AudioChannel_obj::_hx_vtable;
	__this->__construct(looping);
	return __this;
}

AudioChannel_obj::AudioChannel_obj()
{
}

void AudioChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioChannel);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(myVolume,"myVolume");
	HX_MARK_MEMBER_NAME(myPosition,"myPosition");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(stopped,"stopped");
	HX_MARK_MEMBER_NAME(looping,"looping");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_END_CLASS();
}

void AudioChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(myVolume,"myVolume");
	HX_VISIT_MEMBER_NAME(myPosition,"myPosition");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(stopped,"stopped");
	HX_VISIT_MEMBER_NAME(looping,"looping");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(finished,"finished");
}

::hx::Val AudioChannel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return ::hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_volume() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stopped") ) { return ::hx::Val( stopped ); }
		if (HX_FIELD_EQ(inName,"looping") ) { return ::hx::Val( looping ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { return ::hx::Val( myVolume ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_finished() : finished ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { return ::hx::Val( myPosition ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return ::hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return ::hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nextSamples") ) { return ::hx::Val( nextSamples_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return ::hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return ::hx::Val( set_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_finished") ) { return ::hx::Val( get_finished_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AudioChannel_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
	}
	return false;
}

::hx::Val AudioChannel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { _hx_set_data(HX_CTX_GET,inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_volume(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stopped") ) { stopped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"looping") ) { looping=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { myVolume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_position(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { myPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("myVolume",66,56,07,96));
	outFields->push(HX_("myPosition",35,08,7c,38));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("stopped",0d,d2,61,43));
	outFields->push(HX_("looping",fe,7c,7d,20));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("finished",72,93,0e,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AudioChannel_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(int)offsetof(AudioChannel_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsFloat,(int)offsetof(AudioChannel_obj,myVolume),HX_("myVolume",66,56,07,96)},
	{::hx::fsInt,(int)offsetof(AudioChannel_obj,myPosition),HX_("myPosition",35,08,7c,38)},
	{::hx::fsBool,(int)offsetof(AudioChannel_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(AudioChannel_obj,stopped),HX_("stopped",0d,d2,61,43)},
	{::hx::fsBool,(int)offsetof(AudioChannel_obj,looping),HX_("looping",fe,7c,7d,20)},
	{::hx::fsFloat,(int)offsetof(AudioChannel_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsBool,(int)offsetof(AudioChannel_obj,finished),HX_("finished",72,93,0e,95)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AudioChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioChannel_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("myVolume",66,56,07,96),
	HX_("myPosition",35,08,7c,38),
	HX_("paused",ae,40,84,ef),
	HX_("stopped",0d,d2,61,43),
	HX_("looping",fe,7c,7d,20),
	HX_("nextSamples",56,3c,13,5a),
	HX_("play",f4,2d,5a,4a),
	HX_("pause",f6,d6,57,bd),
	HX_("stop",02,f0,5b,4c),
	HX_("length",e6,94,07,9f),
	HX_("get_length",af,04,8f,8f),
	HX_("get_position",b2,54,14,80),
	HX_("set_position",26,78,0d,95),
	HX_("get_volume",a3,99,da,4f),
	HX_("set_volume",17,38,58,53),
	HX_("finished",72,93,0e,95),
	HX_("get_finished",7b,47,28,4a),
	::String(null()) };

::hx::Class AudioChannel_obj::__mClass;

static ::String AudioChannel_obj_sStaticFields[] = {
	HX_("max",a4,0a,53,00),
	HX_("min",92,11,53,00),
	::String(null())
};

void AudioChannel_obj::__register()
{
	AudioChannel_obj _hx_dummy;
	AudioChannel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.AudioChannel",75,c6,99,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AudioChannel_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AudioChannel_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AudioChannel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AudioChannel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioChannel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <hxinc/kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_StreamChannel
#include <hxinc/kha/audio2/StreamChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f5e0555984af9b17_8_new,"kha.audio2.StreamChannel","new",0x8b4239ad,"kha.audio2.StreamChannel.new","kha/audio2/StreamChannel.hx",8,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_21_initVorbis,"kha.audio2.StreamChannel","initVorbis",0x1b4e68d6,"kha.audio2.StreamChannel.initVorbis","kha/audio2/StreamChannel.hx",21,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_39_nextVorbisSamples,"kha.audio2.StreamChannel","nextVorbisSamples",0xf2e4ef10,"kha.audio2.StreamChannel.nextVorbisSamples","kha/audio2/StreamChannel.hx",39,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_43_nextSamples,"kha.audio2.StreamChannel","nextSamples",0xf9af3aa3,"kha.audio2.StreamChannel.nextSamples","kha/audio2/StreamChannel.hx",43,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_55_play,"kha.audio2.StreamChannel","play",0x5007e807,"kha.audio2.StreamChannel.play","kha/audio2/StreamChannel.hx",55,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_59_pause,"kha.audio2.StreamChannel","pause",0xafaced83,"kha.audio2.StreamChannel.pause","kha/audio2/StreamChannel.hx",59,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_63_stop,"kha.audio2.StreamChannel","stop",0x5209aa15,"kha.audio2.StreamChannel.stop","kha/audio2/StreamChannel.hx",63,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_73_get_length,"kha.audio2.StreamChannel","get_length",0x435c0f02,"kha.audio2.StreamChannel.get_length","kha/audio2/StreamChannel.hx",73,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_85_get_position,"kha.audio2.StreamChannel","get_position",0x88f6d9c5,"kha.audio2.StreamChannel.get_position","kha/audio2/StreamChannel.hx",85,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_95_set_position,"kha.audio2.StreamChannel","set_position",0x9deffd39,"kha.audio2.StreamChannel.set_position","kha/audio2/StreamChannel.hx",95,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_101_get_volume,"kha.audio2.StreamChannel","get_volume",0x03a7a3f6,"kha.audio2.StreamChannel.get_volume","kha/audio2/StreamChannel.hx",101,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_105_set_volume,"kha.audio2.StreamChannel","set_volume",0x0725426a,"kha.audio2.StreamChannel.set_volume","kha/audio2/StreamChannel.hx",105,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_111_get_finished,"kha.audio2.StreamChannel","get_finished",0x530acc8e,"kha.audio2.StreamChannel.get_finished","kha/audio2/StreamChannel.hx",111,0x97220c83)
namespace kha{
namespace audio2{

void StreamChannel_obj::__construct( ::haxe::io::Bytes data,bool loop){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_8_new)
HXLINE(  12)		this->paused = false;
HXLINE(   9)		this->atend = false;
HXLINE(  15)		this->myVolume = ( (Float)(1) );
HXLINE(  16)		this->loop = loop;
HXLINE(  17)		this->initVorbis(data);
            	}

Dynamic StreamChannel_obj::__CreateEmpty() { return new StreamChannel_obj; }

void *StreamChannel_obj::_hx_vtable = 0;

Dynamic StreamChannel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StreamChannel_obj > _hx_result = new StreamChannel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StreamChannel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x202894e7;
}

static ::kha::audio1::AudioChannel_obj _hx_kha_audio2_StreamChannel__hx_kha_audio1_AudioChannel= {
	( void (::hx::Object::*)())&::kha::audio2::StreamChannel_obj::play,
	( void (::hx::Object::*)())&::kha::audio2::StreamChannel_obj::pause,
	( void (::hx::Object::*)())&::kha::audio2::StreamChannel_obj::stop,
	( Float (::hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_length_db2cbb4e,
	( Float (::hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_position,
	( Float (::hx::Object::*)(Float))&::kha::audio2::StreamChannel_obj::set_position,
	( Float (::hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_volume,
	( Float (::hx::Object::*)(Float))&::kha::audio2::StreamChannel_obj::set_volume,
	( bool (::hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_finished,
};

Float StreamChannel_obj::get_length_db2cbb4e() {
			return get_length();
}
void *StreamChannel_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x78040b2c: return &_hx_kha_audio2_StreamChannel__hx_kha_audio1_AudioChannel;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void StreamChannel_obj::initVorbis( ::haxe::io::Bytes data){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_21_initVorbis)
            	vorbis = stb_vorbis_open_memory(data->b->Pointer(), data->length, NULL, NULL);

            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamChannel_obj,initVorbis,(void))

void StreamChannel_obj::nextVorbisSamples( ::kha::arrays::Float32ArrayPrivate samples,int length){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_39_nextVorbisSamples)
            	
		int read = stb_vorbis_get_samples_float_interleaved(vorbis, 2, samples->self.data, length);
		if (read < length / 2) {
			if (loop) {
				stb_vorbis_seek_start(vorbis);
			}
			else {
				atend = true;
			}
			for (int i = read; i < length; ++i) {
				samples->self.data[i] = 0;
			}
		}
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(StreamChannel_obj,nextVorbisSamples,(void))

void StreamChannel_obj::nextSamples( ::kha::arrays::Float32ArrayPrivate samples,int length,int sampleRate){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_43_nextSamples)
HXLINE(  44)		if (this->paused) {
HXLINE(  45)			{
HXLINE(  45)				int _g = 0;
HXDLIN(  45)				int _g1 = length;
HXDLIN(  45)				while((_g < _g1)){
HXLINE(  45)					_g = (_g + 1);
HXDLIN(  45)					int i = (_g - 1);
HXLINE(  46)					samples->self.set(i,( (float)(0) ));
            				}
            			}
HXLINE(  48)			return;
            		}
HXLINE(  51)		this->nextVorbisSamples(samples,length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(StreamChannel_obj,nextSamples,(void))

void StreamChannel_obj::play(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_55_play)
HXDLIN(  55)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,play,(void))

void StreamChannel_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_59_pause)
HXDLIN(  59)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,pause,(void))

void StreamChannel_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_63_stop)
HXDLIN(  63)		this->atend = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,stop,(void))

int StreamChannel_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_73_get_length)
            	
		if (vorbis == NULL) return 0;
		return stb_vorbis_stream_length_in_seconds(vorbis);
	

HXDLIN(  73)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_length,return )

Float StreamChannel_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_85_get_position)
            	
		if (vorbis == NULL) return 0;
		return stb_vorbis_get_sample_offset(vorbis) /
			(float)stb_vorbis_stream_length_in_samples(vorbis) *
			stb_vorbis_stream_length_in_seconds(vorbis);
	

HXDLIN(  85)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_position,return )

Float StreamChannel_obj::set_position(Float value){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_95_set_position)
            	
		if (vorbis == NULL) return value;
		unsigned int rate = stb_vorbis_get_info(vorbis).sample_rate;
		stb_vorbis_seek_frame(vorbis, rate * value);
		return value;
	

HXDLIN(  95)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamChannel_obj,set_position,return )

Float StreamChannel_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_101_get_volume)
HXDLIN( 101)		return this->myVolume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_volume,return )

Float StreamChannel_obj::set_volume(Float value){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_105_set_volume)
HXDLIN( 105)		return (this->myVolume = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamChannel_obj,set_volume,return )

bool StreamChannel_obj::get_finished(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_111_get_finished)
HXDLIN( 111)		return this->atend;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_finished,return )


::hx::ObjectPtr< StreamChannel_obj > StreamChannel_obj::__new( ::haxe::io::Bytes data,bool loop) {
	::hx::ObjectPtr< StreamChannel_obj > __this = new StreamChannel_obj();
	__this->__construct(data,loop);
	return __this;
}

::hx::ObjectPtr< StreamChannel_obj > StreamChannel_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Bytes data,bool loop) {
	StreamChannel_obj *__this = (StreamChannel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StreamChannel_obj), false, "kha.audio2.StreamChannel"));
	*(void **)__this = StreamChannel_obj::_hx_vtable;
	__this->__construct(data,loop);
	return __this;
}

StreamChannel_obj::StreamChannel_obj()
{
}

::hx::Val StreamChannel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { return ::hx::Val( loop ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"atend") ) { return ::hx::Val( atend ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return ::hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_volume() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { return ::hx::Val( myVolume ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_finished() : finished ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initVorbis") ) { return ::hx::Val( initVorbis_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return ::hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return ::hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nextSamples") ) { return ::hx::Val( nextSamples_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return ::hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return ::hx::Val( set_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_finished") ) { return ::hx::Val( get_finished_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextVorbisSamples") ) { return ::hx::Val( nextVorbisSamples_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StreamChannel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { loop=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"atend") ) { atend=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_volume(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { myVolume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_position(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StreamChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("atend",c8,08,d8,26));
	outFields->push(HX_("loop",64,a6,b7,47));
	outFields->push(HX_("myVolume",66,56,07,96));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("finished",72,93,0e,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StreamChannel_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(StreamChannel_obj,atend),HX_("atend",c8,08,d8,26)},
	{::hx::fsBool,(int)offsetof(StreamChannel_obj,loop),HX_("loop",64,a6,b7,47)},
	{::hx::fsFloat,(int)offsetof(StreamChannel_obj,myVolume),HX_("myVolume",66,56,07,96)},
	{::hx::fsBool,(int)offsetof(StreamChannel_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsFloat,(int)offsetof(StreamChannel_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsBool,(int)offsetof(StreamChannel_obj,finished),HX_("finished",72,93,0e,95)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StreamChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String StreamChannel_obj_sMemberFields[] = {
	HX_("atend",c8,08,d8,26),
	HX_("loop",64,a6,b7,47),
	HX_("myVolume",66,56,07,96),
	HX_("paused",ae,40,84,ef),
	HX_("initVorbis",83,5e,81,67),
	HX_("nextVorbisSamples",03,b9,41,5f),
	HX_("nextSamples",56,3c,13,5a),
	HX_("play",f4,2d,5a,4a),
	HX_("pause",f6,d6,57,bd),
	HX_("stop",02,f0,5b,4c),
	HX_("length",e6,94,07,9f),
	HX_("get_length",af,04,8f,8f),
	HX_("get_position",b2,54,14,80),
	HX_("set_position",26,78,0d,95),
	HX_("get_volume",a3,99,da,4f),
	HX_("set_volume",17,38,58,53),
	HX_("finished",72,93,0e,95),
	HX_("get_finished",7b,47,28,4a),
	::String(null()) };

::hx::Class StreamChannel_obj::__mClass;

void StreamChannel_obj::__register()
{
	StreamChannel_obj _hx_dummy;
	StreamChannel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.StreamChannel",3b,df,86,dd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StreamChannel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StreamChannel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StreamChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StreamChannel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2

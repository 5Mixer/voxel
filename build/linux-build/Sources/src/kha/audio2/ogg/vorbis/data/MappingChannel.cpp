// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_MappingChannel
#include <hxinc/kha/audio2/ogg/vorbis/data/MappingChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_08ff309769f5ae26_125_new,"kha.audio2.ogg.vorbis.data.MappingChannel","new",0x33acd197,"kha.audio2.ogg.vorbis.data.MappingChannel.new","kha/audio2/ogg/vorbis/data/Mapping.hx",125,0x30bf6281)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void MappingChannel_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_08ff309769f5ae26_125_new)
            	}

Dynamic MappingChannel_obj::__CreateEmpty() { return new MappingChannel_obj; }

void *MappingChannel_obj::_hx_vtable = 0;

Dynamic MappingChannel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MappingChannel_obj > _hx_result = new MappingChannel_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MappingChannel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x53676c81;
}


MappingChannel_obj::MappingChannel_obj()
{
}

::hx::Val MappingChannel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mux") ) { return ::hx::Val( mux ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { return ::hx::Val( angle ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"magnitude") ) { return ::hx::Val( magnitude ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MappingChannel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mux") ) { mux=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"magnitude") ) { magnitude=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MappingChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("magnitude",d0,33,64,f5));
	outFields->push(HX_("angle",d3,43,e2,22));
	outFields->push(HX_("mux",10,1c,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MappingChannel_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MappingChannel_obj,magnitude),HX_("magnitude",d0,33,64,f5)},
	{::hx::fsInt,(int)offsetof(MappingChannel_obj,angle),HX_("angle",d3,43,e2,22)},
	{::hx::fsInt,(int)offsetof(MappingChannel_obj,mux),HX_("mux",10,1c,53,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MappingChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String MappingChannel_obj_sMemberFields[] = {
	HX_("magnitude",d0,33,64,f5),
	HX_("angle",d3,43,e2,22),
	HX_("mux",10,1c,53,00),
	::String(null()) };

::hx::Class MappingChannel_obj::__mClass;

void MappingChannel_obj::__register()
{
	MappingChannel_obj _hx_dummy;
	MappingChannel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.ogg.vorbis.data.MappingChannel",25,ba,38,43);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MappingChannel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MappingChannel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MappingChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MappingChannel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data

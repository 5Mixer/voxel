// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <hxinc/haxe/Exception.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <hxinc/kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisTools
#include <hxinc/kha/audio2/ogg/vorbis/VorbisTools.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <hxinc/kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor
#include <hxinc/kha/audio2/ogg/vorbis/data/Floor.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor0
#include <hxinc/kha/audio2/ogg/vorbis/data/Floor0.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor1
#include <hxinc/kha/audio2/ogg/vorbis/data/Floor1.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_IntPoint
#include <hxinc/kha/audio2/ogg/vorbis/data/IntPoint.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <hxinc/kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <hxinc/kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8fd99ebc77e89687_18_new,"kha.audio2.ogg.vorbis.data.Floor","new",0x5f0b4bee,"kha.audio2.ogg.vorbis.data.Floor.new","kha/audio2/ogg/vorbis/data/Floor.hx",18,0x2f4d0043)
HX_LOCAL_STACK_FRAME(_hx_pos_8fd99ebc77e89687_23_read,"kha.audio2.ogg.vorbis.data.Floor","read",0xcd7bec08,"kha.audio2.ogg.vorbis.data.Floor.read","kha/audio2/ogg/vorbis/data/Floor.hx",23,0x2f4d0043)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Floor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8fd99ebc77e89687_18_new)
            	}

Dynamic Floor_obj::__CreateEmpty() { return new Floor_obj; }

void *Floor_obj::_hx_vtable = 0;

Dynamic Floor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Floor_obj > _hx_result = new Floor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Floor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c488620;
}

 ::kha::audio2::ogg::vorbis::data::Floor Floor_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< ::Dynamic> codebooks){
            	HX_GC_STACKFRAME(&_hx_pos_8fd99ebc77e89687_23_read)
HXLINE(  24)		 ::kha::audio2::ogg::vorbis::data::Floor floor =  ::kha::audio2::ogg::vorbis::data::Floor_obj::__alloc( HX_CTX );
HXLINE(  26)		floor->type = decodeState->readBits(16);
HXLINE(  27)		if ((floor->type > 1)) {
HXLINE(  28)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/data/Floor.hx",43,00,4d,2f),28,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b)))));
            		}
HXLINE(  30)		if ((floor->type == 0)) {
HXLINE(  31)			 ::kha::audio2::ogg::vorbis::data::Floor0 g = (floor->_hx_set_floor0(HX_CTX,  ::kha::audio2::ogg::vorbis::data::Floor0_obj::__alloc( HX_CTX )));
HXLINE(  32)			g->order = decodeState->readBits(8);
HXLINE(  33)			g->rate = decodeState->readBits(16);
HXLINE(  34)			g->barkMapSize = decodeState->readBits(16);
HXLINE(  35)			g->amplitudeBits = decodeState->readBits(6);
HXLINE(  36)			g->amplitudeOffset = decodeState->readBits(8);
HXLINE(  37)			g->numberOfBooks = (decodeState->readBits(4) + 1);
HXLINE(  38)			{
HXLINE(  38)				int _g = 0;
HXDLIN(  38)				int _g1 = g->numberOfBooks;
HXDLIN(  38)				while((_g < _g1)){
HXLINE(  38)					_g = (_g + 1);
HXDLIN(  38)					int j = (_g - 1);
HXLINE(  39)					{
HXLINE(  39)						::Array< int > this1 = g->bookList;
HXDLIN(  39)						int val = decodeState->readBits(8);
HXDLIN(  39)						this1->__unsafe_set(j,val);
            					}
            				}
            			}
HXLINE(  41)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::FEATURE_NOT_SUPPORTED_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/data/Floor.hx",43,00,4d,2f),41,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b)))));
            		}
            		else {
HXLINE(  43)			::Array< ::Dynamic> p = ::Array_obj< ::Dynamic>::__new();
HXLINE(  44)			 ::kha::audio2::ogg::vorbis::data::Floor1 g = (floor->_hx_set_floor1(HX_CTX,  ::kha::audio2::ogg::vorbis::data::Floor1_obj::__alloc( HX_CTX )));
HXLINE(  45)			int maxClass = -1;
HXLINE(  46)			g->partitions = decodeState->readBits(5);
HXLINE(  47)			::Array< int > this1 = ::Array_obj< int >::__new(g->partitions);
HXDLIN(  47)			g->_hx_set_partitionClassList(HX_CTX, this1);
HXLINE(  48)			{
HXLINE(  48)				int _g = 0;
HXDLIN(  48)				int _g1 = g->partitions;
HXDLIN(  48)				while((_g < _g1)){
HXLINE(  48)					_g = (_g + 1);
HXDLIN(  48)					int j = (_g - 1);
HXLINE(  49)					{
HXLINE(  49)						::Array< int > this1 = g->partitionClassList;
HXDLIN(  49)						int val = decodeState->readBits(4);
HXDLIN(  49)						this1->__unsafe_set(j,val);
            					}
HXLINE(  50)					if (::hx::IsGreater( _hx_array_unsafe_get(g->partitionClassList,j),maxClass )) {
HXLINE(  51)						maxClass = ( (int)(_hx_array_unsafe_get(g->partitionClassList,j)) );
            					}
            				}
            			}
HXLINE(  54)			::Array< int > this2 = ::Array_obj< int >::__new((maxClass + 1));
HXDLIN(  54)			g->_hx_set_classDimensions(HX_CTX, this2);
HXLINE(  55)			::Array< int > this3 = ::Array_obj< int >::__new((maxClass + 1));
HXDLIN(  55)			g->_hx_set_classMasterbooks(HX_CTX, this3);
HXLINE(  56)			::Array< int > this4 = ::Array_obj< int >::__new((maxClass + 1));
HXDLIN(  56)			g->_hx_set_classSubclasses(HX_CTX, this4);
HXLINE(  57)			::Array< ::Dynamic> this5 = ::Array_obj< ::Dynamic>::__new((maxClass + 1));
HXDLIN(  57)			g->_hx_set_subclassBooks(HX_CTX, this5);
HXLINE(  58)			{
HXLINE(  58)				int _g2 = 0;
HXDLIN(  58)				int _g3 = (maxClass + 1);
HXDLIN(  58)				while((_g2 < _g3)){
HXLINE(  58)					_g2 = (_g2 + 1);
HXDLIN(  58)					int j = (_g2 - 1);
HXLINE(  59)					{
HXLINE(  59)						::Array< int > this1 = g->classDimensions;
HXDLIN(  59)						int val = (decodeState->readBits(3) + 1);
HXDLIN(  59)						this1->__unsafe_set(j,val);
            					}
HXLINE(  60)					{
HXLINE(  60)						::Array< int > this2 = g->classSubclasses;
HXDLIN(  60)						int val1 = decodeState->readBits(2);
HXDLIN(  60)						this2->__unsafe_set(j,val1);
            					}
HXLINE(  61)					if (::hx::IsNotEq( _hx_array_unsafe_get(g->classSubclasses,j),0 )) {
HXLINE(  62)						{
HXLINE(  62)							::Array< int > this1 = g->classMasterbooks;
HXDLIN(  62)							int val = decodeState->readBits(8);
HXDLIN(  62)							this1->__unsafe_set(j,val);
            						}
HXLINE(  63)						int _hx_tmp = ( (int)(_hx_array_unsafe_get(g->classMasterbooks,j)) );
HXDLIN(  63)						if ((_hx_tmp >= codebooks->length)) {
HXLINE(  64)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/data/Floor.hx",43,00,4d,2f),64,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b)))));
            						}
            					}
HXLINE(  68)					int kl = (1 << ( (int)(_hx_array_unsafe_get(g->classSubclasses,j)) ));
HXLINE(  69)					{
HXLINE(  69)						::Array< ::Dynamic> this3 = g->subclassBooks;
HXDLIN(  69)						::Array< int > this4 = ::Array_obj< int >::__new(kl);
HXDLIN(  69)						this3->__unsafe_set(j,this4);
            					}
HXLINE(  70)					{
HXLINE(  70)						int _g = 0;
HXDLIN(  70)						int _g1 = kl;
HXDLIN(  70)						while((_g < _g1)){
HXLINE(  70)							_g = (_g + 1);
HXDLIN(  70)							int k = (_g - 1);
HXLINE(  71)							{
HXLINE(  71)								::Array< int > this1 = ( (::Array< int >)(_hx_array_unsafe_get(g->subclassBooks,j)) );
HXDLIN(  71)								int val = (decodeState->readBits(8) - 1);
HXDLIN(  71)								this1->__unsafe_set(k,val);
            							}
HXLINE(  72)							int _hx_tmp = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(g->subclassBooks,j)) ),k)) );
HXDLIN(  72)							if ((_hx_tmp >= codebooks->length)) {
HXLINE(  73)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/data/Floor.hx",43,00,4d,2f),73,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b)))));
            							}
            						}
            					}
            				}
            			}
HXLINE(  78)			g->floor1Multiplier = (decodeState->readBits(2) + 1);
HXLINE(  79)			g->rangebits = decodeState->readBits(4);
HXLINE(  80)			::Array< int > this6 = ::Array_obj< int >::__new(250);
HXDLIN(  80)			g->_hx_set_xlist(HX_CTX, this6);
HXLINE(  81)			g->xlist->__unsafe_set(0,0);
HXLINE(  82)			g->xlist->__unsafe_set(1,(1 << g->rangebits));
HXLINE(  83)			g->values = 2;
HXLINE(  84)			{
HXLINE(  84)				int _g4 = 0;
HXDLIN(  84)				int _g5 = g->partitions;
HXDLIN(  84)				while((_g4 < _g5)){
HXLINE(  84)					_g4 = (_g4 + 1);
HXDLIN(  84)					int j = (_g4 - 1);
HXLINE(  85)					int c = ( (int)(_hx_array_unsafe_get(g->partitionClassList,j)) );
HXLINE(  86)					{
HXLINE(  86)						int _g = 0;
HXDLIN(  86)						int _g1 = ( (int)(_hx_array_unsafe_get(g->classDimensions,c)) );
HXDLIN(  86)						while((_g < _g1)){
HXLINE(  86)							_g = (_g + 1);
HXDLIN(  86)							int k = (_g - 1);
HXLINE(  87)							{
HXLINE(  87)								::Array< int > this1 = g->xlist;
HXDLIN(  87)								int index = g->values;
HXDLIN(  87)								int val = decodeState->readBits(g->rangebits);
HXDLIN(  87)								this1->__unsafe_set(index,val);
            							}
HXLINE(  88)							g->values++;
            						}
            					}
            				}
            			}
HXLINE(  93)			{
HXLINE(  93)				int _g6 = 0;
HXDLIN(  93)				int _g7 = g->values;
HXDLIN(  93)				while((_g6 < _g7)){
HXLINE(  93)					_g6 = (_g6 + 1);
HXDLIN(  93)					int j = (_g6 - 1);
HXLINE(  94)					p->push( ::kha::audio2::ogg::vorbis::data::IntPoint_obj::__alloc( HX_CTX ));
HXLINE(  95)					int _hx_tmp = ( (int)(_hx_array_unsafe_get(g->xlist,j)) );
HXDLIN(  95)					p->__get(j).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->x = _hx_tmp;
HXLINE(  96)					p->__get(j).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->y = j;
            				}
            			}
HXLINE(  99)			p->sort(::kha::audio2::ogg::vorbis::VorbisTools_obj::pointCompare_dyn());
HXLINE( 101)			::Array< int > this7 = ::Array_obj< int >::__new(g->values);
HXDLIN( 101)			g->_hx_set_sortedOrder(HX_CTX, this7);
HXLINE( 102)			{
HXLINE( 102)				int _g8 = 0;
HXDLIN( 102)				int _g9 = g->values;
HXDLIN( 102)				while((_g8 < _g9)){
HXLINE( 102)					_g8 = (_g8 + 1);
HXDLIN( 102)					int j = (_g8 - 1);
HXLINE( 103)					g->sortedOrder->__unsafe_set(j,p->__get(j).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->y);
            				}
            			}
HXLINE( 106)			::Array< ::Dynamic> this8 = ::Array_obj< ::Dynamic>::__new(g->values);
HXDLIN( 106)			g->_hx_set_neighbors(HX_CTX, this8);
HXLINE( 108)			{
HXLINE( 108)				int _g10 = 2;
HXDLIN( 108)				int _g11 = g->values;
HXDLIN( 108)				while((_g10 < _g11)){
HXLINE( 108)					_g10 = (_g10 + 1);
HXDLIN( 108)					int j = (_g10 - 1);
HXLINE( 109)					::Array< int > x = g->xlist;
HXDLIN( 109)					int low = -1;
HXDLIN( 109)					int high = 65536;
HXDLIN( 109)					int plow = 0;
HXDLIN( 109)					int phigh = 0;
HXDLIN( 109)					int _g = 0;
HXDLIN( 109)					int _g1 = j;
HXDLIN( 109)					while((_g < _g1)){
HXLINE( 109)						_g = (_g + 1);
HXDLIN( 109)						int i = (_g - 1);
HXDLIN( 109)						bool _hx_tmp;
HXDLIN( 109)						if ((( (int)(_hx_array_unsafe_get(x,i)) ) > low)) {
HXLINE( 109)							int _hx_tmp1 = ( (int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 109)							_hx_tmp = (_hx_tmp1 < ( (int)(_hx_array_unsafe_get(x,j)) ));
            						}
            						else {
HXLINE( 109)							_hx_tmp = false;
            						}
HXDLIN( 109)						if (_hx_tmp) {
HXLINE( 106)							plow = i;
HXDLIN( 106)							low = ( (int)(_hx_array_unsafe_get(x,i)) );
            						}
HXLINE( 109)						bool _hx_tmp1;
HXDLIN( 109)						if ((( (int)(_hx_array_unsafe_get(x,i)) ) < high)) {
HXLINE( 109)							int _hx_tmp = ( (int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 109)							_hx_tmp1 = (_hx_tmp > ( (int)(_hx_array_unsafe_get(x,j)) ));
            						}
            						else {
HXLINE( 109)							_hx_tmp1 = false;
            						}
HXDLIN( 109)						if (_hx_tmp1) {
HXLINE( 107)							phigh = i;
HXDLIN( 107)							high = ( (int)(_hx_array_unsafe_get(x,i)) );
            						}
            					}
HXLINE( 109)					int ne_low = plow;
HXDLIN( 109)					int ne_high = phigh;
HXLINE( 110)					{
HXLINE( 110)						::Array< ::Dynamic> this1 = g->neighbors;
HXDLIN( 110)						::Array< int > this2 = ::Array_obj< int >::__new(g->values);
HXDLIN( 110)						this1->__unsafe_set(j,this2);
            					}
HXLINE( 111)					( (::Array< int >)(_hx_array_unsafe_get(g->neighbors,j)) )->__unsafe_set(0,ne_low);
HXLINE( 112)					( (::Array< int >)(_hx_array_unsafe_get(g->neighbors,j)) )->__unsafe_set(1,ne_high);
            				}
            			}
            		}
HXLINE( 116)		return floor;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Floor_obj,read,return )


Floor_obj::Floor_obj()
{
}

void Floor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Floor);
	HX_MARK_MEMBER_NAME(floor0,"floor0");
	HX_MARK_MEMBER_NAME(floor1,"floor1");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Floor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(floor0,"floor0");
	HX_VISIT_MEMBER_NAME(floor1,"floor1");
	HX_VISIT_MEMBER_NAME(type,"type");
}

::hx::Val Floor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floor0") ) { return ::hx::Val( floor0 ); }
		if (HX_FIELD_EQ(inName,"floor1") ) { return ::hx::Val( floor1 ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Floor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

::hx::Val Floor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floor0") ) { _hx_set_floor0(HX_CTX_GET,inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Floor0 >()); return inValue; }
		if (HX_FIELD_EQ(inName,"floor1") ) { _hx_set_floor1(HX_CTX_GET,inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Floor1 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Floor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("floor0",e4,c0,60,41));
	outFields->push(HX_("floor1",e5,c0,60,41));
	outFields->push(HX_("type",ba,f2,08,4d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Floor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::audio2::ogg::vorbis::data::Floor0 */ ,(int)offsetof(Floor_obj,floor0),HX_("floor0",e4,c0,60,41)},
	{::hx::fsObject /*  ::kha::audio2::ogg::vorbis::data::Floor1 */ ,(int)offsetof(Floor_obj,floor1),HX_("floor1",e5,c0,60,41)},
	{::hx::fsInt,(int)offsetof(Floor_obj,type),HX_("type",ba,f2,08,4d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Floor_obj_sStaticStorageInfo = 0;
#endif

static ::String Floor_obj_sMemberFields[] = {
	HX_("floor0",e4,c0,60,41),
	HX_("floor1",e5,c0,60,41),
	HX_("type",ba,f2,08,4d),
	::String(null()) };

::hx::Class Floor_obj::__mClass;

static ::String Floor_obj_sStaticFields[] = {
	HX_("read",56,4b,a7,4b),
	::String(null())
};

void Floor_obj::__register()
{
	Floor_obj _hx_dummy;
	Floor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Floor_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Floor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Floor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Floor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Floor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Floor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data

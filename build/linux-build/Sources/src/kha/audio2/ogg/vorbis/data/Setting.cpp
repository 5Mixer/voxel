// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Setting
#include <hxinc/kha/audio2/ogg/vorbis/data/Setting.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ad1b29d747c0459c_9_boot,"kha.audio2.ogg.vorbis.data.Setting","boot",0x1876c2a0,"kha.audio2.ogg.vorbis.data.Setting.boot","kha/audio2/ogg/vorbis/data/Setting.hx",9,0x8963793f)
HX_LOCAL_STACK_FRAME(_hx_pos_ad1b29d747c0459c_10_boot,"kha.audio2.ogg.vorbis.data.Setting","boot",0x1876c2a0,"kha.audio2.ogg.vorbis.data.Setting.boot","kha/audio2/ogg/vorbis/data/Setting.hx",10,0x8963793f)
HX_LOCAL_STACK_FRAME(_hx_pos_ad1b29d747c0459c_11_boot,"kha.audio2.ogg.vorbis.data.Setting","boot",0x1876c2a0,"kha.audio2.ogg.vorbis.data.Setting.boot","kha/audio2/ogg/vorbis/data/Setting.hx",11,0x8963793f)
HX_LOCAL_STACK_FRAME(_hx_pos_ad1b29d747c0459c_12_boot,"kha.audio2.ogg.vorbis.data.Setting","boot",0x1876c2a0,"kha.audio2.ogg.vorbis.data.Setting.boot","kha/audio2/ogg/vorbis/data/Setting.hx",12,0x8963793f)
HX_LOCAL_STACK_FRAME(_hx_pos_ad1b29d747c0459c_13_boot,"kha.audio2.ogg.vorbis.data.Setting","boot",0x1876c2a0,"kha.audio2.ogg.vorbis.data.Setting.boot","kha/audio2/ogg/vorbis/data/Setting.hx",13,0x8963793f)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Setting_obj::__construct() { }

Dynamic Setting_obj::__CreateEmpty() { return new Setting_obj; }

void *Setting_obj::_hx_vtable = 0;

Dynamic Setting_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Setting_obj > _hx_result = new Setting_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Setting_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32771600;
}

int Setting_obj::MAX_CHANNELS;

int Setting_obj::PUSHDATA_CRC_COUNT;

int Setting_obj::FAST_HUFFMAN_LENGTH;

int Setting_obj::FAST_HUFFMAN_TABLE_SIZE;

int Setting_obj::FAST_HUFFMAN_TABLE_MASK;


Setting_obj::Setting_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Setting_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Setting_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Setting_obj::MAX_CHANNELS,HX_("MAX_CHANNELS",ab,9a,b0,a4)},
	{::hx::fsInt,(void *) &Setting_obj::PUSHDATA_CRC_COUNT,HX_("PUSHDATA_CRC_COUNT",69,37,15,f6)},
	{::hx::fsInt,(void *) &Setting_obj::FAST_HUFFMAN_LENGTH,HX_("FAST_HUFFMAN_LENGTH",9b,48,12,db)},
	{::hx::fsInt,(void *) &Setting_obj::FAST_HUFFMAN_TABLE_SIZE,HX_("FAST_HUFFMAN_TABLE_SIZE",27,9c,ff,32)},
	{::hx::fsInt,(void *) &Setting_obj::FAST_HUFFMAN_TABLE_MASK,HX_("FAST_HUFFMAN_TABLE_MASK",52,3c,02,2f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Setting_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Setting_obj::MAX_CHANNELS,"MAX_CHANNELS");
	HX_MARK_MEMBER_NAME(Setting_obj::PUSHDATA_CRC_COUNT,"PUSHDATA_CRC_COUNT");
	HX_MARK_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_LENGTH,"FAST_HUFFMAN_LENGTH");
	HX_MARK_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_SIZE,"FAST_HUFFMAN_TABLE_SIZE");
	HX_MARK_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_MASK,"FAST_HUFFMAN_TABLE_MASK");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Setting_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Setting_obj::MAX_CHANNELS,"MAX_CHANNELS");
	HX_VISIT_MEMBER_NAME(Setting_obj::PUSHDATA_CRC_COUNT,"PUSHDATA_CRC_COUNT");
	HX_VISIT_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_LENGTH,"FAST_HUFFMAN_LENGTH");
	HX_VISIT_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_SIZE,"FAST_HUFFMAN_TABLE_SIZE");
	HX_VISIT_MEMBER_NAME(Setting_obj::FAST_HUFFMAN_TABLE_MASK,"FAST_HUFFMAN_TABLE_MASK");
};

#endif

::hx::Class Setting_obj::__mClass;

static ::String Setting_obj_sStaticFields[] = {
	HX_("MAX_CHANNELS",ab,9a,b0,a4),
	HX_("PUSHDATA_CRC_COUNT",69,37,15,f6),
	HX_("FAST_HUFFMAN_LENGTH",9b,48,12,db),
	HX_("FAST_HUFFMAN_TABLE_SIZE",27,9c,ff,32),
	HX_("FAST_HUFFMAN_TABLE_MASK",52,3c,02,2f),
	::String(null())
};

void Setting_obj::__register()
{
	Setting_obj _hx_dummy;
	Setting_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.ogg.vorbis.data.Setting",c0,b8,dd,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Setting_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Setting_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Setting_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Setting_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Setting_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Setting_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Setting_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ad1b29d747c0459c_9_boot)
HXDLIN(   9)		MAX_CHANNELS = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ad1b29d747c0459c_10_boot)
HXDLIN(  10)		PUSHDATA_CRC_COUNT = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ad1b29d747c0459c_11_boot)
HXDLIN(  11)		FAST_HUFFMAN_LENGTH = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ad1b29d747c0459c_12_boot)
HXDLIN(  12)		FAST_HUFFMAN_TABLE_SIZE = 1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ad1b29d747c0459c_13_boot)
HXDLIN(  13)		FAST_HUFFMAN_TABLE_MASK = 1023;
            	}
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data

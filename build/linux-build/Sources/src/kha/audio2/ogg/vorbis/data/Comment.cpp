// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Comment
#include <hxinc/kha/audio2/ogg/vorbis/data/Comment.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_101_new,"kha.audio2.ogg.vorbis.data.Comment","new",0x21ab6601,"kha.audio2.ogg.vorbis.data.Comment.new","kha/audio2/ogg/vorbis/data/Comment.hx",101,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_12_get_title,"kha.audio2.ogg.vorbis.data.Comment","get_title",0xb5997650,"kha.audio2.ogg.vorbis.data.Comment.get_title","kha/audio2/ogg/vorbis/data/Comment.hx",12,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_17_get_loopStart,"kha.audio2.ogg.vorbis.data.Comment","get_loopStart",0xc780b016,"kha.audio2.ogg.vorbis.data.Comment.get_loopStart","kha/audio2/ogg/vorbis/data/Comment.hx",17,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_22_get_loopLength,"kha.audio2.ogg.vorbis.data.Comment","get_loopLength",0x622696b2,"kha.audio2.ogg.vorbis.data.Comment.get_loopLength","kha/audio2/ogg/vorbis/data/Comment.hx",22,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_27_get_version,"kha.audio2.ogg.vorbis.data.Comment","get_version",0xff33e5d0,"kha.audio2.ogg.vorbis.data.Comment.get_version","kha/audio2/ogg/vorbis/data/Comment.hx",27,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_32_get_album,"kha.audio2.ogg.vorbis.data.Comment","get_album",0xc6ea73e7,"kha.audio2.ogg.vorbis.data.Comment.get_album","kha/audio2/ogg/vorbis/data/Comment.hx",32,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_37_get_organization,"kha.audio2.ogg.vorbis.data.Comment","get_organization",0xaa4acbbb,"kha.audio2.ogg.vorbis.data.Comment.get_organization","kha/audio2/ogg/vorbis/data/Comment.hx",37,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_42_get_tracknumber,"kha.audio2.ogg.vorbis.data.Comment","get_tracknumber",0x04b3ca4c,"kha.audio2.ogg.vorbis.data.Comment.get_tracknumber","kha/audio2/ogg/vorbis/data/Comment.hx",42,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_47_get_performer,"kha.audio2.ogg.vorbis.data.Comment","get_performer",0x726b8806,"kha.audio2.ogg.vorbis.data.Comment.get_performer","kha/audio2/ogg/vorbis/data/Comment.hx",47,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_52_get_copyright,"kha.audio2.ogg.vorbis.data.Comment","get_copyright",0xf1fadcbf,"kha.audio2.ogg.vorbis.data.Comment.get_copyright","kha/audio2/ogg/vorbis/data/Comment.hx",52,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_57_get_license,"kha.audio2.ogg.vorbis.data.Comment","get_license",0x4c8ad239,"kha.audio2.ogg.vorbis.data.Comment.get_license","kha/audio2/ogg/vorbis/data/Comment.hx",57,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_62_get_artist,"kha.audio2.ogg.vorbis.data.Comment","get_artist",0xc67f330f,"kha.audio2.ogg.vorbis.data.Comment.get_artist","kha/audio2/ogg/vorbis/data/Comment.hx",62,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_67_get_description,"kha.audio2.ogg.vorbis.data.Comment","get_description",0x4ef0c3b4,"kha.audio2.ogg.vorbis.data.Comment.get_description","kha/audio2/ogg/vorbis/data/Comment.hx",67,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_72_get_genre,"kha.audio2.ogg.vorbis.data.Comment","get_genre",0x36ba88fb,"kha.audio2.ogg.vorbis.data.Comment.get_genre","kha/audio2/ogg/vorbis/data/Comment.hx",72,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_77_get_date,"kha.audio2.ogg.vorbis.data.Comment","get_date",0xf19f7476,"kha.audio2.ogg.vorbis.data.Comment.get_date","kha/audio2/ogg/vorbis/data/Comment.hx",77,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_82_get_location,"kha.audio2.ogg.vorbis.data.Comment","get_location",0x5cc3507d,"kha.audio2.ogg.vorbis.data.Comment.get_location","kha/audio2/ogg/vorbis/data/Comment.hx",82,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_87_get_contact,"kha.audio2.ogg.vorbis.data.Comment","get_contact",0x9bb67958,"kha.audio2.ogg.vorbis.data.Comment.get_contact","kha/audio2/ogg/vorbis/data/Comment.hx",87,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_92_get_isrc,"kha.audio2.ogg.vorbis.data.Comment","get_isrc",0xf4fb2c63,"kha.audio2.ogg.vorbis.data.Comment.get_isrc","kha/audio2/ogg/vorbis/data/Comment.hx",92,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_97_get_artists,"kha.audio2.ogg.vorbis.data.Comment","get_artists",0xe8cd7a84,"kha.audio2.ogg.vorbis.data.Comment.get_artists","kha/audio2/ogg/vorbis/data/Comment.hx",97,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_104_add,"kha.audio2.ogg.vorbis.data.Comment","add",0x21a187c2,"kha.audio2.ogg.vorbis.data.Comment.add","kha/audio2/ogg/vorbis/data/Comment.hx",104,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_113_getString,"kha.audio2.ogg.vorbis.data.Comment","getString",0xef3bb668,"kha.audio2.ogg.vorbis.data.Comment.getString","kha/audio2/ogg/vorbis/data/Comment.hx",113,0x7ddd0bd0)
HX_LOCAL_STACK_FRAME(_hx_pos_aadd6cb2c0f68941_122_getArray,"kha.audio2.ogg.vorbis.data.Comment","getArray",0xb4e7dfe2,"kha.audio2.ogg.vorbis.data.Comment.getArray","kha/audio2/ogg/vorbis/data/Comment.hx",122,0x7ddd0bd0)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Comment_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_101_new)
HXDLIN( 101)		this->_hx_set_data(HX_CTX,  ::haxe::ds::StringMap_obj::__alloc( HX_CTX ));
            	}

Dynamic Comment_obj::__CreateEmpty() { return new Comment_obj; }

void *Comment_obj::_hx_vtable = 0;

Dynamic Comment_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Comment_obj > _hx_result = new Comment_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Comment_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1236ebb3;
}

::String Comment_obj::get_title(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_12_get_title)
HXDLIN(  12)		return this->getString(HX_("title",98,15,3b,10));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_title,return )

 ::Dynamic Comment_obj::get_loopStart(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_17_get_loopStart)
HXDLIN(  17)		return ::Std_obj::parseInt(this->getString(HX_("loopstart",7e,23,8a,1e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_loopStart,return )

 ::Dynamic Comment_obj::get_loopLength(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_22_get_loopLength)
HXDLIN(  22)		return ::Std_obj::parseInt(this->getString(HX_("looplength",4a,1e,62,33)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_loopLength,return )

::String Comment_obj::get_version(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_27_get_version)
HXDLIN(  27)		return this->getString(HX_("version",18,e7,f1,7c));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_version,return )

::String Comment_obj::get_album(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_32_get_album)
HXDLIN(  32)		return this->getString(HX_("album",2f,13,8c,21));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_album,return )

::String Comment_obj::get_organization(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_37_get_organization)
HXDLIN(  37)		return this->getString(HX_("organization",73,25,db,c0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_organization,return )

::String Comment_obj::get_tracknumber(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_42_get_tracknumber)
HXDLIN(  42)		return this->getString(HX_("tracknumber",94,0f,e0,14));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_tracknumber,return )

::String Comment_obj::get_performer(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_47_get_performer)
HXDLIN(  47)		return this->getString(HX_("performer",4e,6b,a2,5c));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_performer,return )

::String Comment_obj::get_copyright(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_52_get_copyright)
HXDLIN(  52)		return this->getString(HX_("copyright",07,c0,31,dc));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_copyright,return )

::String Comment_obj::get_license(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_57_get_license)
HXDLIN(  57)		return this->getString(HX_("license",81,d3,48,ca));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_license,return )

::String Comment_obj::get_artist(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_62_get_artist)
HXDLIN(  62)		return this->getString(HX_("artist",c7,f2,48,b9));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_artist,return )

::String Comment_obj::get_description(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_67_get_description)
HXDLIN(  67)		return this->getString(HX_("description",fc,08,1d,5f));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_description,return )

::String Comment_obj::get_genre(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_72_get_genre)
HXDLIN(  72)		return this->getString(HX_("genre",43,28,5c,91));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_genre,return )

::String Comment_obj::get_date(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_77_get_date)
HXDLIN(  77)		return this->getString(HX_("date",2e,56,63,42));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_date,return )

::String Comment_obj::get_location(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_82_get_location)
HXDLIN(  82)		return this->getString(HX_("location",35,6e,46,e5));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_location,return )

::String Comment_obj::get_contact(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_87_get_contact)
HXDLIN(  87)		return this->getString(HX_("contact",a0,7a,74,19));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_contact,return )

::String Comment_obj::get_isrc(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_92_get_isrc)
HXDLIN(  92)		return this->getString(HX_("isrc",1b,0e,bf,45));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_isrc,return )

::Array< ::String > Comment_obj::get_artists(){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_97_get_artists)
HXDLIN(  97)		return this->getArray(HX_("artist",c7,f2,48,b9));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Comment_obj,get_artists,return )

void Comment_obj::add(::String key,::String value){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_104_add)
HXLINE( 105)		key = key.toLowerCase();
HXLINE( 106)		if (this->data->exists(key)) {
HXLINE( 107)			( (::Array< ::String >)(this->data->get(key)) )->push(value);
            		}
            		else {
HXLINE( 109)			::Array< ::String > v = ::Array_obj< ::String >::__new(1)->init(0,value);
HXDLIN( 109)			this->data->set(key,v);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Comment_obj,add,(void))

::String Comment_obj::getString(::String key){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_113_getString)
HXLINE( 114)		key = key.toLowerCase();
HXLINE( 115)		if (this->data->exists(key)) {
HXLINE( 116)			return ( (::String)(this->data->get(key)->__GetItem(0)) );
            		}
            		else {
HXLINE( 118)			return null();
            		}
HXLINE( 115)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Comment_obj,getString,return )

::Array< ::String > Comment_obj::getArray(::String key){
            	HX_STACKFRAME(&_hx_pos_aadd6cb2c0f68941_122_getArray)
HXLINE( 123)		key = key.toLowerCase();
HXLINE( 124)		if (this->data->exists(key)) {
HXLINE( 125)			return ( (::Array< ::String >)(this->data->get(key)) );
            		}
            		else {
HXLINE( 127)			return null();
            		}
HXLINE( 124)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Comment_obj,getArray,return )


::hx::ObjectPtr< Comment_obj > Comment_obj::__new() {
	::hx::ObjectPtr< Comment_obj > __this = new Comment_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Comment_obj > Comment_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Comment_obj *__this = (Comment_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Comment_obj), true, "kha.audio2.ogg.vorbis.data.Comment"));
	*(void **)__this = Comment_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Comment_obj::Comment_obj()
{
}

void Comment_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Comment);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void Comment_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
}

::hx::Val Comment_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"date") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_date() ); }
		if (HX_FIELD_EQ(inName,"isrc") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isrc() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_title() ); }
		if (HX_FIELD_EQ(inName,"album") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_album() ); }
		if (HX_FIELD_EQ(inName,"genre") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_genre() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"artist") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_artist() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_version() ); }
		if (HX_FIELD_EQ(inName,"license") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_license() ); }
		if (HX_FIELD_EQ(inName,"contact") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_contact() ); }
		if (HX_FIELD_EQ(inName,"artists") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_artists() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_date") ) { return ::hx::Val( get_date_dyn() ); }
		if (HX_FIELD_EQ(inName,"location") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_location() ); }
		if (HX_FIELD_EQ(inName,"get_isrc") ) { return ::hx::Val( get_isrc_dyn() ); }
		if (HX_FIELD_EQ(inName,"getArray") ) { return ::hx::Val( getArray_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_title") ) { return ::hx::Val( get_title_dyn() ); }
		if (HX_FIELD_EQ(inName,"loopStart") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_loopStart() ); }
		if (HX_FIELD_EQ(inName,"get_album") ) { return ::hx::Val( get_album_dyn() ); }
		if (HX_FIELD_EQ(inName,"performer") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_performer() ); }
		if (HX_FIELD_EQ(inName,"copyright") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_copyright() ); }
		if (HX_FIELD_EQ(inName,"get_genre") ) { return ::hx::Val( get_genre_dyn() ); }
		if (HX_FIELD_EQ(inName,"getString") ) { return ::hx::Val( getString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loopLength") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_loopLength() ); }
		if (HX_FIELD_EQ(inName,"get_artist") ) { return ::hx::Val( get_artist_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_version") ) { return ::hx::Val( get_version_dyn() ); }
		if (HX_FIELD_EQ(inName,"tracknumber") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_tracknumber() ); }
		if (HX_FIELD_EQ(inName,"get_license") ) { return ::hx::Val( get_license_dyn() ); }
		if (HX_FIELD_EQ(inName,"description") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_description() ); }
		if (HX_FIELD_EQ(inName,"get_contact") ) { return ::hx::Val( get_contact_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_artists") ) { return ::hx::Val( get_artists_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"organization") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_organization() ); }
		if (HX_FIELD_EQ(inName,"get_location") ) { return ::hx::Val( get_location_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_loopStart") ) { return ::hx::Val( get_loopStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_performer") ) { return ::hx::Val( get_performer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_copyright") ) { return ::hx::Val( get_copyright_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_loopLength") ) { return ::hx::Val( get_loopLength_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_tracknumber") ) { return ::hx::Val( get_tracknumber_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_description") ) { return ::hx::Val( get_description_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_organization") ) { return ::hx::Val( get_organization_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Comment_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { _hx_set_data(HX_CTX_GET,inValue.Cast<  ::haxe::ds::StringMap >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Comment_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("loopStart",5e,93,b7,b1));
	outFields->push(HX_("loopLength",6a,92,f6,67));
	outFields->push(HX_("version",18,e7,f1,7c));
	outFields->push(HX_("album",2f,13,8c,21));
	outFields->push(HX_("organization",73,25,db,c0));
	outFields->push(HX_("tracknumber",94,0f,e0,14));
	outFields->push(HX_("performer",4e,6b,a2,5c));
	outFields->push(HX_("copyright",07,c0,31,dc));
	outFields->push(HX_("license",81,d3,48,ca));
	outFields->push(HX_("artist",c7,f2,48,b9));
	outFields->push(HX_("description",fc,08,1d,5f));
	outFields->push(HX_("genre",43,28,5c,91));
	outFields->push(HX_("date",2e,56,63,42));
	outFields->push(HX_("location",35,6e,46,e5));
	outFields->push(HX_("contact",a0,7a,74,19));
	outFields->push(HX_("isrc",1b,0e,bf,45));
	outFields->push(HX_("artists",cc,7b,8b,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Comment_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Comment_obj,data),HX_("data",2a,56,63,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Comment_obj_sStaticStorageInfo = 0;
#endif

static ::String Comment_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("get_title",ef,71,e4,53),
	HX_("get_loopStart",35,67,1b,73),
	HX_("get_loopLength",b3,1a,ec,dd),
	HX_("get_version",2f,47,ec,02),
	HX_("get_album",86,6f,35,65),
	HX_("get_organization",fc,11,7a,c5),
	HX_("get_tracknumber",2b,c7,c1,d5),
	HX_("get_performer",25,3f,06,1e),
	HX_("get_copyright",de,93,95,9d),
	HX_("get_license",98,33,43,50),
	HX_("get_artist",90,62,d0,a9),
	HX_("get_description",93,c0,fe,1f),
	HX_("get_genre",9a,84,05,d5),
	HX_("get_date",b7,11,1e,c2),
	HX_("get_location",3e,22,60,9a),
	HX_("get_contact",b7,da,6e,9f),
	HX_("get_isrc",a4,c9,79,c5),
	HX_("get_artists",e3,db,85,ec),
	HX_("add",21,f2,49,00),
	HX_("getString",07,b2,86,8d),
	HX_("getArray",23,7d,66,85),
	::String(null()) };

::hx::Class Comment_obj::__mClass;

void Comment_obj::__register()
{
	Comment_obj _hx_dummy;
	Comment_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.ogg.vorbis.data.Comment",8f,51,a6,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Comment_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Comment_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Comment_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Comment_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data

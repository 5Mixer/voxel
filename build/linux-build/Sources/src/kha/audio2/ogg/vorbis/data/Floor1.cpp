// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor1
#include <hxinc/kha/audio2/ogg/vorbis/data/Floor1.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24a5369a917c8940_149_new,"kha.audio2.ogg.vorbis.data.Floor1","new",0x5ac3ff27,"kha.audio2.ogg.vorbis.data.Floor1.new","kha/audio2/ogg/vorbis/data/Floor.hx",149,0x2f4d0043)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Floor1_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_24a5369a917c8940_149_new)
            	}

Dynamic Floor1_obj::__CreateEmpty() { return new Floor1_obj; }

void *Floor1_obj::_hx_vtable = 0;

Dynamic Floor1_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Floor1_obj > _hx_result = new Floor1_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Floor1_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x432cd611;
}


Floor1_obj::Floor1_obj()
{
}

void Floor1_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Floor1);
	HX_MARK_MEMBER_NAME(partitions,"partitions");
	HX_MARK_MEMBER_NAME(partitionClassList,"partitionClassList");
	HX_MARK_MEMBER_NAME(classDimensions,"classDimensions");
	HX_MARK_MEMBER_NAME(classSubclasses,"classSubclasses");
	HX_MARK_MEMBER_NAME(classMasterbooks,"classMasterbooks");
	HX_MARK_MEMBER_NAME(subclassBooks,"subclassBooks");
	HX_MARK_MEMBER_NAME(xlist,"xlist");
	HX_MARK_MEMBER_NAME(sortedOrder,"sortedOrder");
	HX_MARK_MEMBER_NAME(neighbors,"neighbors");
	HX_MARK_MEMBER_NAME(floor1Multiplier,"floor1Multiplier");
	HX_MARK_MEMBER_NAME(rangebits,"rangebits");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_END_CLASS();
}

void Floor1_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(partitions,"partitions");
	HX_VISIT_MEMBER_NAME(partitionClassList,"partitionClassList");
	HX_VISIT_MEMBER_NAME(classDimensions,"classDimensions");
	HX_VISIT_MEMBER_NAME(classSubclasses,"classSubclasses");
	HX_VISIT_MEMBER_NAME(classMasterbooks,"classMasterbooks");
	HX_VISIT_MEMBER_NAME(subclassBooks,"subclassBooks");
	HX_VISIT_MEMBER_NAME(xlist,"xlist");
	HX_VISIT_MEMBER_NAME(sortedOrder,"sortedOrder");
	HX_VISIT_MEMBER_NAME(neighbors,"neighbors");
	HX_VISIT_MEMBER_NAME(floor1Multiplier,"floor1Multiplier");
	HX_VISIT_MEMBER_NAME(rangebits,"rangebits");
	HX_VISIT_MEMBER_NAME(values,"values");
}

::hx::Val Floor1_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"xlist") ) { return ::hx::Val( xlist ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return ::hx::Val( values ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"neighbors") ) { return ::hx::Val( neighbors ); }
		if (HX_FIELD_EQ(inName,"rangebits") ) { return ::hx::Val( rangebits ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"partitions") ) { return ::hx::Val( partitions ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sortedOrder") ) { return ::hx::Val( sortedOrder ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subclassBooks") ) { return ::hx::Val( subclassBooks ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"classDimensions") ) { return ::hx::Val( classDimensions ); }
		if (HX_FIELD_EQ(inName,"classSubclasses") ) { return ::hx::Val( classSubclasses ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"classMasterbooks") ) { return ::hx::Val( classMasterbooks ); }
		if (HX_FIELD_EQ(inName,"floor1Multiplier") ) { return ::hx::Val( floor1Multiplier ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"partitionClassList") ) { return ::hx::Val( partitionClassList ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Floor1_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"xlist") ) { _hx_set_xlist(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"neighbors") ) { _hx_set_neighbors(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"rangebits") ) { rangebits=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"partitions") ) { partitions=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sortedOrder") ) { _hx_set_sortedOrder(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subclassBooks") ) { _hx_set_subclassBooks(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"classDimensions") ) { _hx_set_classDimensions(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		if (HX_FIELD_EQ(inName,"classSubclasses") ) { _hx_set_classSubclasses(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"classMasterbooks") ) { _hx_set_classMasterbooks(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		if (HX_FIELD_EQ(inName,"floor1Multiplier") ) { floor1Multiplier=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"partitionClassList") ) { _hx_set_partitionClassList(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Floor1_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("partitions",49,0b,ee,69));
	outFields->push(HX_("partitionClassList",6c,ed,99,48));
	outFields->push(HX_("classDimensions",a5,b0,96,6c));
	outFields->push(HX_("classSubclasses",7e,c7,a0,a8));
	outFields->push(HX_("classMasterbooks",f0,2e,f5,83));
	outFields->push(HX_("subclassBooks",52,d6,30,b1));
	outFields->push(HX_("xlist",d6,b8,c8,5f));
	outFields->push(HX_("sortedOrder",11,f0,86,4a));
	outFields->push(HX_("neighbors",41,df,79,94));
	outFields->push(HX_("floor1Multiplier",c6,9c,90,c8));
	outFields->push(HX_("rangebits",43,c3,28,11));
	outFields->push(HX_("values",e2,03,b7,4f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Floor1_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Floor1_obj,partitions),HX_("partitions",49,0b,ee,69)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Floor1_obj,partitionClassList),HX_("partitionClassList",6c,ed,99,48)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Floor1_obj,classDimensions),HX_("classDimensions",a5,b0,96,6c)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Floor1_obj,classSubclasses),HX_("classSubclasses",7e,c7,a0,a8)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Floor1_obj,classMasterbooks),HX_("classMasterbooks",f0,2e,f5,83)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Floor1_obj,subclassBooks),HX_("subclassBooks",52,d6,30,b1)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Floor1_obj,xlist),HX_("xlist",d6,b8,c8,5f)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Floor1_obj,sortedOrder),HX_("sortedOrder",11,f0,86,4a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Floor1_obj,neighbors),HX_("neighbors",41,df,79,94)},
	{::hx::fsInt,(int)offsetof(Floor1_obj,floor1Multiplier),HX_("floor1Multiplier",c6,9c,90,c8)},
	{::hx::fsInt,(int)offsetof(Floor1_obj,rangebits),HX_("rangebits",43,c3,28,11)},
	{::hx::fsInt,(int)offsetof(Floor1_obj,values),HX_("values",e2,03,b7,4f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Floor1_obj_sStaticStorageInfo = 0;
#endif

static ::String Floor1_obj_sMemberFields[] = {
	HX_("partitions",49,0b,ee,69),
	HX_("partitionClassList",6c,ed,99,48),
	HX_("classDimensions",a5,b0,96,6c),
	HX_("classSubclasses",7e,c7,a0,a8),
	HX_("classMasterbooks",f0,2e,f5,83),
	HX_("subclassBooks",52,d6,30,b1),
	HX_("xlist",d6,b8,c8,5f),
	HX_("sortedOrder",11,f0,86,4a),
	HX_("neighbors",41,df,79,94),
	HX_("floor1Multiplier",c6,9c,90,c8),
	HX_("rangebits",43,c3,28,11),
	HX_("values",e2,03,b7,4f),
	::String(null()) };

::hx::Class Floor1_obj::__mClass;

void Floor1_obj::__register()
{
	Floor1_obj _hx_dummy;
	Floor1_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.ogg.vorbis.data.Floor1",b5,df,a5,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Floor1_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Floor1_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Floor1_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Floor1_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data

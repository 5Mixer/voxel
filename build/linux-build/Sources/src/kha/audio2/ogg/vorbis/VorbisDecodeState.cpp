// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <hxinc/haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <hxinc/haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <hxinc/haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <hxinc/haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_tools_Crc32
#include <hxinc/kha/audio2/ogg/tools/Crc32.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <hxinc/kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis__VorbisDecodeState_FindPageResult
#include <hxinc/kha/audio2/ogg/vorbis/_VorbisDecodeState/FindPageResult.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <hxinc/kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <hxinc/kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mode
#include <hxinc/kha/audio2/ogg/vorbis/data/Mode.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Page
#include <hxinc/kha/audio2/ogg/vorbis/data/Page.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ProbedPage
#include <hxinc/kha/audio2/ogg/vorbis/data/ProbedPage.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <hxinc/kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <hxinc/kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_687b22a8d42715b8_27_new,"kha.audio2.ogg.vorbis.VorbisDecodeState","new",0xe15b5a2e,"kha.audio2.ogg.vorbis.VorbisDecodeState.new","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",27,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_78_setup,"kha.audio2.ogg.vorbis.VorbisDecodeState","setup",0x5387c7cb,"kha.audio2.ogg.vorbis.VorbisDecodeState.setup","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",78,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_119_clone,"kha.audio2.ogg.vorbis.VorbisDecodeState","clone",0x21bb2cab,"kha.audio2.ogg.vorbis.VorbisDecodeState.clone","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",119,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_154_next,"kha.audio2.ogg.vorbis.VorbisDecodeState","next",0x4e938f65,"kha.audio2.ogg.vorbis.VorbisDecodeState.next","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",154,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_189_startPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","startPacket",0x0af9bd58,"kha.audio2.ogg.vorbis.VorbisDecodeState.startPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",189,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_203_maybeStartPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","maybeStartPacket",0x5a5cf834,"kha.audio2.ogg.vorbis.VorbisDecodeState.maybeStartPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",203,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_233_readBits,"kha.audio2.ogg.vorbis.VorbisDecodeState","readBits",0xb09b00ee,"kha.audio2.ogg.vorbis.VorbisDecodeState.readBits","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",233,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_272_readPacketRaw,"kha.audio2.ogg.vorbis.VorbisDecodeState","readPacketRaw",0xa4b12c58,"kha.audio2.ogg.vorbis.VorbisDecodeState.readPacketRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",272,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_282_readPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","readPacket",0x4097a770,"kha.audio2.ogg.vorbis.VorbisDecodeState.readPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",282,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_289_flushPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","flushPacket",0x3e67a13a,"kha.audio2.ogg.vorbis.VorbisDecodeState.flushPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",289,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_295_vorbisValidate,"kha.audio2.ogg.vorbis.VorbisDecodeState","vorbisValidate",0x2e5ee7fb,"kha.audio2.ogg.vorbis.VorbisDecodeState.vorbisValidate","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",295,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_306_firstPageValidate,"kha.audio2.ogg.vorbis.VorbisDecodeState","firstPageValidate",0xa72bf0a3,"kha.audio2.ogg.vorbis.VorbisDecodeState.firstPageValidate","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",306,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_316_startFirstDecode,"kha.audio2.ogg.vorbis.VorbisDecodeState","startFirstDecode",0xf83b15ae,"kha.audio2.ogg.vorbis.VorbisDecodeState.startFirstDecode","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",316,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_323_capturePattern,"kha.audio2.ogg.vorbis.VorbisDecodeState","capturePattern",0x38c5675c,"kha.audio2.ogg.vorbis.VorbisDecodeState.capturePattern","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",323,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_330_skip,"kha.audio2.ogg.vorbis.VorbisDecodeState","skip",0x51e620f1,"kha.audio2.ogg.vorbis.VorbisDecodeState.skip","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",330,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_335_prepHuffman,"kha.audio2.ogg.vorbis.VorbisDecodeState","prepHuffman",0x69ac478e,"kha.audio2.ogg.vorbis.VorbisDecodeState.prepHuffman","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",335,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_351_decode,"kha.audio2.ogg.vorbis.VorbisDecodeState","decode",0xb8ab6820,"kha.audio2.ogg.vorbis.VorbisDecodeState.decode","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",351,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_360_decodeRaw,"kha.audio2.ogg.vorbis.VorbisDecodeState","decodeRaw",0x97caf9a8,"kha.audio2.ogg.vorbis.VorbisDecodeState.decodeRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",360,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_385_isLastByte,"kha.audio2.ogg.vorbis.VorbisDecodeState","isLastByte",0xb29eb67a,"kha.audio2.ogg.vorbis.VorbisDecodeState.isLastByte","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",385,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_389_finishDecodePacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","finishDecodePacket",0xed4f2a3b,"kha.audio2.ogg.vorbis.VorbisDecodeState.finishDecodePacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",389,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_464_readInt32,"kha.audio2.ogg.vorbis.VorbisDecodeState","readInt32",0xe221b866,"kha.audio2.ogg.vorbis.VorbisDecodeState.readInt32","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",464,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_470_readByte,"kha.audio2.ogg.vorbis.VorbisDecodeState","readByte",0xb0a724f0,"kha.audio2.ogg.vorbis.VorbisDecodeState.readByte","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",470,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_475_read,"kha.audio2.ogg.vorbis.VorbisDecodeState","read",0x513855c8,"kha.audio2.ogg.vorbis.VorbisDecodeState.read","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",475,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_484_readBytes,"kha.audio2.ogg.vorbis.VorbisDecodeState","readBytes",0xe1992d83,"kha.audio2.ogg.vorbis.VorbisDecodeState.readBytes","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",484,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_490_readString,"kha.audio2.ogg.vorbis.VorbisDecodeState","readString",0x6e2f78b9,"kha.audio2.ogg.vorbis.VorbisDecodeState.readString","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",490,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_495_getSampleNumber,"kha.audio2.ogg.vorbis.VorbisDecodeState","getSampleNumber",0xfc673317,"kha.audio2.ogg.vorbis.VorbisDecodeState.getSampleNumber","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",495,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_569_forcePageResync,"kha.audio2.ogg.vorbis.VorbisDecodeState","forcePageResync",0xba9c57d6,"kha.audio2.ogg.vorbis.VorbisDecodeState.forcePageResync","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",569,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_574_setInputOffset,"kha.audio2.ogg.vorbis.VorbisDecodeState","setInputOffset",0x153efbad,"kha.audio2.ogg.vorbis.VorbisDecodeState.setInputOffset","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",574,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_578_findPage,"kha.audio2.ogg.vorbis.VorbisDecodeState","findPage",0xe472129a,"kha.audio2.ogg.vorbis.VorbisDecodeState.findPage","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",578,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_652_analyzePage,"kha.audio2.ogg.vorbis.VorbisDecodeState","analyzePage",0xfe54df89,"kha.audio2.ogg.vorbis.VorbisDecodeState.analyzePage","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",652,0x1d2e7902)
static const int _hx_array_data_19036b3c_52[] = {
	(int)0,(int)1,(int)2,(int)2,(int)3,(int)3,(int)3,(int)3,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_785_decodeScalarRaw,"kha.audio2.ogg.vorbis.VorbisDecodeState","decodeScalarRaw",0x3c61dddc,"kha.audio2.ogg.vorbis.VorbisDecodeState.decodeScalarRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",785,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_29_boot,"kha.audio2.ogg.vorbis.VorbisDecodeState","boot",0x46ac8ea4,"kha.audio2.ogg.vorbis.VorbisDecodeState.boot","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",29,0x1d2e7902)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{

void VorbisDecodeState_obj::__construct( ::haxe::io::Input input){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_27_new)
HXLINE(  54)		this->nextSeg = 0;
HXLINE(  53)		this->firstDecode = false;
HXLINE(  40)		this->bytesInSeg = 0;
HXLINE(  35)		this->validBits = 0;
HXLINE(  72)		this->_hx_set_input(HX_CTX, input);
HXLINE(  73)		this->inputPosition = 0;
HXLINE(  74)		this->_hx_set_page(HX_CTX,  ::kha::audio2::ogg::vorbis::data::Page_obj::__alloc( HX_CTX ));
HXLINE(  75)		::kha::audio2::ogg::tools::Crc32_obj::init();
            	}

Dynamic VorbisDecodeState_obj::__CreateEmpty() { return new VorbisDecodeState_obj; }

void *VorbisDecodeState_obj::_hx_vtable = 0;

Dynamic VorbisDecodeState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VorbisDecodeState_obj > _hx_result = new VorbisDecodeState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VorbisDecodeState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2319f7ee;
}

void VorbisDecodeState_obj::setup(int loc0,int loc1){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_78_setup)
HXLINE(  79)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  79)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN(  79)		int segmentCount = this->input->readByte();
HXLINE(  80)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  80)		_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + segmentCount);
HXDLIN(  80)		::Array< int > this1 = ::Array_obj< int >::__new(segmentCount);
HXDLIN(  80)		::Array< int > vec = this1;
HXDLIN(  80)		{
HXLINE(  80)			int _g = 0;
HXDLIN(  80)			int _g1 = segmentCount;
HXDLIN(  80)			while((_g < _g1)){
HXLINE(  80)				_g = (_g + 1);
HXDLIN(  80)				int i = (_g - 1);
HXDLIN(  80)				{
HXLINE(  80)					int val = this->input->readByte();
HXDLIN(  80)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN(  80)		this->_hx_set_segments(HX_CTX, vec);
HXLINE(  83)		this->endSegWithKnownLoc = -2;
HXLINE(  84)		bool _hx_tmp2;
HXDLIN(  84)		if ((loc0 == -1)) {
HXLINE(  84)			_hx_tmp2 = (loc1 != -1);
            		}
            		else {
HXLINE(  84)			_hx_tmp2 = true;
            		}
HXDLIN(  84)		if (_hx_tmp2) {
HXLINE(  85)			int i = (segmentCount - 1);
HXLINE(  86)			while((i >= 0)){
HXLINE(  87)				if (::hx::IsLess( _hx_array_unsafe_get(this->segments,i),255 )) {
HXLINE(  88)					goto _hx_goto_2;
            				}
HXLINE(  90)				if ((i >= 0)) {
HXLINE(  91)					this->endSegWithKnownLoc = i;
HXLINE(  92)					this->knownLocForPacket = loc0;
            				}
HXLINE(  94)				i = (i - 1);
            			}
            			_hx_goto_2:;
            		}
HXLINE(  98)		if (this->firstDecode) {
HXLINE(  99)			int i = 0;
HXLINE( 100)			int len = 0;
HXLINE( 101)			 ::kha::audio2::ogg::vorbis::data::ProbedPage p =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__alloc( HX_CTX );
HXLINE( 103)			{
HXLINE( 103)				int _g = 0;
HXDLIN( 103)				int _g1 = segmentCount;
HXDLIN( 103)				while((_g < _g1)){
HXLINE( 103)					_g = (_g + 1);
HXDLIN( 103)					int i = (_g - 1);
HXLINE( 104)					len = (len + _hx_array_unsafe_get(this->segments,i));
            				}
            			}
HXLINE( 106)			len = (len + (27 + segmentCount));
HXLINE( 108)			p->pageStart = this->firstAudioPageOffset;
HXLINE( 109)			p->pageEnd = (p->pageStart + len);
HXLINE( 110)			p->_hx_set_firstDecodedSample(HX_CTX, 0);
HXLINE( 111)			p->_hx_set_lastDecodedSample(HX_CTX, loc0);
HXLINE( 112)			this->_hx_set_pFirst(HX_CTX, p);
            		}
HXLINE( 115)		this->nextSeg = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,setup,(void))

 ::kha::audio2::ogg::vorbis::VorbisDecodeState VorbisDecodeState_obj::clone( ::Dynamic seekFunc){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_119_clone)
HXLINE( 120)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState state = ( ( ::kha::audio2::ogg::vorbis::VorbisDecodeState)(::Type_obj::createEmptyInstance(::hx::ClassOf< ::kha::audio2::ogg::vorbis::VorbisDecodeState >())) );
HXLINE( 122)		seekFunc(this->inputPosition);
HXLINE( 123)		state->_hx_set_input(HX_CTX, this->input);
HXLINE( 126)		state->eof = this->eof;
HXLINE( 127)		state->validBits = this->validBits;
HXLINE( 128)		state->discardSamplesDeferred = this->discardSamplesDeferred;
HXLINE( 129)		state->firstDecode = this->firstDecode;
HXLINE( 130)		state->nextSeg = this->nextSeg;
HXLINE( 131)		state->bytesInSeg = this->bytesInSeg;
HXLINE( 132)		state->acc = state->acc;
HXLINE( 133)		state->lastSeg = this->lastSeg;
HXLINE( 134)		state->lastSegWhich = this->lastSegWhich;
HXLINE( 135)		state->currentLoc = this->currentLoc;
HXLINE( 136)		state->currentLocValid = this->currentLocValid;
HXLINE( 137)		state->inputPosition = this->inputPosition;
HXLINE( 138)		state->firstAudioPageOffset = this->firstAudioPageOffset;
HXLINE( 141)		state->_hx_set_error(HX_CTX, this->error);
HXLINE( 142)		state->_hx_set_segments(HX_CTX, this->segments);
HXLINE( 143)		state->_hx_set_pFirst(HX_CTX, this->pFirst);
HXLINE( 144)		state->_hx_set_pLast(HX_CTX, this->pLast);
HXLINE( 147)		state->_hx_set_page(HX_CTX, this->page->clone());
HXLINE( 149)		return state;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,clone,return )

int VorbisDecodeState_obj::next(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_154_next)
HXLINE( 155)		if (this->lastSeg) {
HXLINE( 156)			return 0;
            		}
HXLINE( 159)		if ((this->nextSeg == -1)) {
HXLINE( 160)			this->lastSegWhich = (this->segments->length - 1);
HXLINE( 162)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 163)				this->page->start(::hx::ObjectPtr<OBJ_>(this));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					{
HXLINE(   1)						null();
            					}
HXDLIN(   1)					 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 162)					if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::kha::audio2::ogg::vorbis::data::ReaderError >())) {
HXLINE(   1)						 ::kha::audio2::ogg::vorbis::data::ReaderError e = ( ( ::kha::audio2::ogg::vorbis::data::ReaderError)(_g1) );
HXLINE( 165)						this->lastSeg = true;
HXLINE( 166)						this->_hx_set_error(HX_CTX, e);
HXLINE( 167)						return 0;
            					}
            					else {
HXLINE( 162)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 170)			if (((this->page->flag & 1) == 0)) {
HXLINE( 171)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CONTINUED_PACKET_FLAG_INVALID_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),171,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("next",f3,84,02,49)))));
            			}
            		}
HXLINE( 175)		int len = ( (int)(_hx_array_unsafe_get(this->segments,this->nextSeg++)) );
HXLINE( 176)		if ((len < 255)) {
HXLINE( 177)			this->lastSeg = true;
HXLINE( 178)			this->lastSegWhich = (this->nextSeg - 1);
            		}
HXLINE( 180)		if ((this->nextSeg >= this->segments->length)) {
HXLINE( 181)			this->nextSeg = -1;
            		}
HXLINE( 185)		this->bytesInSeg = len;
HXLINE( 186)		return len;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,next,return )

void VorbisDecodeState_obj::startPacket(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_189_startPacket)
HXLINE( 190)		while((this->nextSeg == -1)){
HXLINE( 191)			this->page->start(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 192)			if (((this->page->flag & 1) != 0)) {
HXLINE( 193)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),193,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("startPacket",8a,b5,7e,5b)))));
            			}
            		}
HXLINE( 197)		this->lastSeg = false;
HXLINE( 198)		this->validBits = 0;
HXLINE( 199)		this->bytesInSeg = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,startPacket,(void))

bool VorbisDecodeState_obj::maybeStartPacket(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_203_maybeStartPacket)
HXLINE( 204)		if ((this->nextSeg == -1)) {
HXLINE( 205)			bool eof = false;
HXLINE( 206)			int x;
HXDLIN( 206)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 207)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState x1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)				x1->inputPosition = (x1->inputPosition + 1);
HXLINE( 206)				x = this->input->readByte();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					{
HXLINE(   1)						null();
            					}
HXLINE( 206)					if (::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 209)						eof = true;
HXLINE( 206)						x = 0;
            					}
            					else {
HXLINE( 206)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 213)			if (eof) {
HXLINE( 214)				return false;
            			}
HXLINE( 217)			bool _hx_tmp;
HXDLIN( 217)			bool _hx_tmp1;
HXDLIN( 217)			bool _hx_tmp2;
HXDLIN( 217)			if ((x == 79)) {
HXLINE( 217)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 217)				_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 217)				_hx_tmp2 = (this->input->readByte() != 103);
            			}
            			else {
HXLINE( 217)				_hx_tmp2 = true;
            			}
HXDLIN( 217)			if (!(_hx_tmp2)) {
HXLINE( 217)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 217)				_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 217)				_hx_tmp1 = (this->input->readByte() != 103);
            			}
            			else {
HXLINE( 217)				_hx_tmp1 = true;
            			}
HXDLIN( 217)			if (!(_hx_tmp1)) {
HXLINE( 217)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 217)				_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + 1);
HXDLIN( 217)				_hx_tmp = (this->input->readByte() != 83);
            			}
            			else {
HXLINE( 217)				_hx_tmp = true;
            			}
HXDLIN( 217)			if (_hx_tmp) {
HXLINE( 218)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),218,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("maybeStartPacket",c2,0a,ad,2a)))));
            			}
HXLINE( 221)			this->page->startWithoutCapturePattern(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 224)		this->startPacket();
HXLINE( 225)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,maybeStartPacket,return )

int VorbisDecodeState_obj::readBits(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_233_readBits)
HXDLIN( 233)		if ((this->validBits < 0)) {
HXLINE( 234)			return 0;
            		}
            		else {
HXLINE( 235)			if ((this->validBits < n)) {
HXLINE( 236)				if ((n > 24)) {
HXLINE( 238)					int _hx_tmp = this->readBits(24);
HXDLIN( 238)					return (_hx_tmp + (this->readBits((n - 24)) << 24));
            				}
            				else {
HXLINE( 240)					if ((this->validBits == 0)) {
HXLINE( 241)						this->acc = 0;
            					}
HXLINE( 244)					while(true){
HXLINE( 245)						bool _hx_tmp;
HXDLIN( 245)						if ((this->bytesInSeg == 0)) {
HXLINE( 245)							if (!(this->lastSeg)) {
HXLINE( 245)								_hx_tmp = (this->next() == 0);
            							}
            							else {
HXLINE( 245)								_hx_tmp = true;
            							}
            						}
            						else {
HXLINE( 245)							_hx_tmp = false;
            						}
HXDLIN( 245)						if (_hx_tmp) {
HXLINE( 246)							this->validBits = -1;
HXLINE( 247)							goto _hx_goto_10;
            						}
            						else {
HXLINE( 249)							this->bytesInSeg--;
HXLINE( 250)							int a = this->acc;
HXDLIN( 250)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState b = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 250)							b->inputPosition = (b->inputPosition + 1);
HXDLIN( 250)							int b1 = this->input->readByte();
HXDLIN( 250)							this->acc = (a + (b1 << this->validBits));
HXLINE( 251)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 251)							_hx_tmp->validBits = (_hx_tmp->validBits + 8);
            						}
HXLINE( 244)						if (!((this->validBits < n))) {
HXLINE( 244)							goto _hx_goto_10;
            						}
            					}
            					_hx_goto_10:;
HXLINE( 255)					if ((this->validBits < 0)) {
HXLINE( 256)						return 0;
            					}
            					else {
HXLINE( 258)						int z = (this->acc & ((1 << n) - 1));
HXLINE( 259)						this->acc = ::hx::UShr(this->acc,n);
HXLINE( 260)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 260)						_hx_tmp->validBits = (_hx_tmp->validBits - n);
HXLINE( 261)						return z;
            					}
            				}
            			}
            			else {
HXLINE( 265)				int z = (this->acc & ((1 << n) - 1));
HXLINE( 266)				this->acc = ::hx::UShr(this->acc,n);
HXLINE( 267)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 267)				_hx_tmp->validBits = (_hx_tmp->validBits - n);
HXLINE( 268)				return z;
            			}
            		}
HXLINE( 233)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readBits,return )

int VorbisDecodeState_obj::readPacketRaw(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_272_readPacketRaw)
HXDLIN( 272)		bool _hx_tmp;
HXDLIN( 272)		if ((this->bytesInSeg == 0)) {
HXDLIN( 272)			if (!(this->lastSeg)) {
HXDLIN( 272)				_hx_tmp = (this->next() == 0);
            			}
            			else {
HXDLIN( 272)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN( 272)			_hx_tmp = false;
            		}
HXDLIN( 272)		if (_hx_tmp) {
HXLINE( 273)			return -1;
            		}
            		else {
HXLINE( 276)			this->bytesInSeg--;
HXLINE( 277)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 277)			_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 277)			return this->input->readByte();
            		}
HXLINE( 272)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readPacketRaw,return )

int VorbisDecodeState_obj::readPacket(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_282_readPacket)
HXLINE( 283)		int x;
HXDLIN( 283)		bool x1;
HXDLIN( 283)		if ((this->bytesInSeg == 0)) {
HXLINE( 283)			if (!(this->lastSeg)) {
HXLINE( 283)				x1 = (this->next() == 0);
            			}
            			else {
HXLINE( 283)				x1 = true;
            			}
            		}
            		else {
HXLINE( 283)			x1 = false;
            		}
HXDLIN( 283)		if (x1) {
HXLINE( 283)			x = -1;
            		}
            		else {
HXLINE( 283)			this->bytesInSeg--;
HXDLIN( 283)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState x1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 283)			x1->inputPosition = (x1->inputPosition + 1);
HXDLIN( 283)			x = this->input->readByte();
            		}
HXLINE( 284)		this->validBits = 0;
HXLINE( 285)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readPacket,return )

void VorbisDecodeState_obj::flushPacket(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_289_flushPacket)
HXDLIN( 289)		while(true){
HXDLIN( 289)			bool _hx_tmp;
HXDLIN( 289)			if ((this->bytesInSeg == 0)) {
HXDLIN( 289)				if (!(this->lastSeg)) {
HXDLIN( 289)					_hx_tmp = (this->next() != 0);
            				}
            				else {
HXDLIN( 289)					_hx_tmp = false;
            				}
            			}
            			else {
HXDLIN( 289)				_hx_tmp = true;
            			}
HXDLIN( 289)			if (!(_hx_tmp)) {
HXDLIN( 289)				goto _hx_goto_14;
            			}
HXLINE( 290)			this->bytesInSeg--;
HXLINE( 291)			{
HXLINE( 291)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 291)				_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + 1);
HXDLIN( 291)				this->input->readByte();
            			}
            		}
            		_hx_goto_14:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,flushPacket,(void))

void VorbisDecodeState_obj::vorbisValidate(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_295_vorbisValidate)
HXLINE( 296)		 ::haxe::io::Bytes header = ::haxe::io::Bytes_obj::alloc(6);
HXLINE( 297)		{
HXLINE( 298)			{
HXLINE( 298)				int x;
HXDLIN( 298)				bool x1;
HXDLIN( 298)				if ((this->bytesInSeg == 0)) {
HXLINE( 298)					if (!(this->lastSeg)) {
HXLINE( 298)						x1 = (this->next() == 0);
            					}
            					else {
HXLINE( 298)						x1 = true;
            					}
            				}
            				else {
HXLINE( 298)					x1 = false;
            				}
HXDLIN( 298)				if (x1) {
HXLINE( 298)					x = -1;
            				}
            				else {
HXLINE( 298)					this->bytesInSeg--;
HXDLIN( 298)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState x1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)					x1->inputPosition = (x1->inputPosition + 1);
HXDLIN( 298)					x = this->input->readByte();
            				}
HXDLIN( 298)				this->validBits = 0;
HXDLIN( 298)				header->b[0] = ( (unsigned char)(x) );
            			}
HXDLIN( 298)			{
HXLINE( 298)				int x2;
HXDLIN( 298)				bool x3;
HXDLIN( 298)				if ((this->bytesInSeg == 0)) {
HXLINE( 298)					if (!(this->lastSeg)) {
HXLINE( 298)						x3 = (this->next() == 0);
            					}
            					else {
HXLINE( 298)						x3 = true;
            					}
            				}
            				else {
HXLINE( 298)					x3 = false;
            				}
HXDLIN( 298)				if (x3) {
HXLINE( 298)					x2 = -1;
            				}
            				else {
HXLINE( 298)					this->bytesInSeg--;
HXDLIN( 298)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState x = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)					x->inputPosition = (x->inputPosition + 1);
HXDLIN( 298)					x2 = this->input->readByte();
            				}
HXDLIN( 298)				this->validBits = 0;
HXDLIN( 298)				header->b[1] = ( (unsigned char)(x2) );
            			}
HXDLIN( 298)			{
HXLINE( 298)				int x4;
HXDLIN( 298)				bool x5;
HXDLIN( 298)				if ((this->bytesInSeg == 0)) {
HXLINE( 298)					if (!(this->lastSeg)) {
HXLINE( 298)						x5 = (this->next() == 0);
            					}
            					else {
HXLINE( 298)						x5 = true;
            					}
            				}
            				else {
HXLINE( 298)					x5 = false;
            				}
HXDLIN( 298)				if (x5) {
HXLINE( 298)					x4 = -1;
            				}
            				else {
HXLINE( 298)					this->bytesInSeg--;
HXDLIN( 298)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState x = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)					x->inputPosition = (x->inputPosition + 1);
HXDLIN( 298)					x4 = this->input->readByte();
            				}
HXDLIN( 298)				this->validBits = 0;
HXDLIN( 298)				header->b[2] = ( (unsigned char)(x4) );
            			}
HXDLIN( 298)			{
HXLINE( 298)				int x6;
HXDLIN( 298)				bool x7;
HXDLIN( 298)				if ((this->bytesInSeg == 0)) {
HXLINE( 298)					if (!(this->lastSeg)) {
HXLINE( 298)						x7 = (this->next() == 0);
            					}
            					else {
HXLINE( 298)						x7 = true;
            					}
            				}
            				else {
HXLINE( 298)					x7 = false;
            				}
HXDLIN( 298)				if (x7) {
HXLINE( 298)					x6 = -1;
            				}
            				else {
HXLINE( 298)					this->bytesInSeg--;
HXDLIN( 298)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState x = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)					x->inputPosition = (x->inputPosition + 1);
HXDLIN( 298)					x6 = this->input->readByte();
            				}
HXDLIN( 298)				this->validBits = 0;
HXDLIN( 298)				header->b[3] = ( (unsigned char)(x6) );
            			}
HXDLIN( 298)			{
HXLINE( 298)				int x8;
HXDLIN( 298)				bool x9;
HXDLIN( 298)				if ((this->bytesInSeg == 0)) {
HXLINE( 298)					if (!(this->lastSeg)) {
HXLINE( 298)						x9 = (this->next() == 0);
            					}
            					else {
HXLINE( 298)						x9 = true;
            					}
            				}
            				else {
HXLINE( 298)					x9 = false;
            				}
HXDLIN( 298)				if (x9) {
HXLINE( 298)					x8 = -1;
            				}
            				else {
HXLINE( 298)					this->bytesInSeg--;
HXDLIN( 298)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState x = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)					x->inputPosition = (x->inputPosition + 1);
HXDLIN( 298)					x8 = this->input->readByte();
            				}
HXDLIN( 298)				this->validBits = 0;
HXDLIN( 298)				header->b[4] = ( (unsigned char)(x8) );
            			}
HXDLIN( 298)			{
HXLINE( 298)				int x10;
HXDLIN( 298)				bool x11;
HXDLIN( 298)				if ((this->bytesInSeg == 0)) {
HXLINE( 298)					if (!(this->lastSeg)) {
HXLINE( 298)						x11 = (this->next() == 0);
            					}
            					else {
HXLINE( 298)						x11 = true;
            					}
            				}
            				else {
HXLINE( 298)					x11 = false;
            				}
HXDLIN( 298)				if (x11) {
HXLINE( 298)					x10 = -1;
            				}
            				else {
HXLINE( 298)					this->bytesInSeg--;
HXDLIN( 298)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState x = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)					x->inputPosition = (x->inputPosition + 1);
HXDLIN( 298)					x10 = this->input->readByte();
            				}
HXDLIN( 298)				this->validBits = 0;
HXDLIN( 298)				header->b[5] = ( (unsigned char)(x10) );
            			}
            		}
HXLINE( 300)		if ((header->toString() != HX_("vorbis",53,03,3c,63))) {
HXLINE( 301)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("vorbis header",ba,3e,a4,0e),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),301,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("vorbisValidate",09,9b,51,16)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,vorbisValidate,(void))

void VorbisDecodeState_obj::firstPageValidate(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_306_firstPageValidate)
HXLINE( 307)		if ((this->segments->length != 1)) {
HXLINE( 308)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("segmentCount",1c,1c,95,3d),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),308,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("firstPageValidate",55,1a,ec,1c)))));
            		}
HXLINE( 310)		if (::hx::IsNotEq( _hx_array_unsafe_get(this->segments,0),30 )) {
HXLINE( 311)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("decodeState head",5d,8c,63,29),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),311,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("firstPageValidate",55,1a,ec,1c)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,firstPageValidate,(void))

void VorbisDecodeState_obj::startFirstDecode(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_316_startFirstDecode)
HXLINE( 317)		this->firstAudioPageOffset = this->inputPosition;
HXLINE( 318)		this->firstDecode = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,startFirstDecode,(void))

void VorbisDecodeState_obj::capturePattern(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_323_capturePattern)
HXDLIN( 323)		bool _hx_tmp;
HXDLIN( 323)		bool _hx_tmp1;
HXDLIN( 323)		bool _hx_tmp2;
HXDLIN( 323)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 323)		_hx_tmp3->inputPosition = (_hx_tmp3->inputPosition + 1);
HXDLIN( 323)		if ((this->input->readByte() == 79)) {
HXDLIN( 323)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 323)			_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 323)			_hx_tmp2 = (this->input->readByte() != 103);
            		}
            		else {
HXDLIN( 323)			_hx_tmp2 = true;
            		}
HXDLIN( 323)		if (!(_hx_tmp2)) {
HXDLIN( 323)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 323)			_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 323)			_hx_tmp1 = (this->input->readByte() != 103);
            		}
            		else {
HXDLIN( 323)			_hx_tmp1 = true;
            		}
HXDLIN( 323)		if (!(_hx_tmp1)) {
HXDLIN( 323)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 323)			_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + 1);
HXDLIN( 323)			_hx_tmp = (this->input->readByte() != 83);
            		}
            		else {
HXDLIN( 323)			_hx_tmp = true;
            		}
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 324)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),324,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("capturePattern",6a,1a,b8,20)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,capturePattern,(void))

void VorbisDecodeState_obj::skip(int len){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_330_skip)
HXDLIN( 330)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 330)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + len);
HXDLIN( 330)		::Array< int > this1 = ::Array_obj< int >::__new(len);
HXDLIN( 330)		::Array< int > vec = this1;
HXDLIN( 330)		{
HXDLIN( 330)			int _g = 0;
HXDLIN( 330)			int _g1 = len;
HXDLIN( 330)			while((_g < _g1)){
HXDLIN( 330)				_g = (_g + 1);
HXDLIN( 330)				int i = (_g - 1);
HXDLIN( 330)				{
HXDLIN( 330)					int val = this->input->readByte();
HXDLIN( 330)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,skip,(void))

void VorbisDecodeState_obj::prepHuffman(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_335_prepHuffman)
HXDLIN( 335)		if ((this->validBits <= 24)) {
HXLINE( 336)			if ((this->validBits == 0)) {
HXLINE( 337)				this->acc = 0;
            			}
HXLINE( 339)			while(true){
HXLINE( 340)				bool _hx_tmp;
HXDLIN( 340)				if ((this->bytesInSeg == 0)) {
HXLINE( 340)					if (!(this->lastSeg)) {
HXLINE( 340)						_hx_tmp = (this->next() == 0);
            					}
            					else {
HXLINE( 340)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 340)					_hx_tmp = false;
            				}
HXDLIN( 340)				if (_hx_tmp) {
HXLINE( 341)					return;
            				}
            				else {
HXLINE( 343)					this->bytesInSeg--;
HXLINE( 344)					int a = this->acc;
HXDLIN( 344)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState b = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 344)					b->inputPosition = (b->inputPosition + 1);
HXDLIN( 344)					int b1 = this->input->readByte();
HXDLIN( 344)					this->acc = (a + (b1 << this->validBits));
HXLINE( 345)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 345)					_hx_tmp->validBits = (_hx_tmp->validBits + 8);
            				}
HXLINE( 339)				if (!((this->validBits <= 24))) {
HXLINE( 339)					goto _hx_goto_22;
            				}
            			}
            			_hx_goto_22:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,prepHuffman,(void))

int VorbisDecodeState_obj::decode( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_351_decode)
HXLINE( 352)		if ((this->validBits < 10)) {
HXLINE( 352)			this->prepHuffman();
            		}
HXDLIN( 352)		int i = ( (int)(_hx_array_unsafe_get(c->fastHuffman,(this->acc & 1023))) );
HXDLIN( 352)		int val;
HXDLIN( 352)		if ((i >= 0)) {
HXLINE( 352)			int l = ( (int)(_hx_array_unsafe_get(c->codewordLengths,i)) );
HXDLIN( 352)			this->acc = ::hx::UShr(this->acc,l);
HXDLIN( 352)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState val1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 352)			val1->validBits = (val1->validBits - l);
HXDLIN( 352)			if ((this->validBits < 0)) {
HXLINE( 352)				this->validBits = 0;
HXDLIN( 352)				val = -1;
            			}
            			else {
HXLINE( 352)				val = i;
            			}
            		}
            		else {
HXLINE( 352)			val = this->decodeScalarRaw(c);
            		}
HXLINE( 353)		if (c->sparse) {
HXLINE( 354)			val = ( (int)(_hx_array_unsafe_get(c->sortedValues,val)) );
            		}
HXLINE( 356)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decode,return )

int VorbisDecodeState_obj::decodeRaw( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_360_decodeRaw)
HXLINE( 361)		if ((this->validBits < 10)) {
HXLINE( 362)			this->prepHuffman();
            		}
HXLINE( 366)		int i = ( (int)(_hx_array_unsafe_get(c->fastHuffman,(this->acc & 1023))) );
HXLINE( 368)		if ((i >= 0)) {
HXLINE( 369)			int l = ( (int)(_hx_array_unsafe_get(c->codewordLengths,i)) );
HXLINE( 370)			this->acc = ::hx::UShr(this->acc,l);
HXLINE( 371)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 371)			_hx_tmp->validBits = (_hx_tmp->validBits - l);
HXLINE( 372)			if ((this->validBits < 0)) {
HXLINE( 373)				this->validBits = 0;
HXLINE( 374)				return -1;
            			}
            			else {
HXLINE( 376)				return i;
            			}
            		}
            		else {
HXLINE( 379)			return this->decodeScalarRaw(c);
            		}
HXLINE( 368)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decodeRaw,return )

bool VorbisDecodeState_obj::isLastByte(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_385_isLastByte)
HXDLIN( 385)		if ((this->bytesInSeg == 0)) {
HXDLIN( 385)			return this->lastSeg;
            		}
            		else {
HXDLIN( 385)			return false;
            		}
HXDLIN( 385)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,isLastByte,return )

 ::Dynamic VorbisDecodeState_obj::finishDecodePacket(int previousLength,int n, ::Dynamic r){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_389_finishDecodePacket)
HXLINE( 390)		int left = ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) );
HXLINE( 391)		bool currentLocValid = false;
HXLINE( 392)		int n2 = (n >> 1);
HXLINE( 394)		if (this->firstDecode) {
HXLINE( 399)			this->currentLoc = -(n2);
HXLINE( 402)			this->discardSamplesDeferred = (n - ( (int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic)) ));
HXLINE( 403)			currentLocValid = true;
HXLINE( 404)			this->firstDecode = false;
            		}
            		else {
HXLINE( 405)			if ((this->discardSamplesDeferred != 0)) {
HXLINE( 406)				 ::Dynamic r1 = r->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic);
HXDLIN( 406)				r1->__SetField(HX_("start",62,74,0b,84),(r1->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic) + this->discardSamplesDeferred),::hx::paccDynamic);
HXLINE( 407)				left = ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) );
HXLINE( 408)				this->discardSamplesDeferred = 0;
            			}
            			else {
HXLINE( 409)				bool _hx_tmp;
HXDLIN( 409)				if ((previousLength == 0)) {
HXLINE( 409)					_hx_tmp = currentLocValid;
            				}
            				else {
HXLINE( 409)					_hx_tmp = false;
            				}
            			}
            		}
HXLINE( 419)		if ((this->lastSegWhich == this->endSegWithKnownLoc)) {
HXLINE( 421)			bool _hx_tmp;
HXDLIN( 421)			if (currentLocValid) {
HXLINE( 421)				_hx_tmp = ((this->page->flag & 4) != 0);
            			}
            			else {
HXLINE( 421)				_hx_tmp = false;
            			}
HXDLIN( 421)			if (_hx_tmp) {
HXLINE( 422)				int currentEnd = (this->knownLocForPacket - (n - ( (int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic)) )));
HXLINE( 424)				if (::hx::IsLess( currentEnd,(this->currentLoc +  ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic)) )) {
HXLINE( 425)					int len;
HXDLIN( 425)					if ((currentEnd < this->currentLoc)) {
HXLINE( 425)						len = 0;
            					}
            					else {
HXLINE( 425)						len = (currentEnd - this->currentLoc);
            					}
HXLINE( 431)					len = ( (int)((len +  ::Dynamic(r->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic))) );
HXLINE( 432)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 432)					_hx_tmp->currentLoc = (_hx_tmp->currentLoc + len);
HXLINE( 434)					return  ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("right",dc,0b,64,e9), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)))
            						->setFixed(1,HX_("len",d5,4b,52,00),len)
            						->setFixed(2,HX_("left",07,08,b0,47),left));
            				}
            			}
HXLINE( 445)			this->currentLoc = (this->knownLocForPacket - (n2 - ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) )));
HXLINE( 446)			currentLocValid = true;
            		}
HXLINE( 449)		if (currentLocValid) {
HXLINE( 450)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 450)			_hx_tmp->currentLoc = (_hx_tmp->currentLoc + (( (int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) ) - ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) )));
            		}
HXLINE( 456)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("right",dc,0b,64,e9), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)))
            			->setFixed(1,HX_("len",d5,4b,52,00), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic)))
            			->setFixed(2,HX_("left",07,08,b0,47),left));
            	}


HX_DEFINE_DYNAMIC_FUNC3(VorbisDecodeState_obj,finishDecodePacket,return )

int VorbisDecodeState_obj::readInt32(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_464_readInt32)
HXLINE( 465)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 465)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 4);
HXLINE( 466)		return this->input->readInt32();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readInt32,return )

int VorbisDecodeState_obj::readByte(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_470_readByte)
HXLINE( 471)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 471)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXLINE( 472)		return this->input->readByte();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readByte,return )

::Array< int > VorbisDecodeState_obj::read(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_475_read)
HXLINE( 476)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 476)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + n);
HXLINE( 477)		::Array< int > this1 = ::Array_obj< int >::__new(n);
HXDLIN( 477)		::Array< int > vec = this1;
HXLINE( 478)		{
HXLINE( 478)			int _g = 0;
HXDLIN( 478)			int _g1 = n;
HXDLIN( 478)			while((_g < _g1)){
HXLINE( 478)				_g = (_g + 1);
HXDLIN( 478)				int i = (_g - 1);
HXLINE( 479)				{
HXLINE( 479)					int val = this->input->readByte();
HXDLIN( 479)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 481)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,read,return )

 ::haxe::io::Bytes VorbisDecodeState_obj::readBytes(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_484_readBytes)
HXLINE( 485)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 485)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + n);
HXLINE( 486)		return this->input->read(n);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readBytes,return )

::String VorbisDecodeState_obj::readString(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_490_readString)
HXLINE( 491)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 491)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + n);
HXLINE( 492)		return this->input->readString(n,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readString,return )

int VorbisDecodeState_obj::getSampleNumber( ::Dynamic seekFunc,int inputLength){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_495_getSampleNumber)
HXLINE( 498)		int restoreOffset = this->inputPosition;
HXLINE( 502)		int previousSafe;
HXDLIN( 502)		bool previousSafe1;
HXDLIN( 502)		bool aNeg = (inputLength < 0);
HXDLIN( 502)		bool bNeg = (65536 < 0);
HXDLIN( 502)		bool previousSafe2;
HXDLIN( 502)		if ((aNeg != bNeg)) {
HXLINE( 502)			previousSafe2 = aNeg;
            		}
            		else {
HXLINE( 502)			previousSafe2 = (inputLength >= 65536);
            		}
HXDLIN( 502)		if (previousSafe2) {
HXLINE( 502)			int a = (inputLength - 65536);
HXDLIN( 502)			int b = this->firstAudioPageOffset;
HXDLIN( 502)			bool aNeg = (a < 0);
HXDLIN( 502)			bool bNeg = (b < 0);
HXDLIN( 502)			if ((aNeg != bNeg)) {
HXLINE( 502)				previousSafe1 = aNeg;
            			}
            			else {
HXLINE( 502)				previousSafe1 = (a >= b);
            			}
            		}
            		else {
HXLINE( 502)			previousSafe1 = false;
            		}
HXDLIN( 502)		if (previousSafe1) {
HXLINE( 502)			previousSafe = (inputLength - 65536);
            		}
            		else {
HXLINE( 502)			previousSafe = this->firstAudioPageOffset;
            		}
HXLINE( 508)		seekFunc((this->inputPosition = previousSafe));
HXLINE( 512)		int end = 0;
HXLINE( 513)		bool last = false;
HXLINE( 514)		{
HXLINE( 514)			 ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult _g = this->findPage(seekFunc,inputLength);
HXDLIN( 514)			switch((int)(_g->_hx_getIndex())){
            				case (int)0: {
HXLINE( 515)					bool l = _g->_hx_getBool(1);
HXDLIN( 515)					int e = _g->_hx_getInt(0);
HXDLIN( 515)					{
HXLINE( 516)						end = e;
HXLINE( 517)						last = l;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 519)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CANT_FIND_LAST_PAGE_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),519,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("getSampleNumber",49,2c,d1,08)))));
            				}
            				break;
            			}
            		}
HXLINE( 523)		int lastPageLoc = this->inputPosition;
HXLINE( 528)		while(!(last)){
HXLINE( 529)			seekFunc((this->inputPosition = end));
HXLINE( 530)			{
HXLINE( 530)				 ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult _g = this->findPage(seekFunc,inputLength);
HXDLIN( 530)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 531)						bool l = _g->_hx_getBool(1);
HXDLIN( 531)						int e = _g->_hx_getInt(0);
HXDLIN( 531)						{
HXLINE( 532)							end = e;
HXLINE( 533)							last = l;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 537)						goto _hx_goto_34;
            					}
            					break;
            				}
            			}
HXLINE( 540)			previousSafe = (lastPageLoc + 1);
HXLINE( 541)			lastPageLoc = this->inputPosition;
            		}
            		_hx_goto_34:;
HXLINE( 544)		seekFunc((this->inputPosition = lastPageLoc));
HXLINE( 547)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 547)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 6);
HXDLIN( 547)		::Array< int > this1 = ::Array_obj< int >::__new(6);
HXDLIN( 547)		::Array< int > vec = this1;
HXDLIN( 547)		{
HXLINE( 547)			int _g1 = 0;
HXDLIN( 547)			int _g2 = 6;
HXDLIN( 547)			while((_g1 < _g2)){
HXLINE( 547)				_g1 = (_g1 + 1);
HXDLIN( 547)				int i = (_g1 - 1);
HXDLIN( 547)				{
HXLINE( 547)					int val = this->input->readByte();
HXDLIN( 547)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN( 547)		::Array< int > vorbisHeader = vec;
HXLINE( 550)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 550)		_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + 4);
HXDLIN( 550)		int lo = this->input->readInt32();
HXLINE( 551)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 551)		_hx_tmp2->inputPosition = (_hx_tmp2->inputPosition + 4);
HXDLIN( 551)		int hi = this->input->readInt32();
HXLINE( 552)		bool _hx_tmp3;
HXDLIN( 552)		bool _hx_tmp4;
HXDLIN( 552)		if ((lo == -1)) {
HXLINE( 552)			_hx_tmp4 = (hi == -1);
            		}
            		else {
HXLINE( 552)			_hx_tmp4 = false;
            		}
HXDLIN( 552)		if (!(_hx_tmp4)) {
HXLINE( 552)			_hx_tmp3 = (hi > 0);
            		}
            		else {
HXLINE( 552)			_hx_tmp3 = true;
            		}
HXDLIN( 552)		if (_hx_tmp3) {
HXLINE( 553)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CANT_FIND_LAST_PAGE_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),553,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("getSampleNumber",49,2c,d1,08)))));
            		}
HXLINE( 556)		this->_hx_set_pLast(HX_CTX,  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__alloc( HX_CTX ));
HXLINE( 557)		this->pLast->pageStart = lastPageLoc;
HXLINE( 558)		this->pLast->pageEnd = end;
HXLINE( 559)		this->pLast->_hx_set_lastDecodedSample(HX_CTX, lo);
HXLINE( 560)		this->pLast->_hx_set_firstDecodedSample(HX_CTX, null());
HXLINE( 561)		this->pLast->afterPreviousPageStart = previousSafe;
HXLINE( 563)		seekFunc((this->inputPosition = restoreOffset));
HXLINE( 564)		return lo;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,getSampleNumber,return )

void VorbisDecodeState_obj::forcePageResync(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_569_forcePageResync)
HXDLIN( 569)		this->nextSeg = -1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,forcePageResync,(void))

void VorbisDecodeState_obj::setInputOffset( ::Dynamic seekFunc,int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_574_setInputOffset)
HXDLIN( 574)		seekFunc((this->inputPosition = n));
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,setInputOffset,(void))

 ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult VorbisDecodeState_obj::findPage( ::Dynamic seekFunc,int inputLength){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_578_findPage)
HXDLIN( 578)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 579)			while(true){
HXLINE( 580)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 580)				_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 580)				int n = this->input->readByte();
HXLINE( 581)				if ((n == 79)) {
HXLINE( 582)					int retryLoc = this->inputPosition;
HXLINE( 584)					if (((retryLoc - 25) > inputLength)) {
HXLINE( 585)						return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            					}
HXLINE( 588)					bool _hx_tmp;
HXDLIN( 588)					bool _hx_tmp1;
HXDLIN( 588)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 588)					_hx_tmp2->inputPosition = (_hx_tmp2->inputPosition + 1);
HXDLIN( 588)					if ((this->input->readByte() == 103)) {
HXLINE( 588)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 588)						_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 588)						_hx_tmp1 = (this->input->readByte() != 103);
            					}
            					else {
HXLINE( 588)						_hx_tmp1 = true;
            					}
HXDLIN( 588)					if (!(_hx_tmp1)) {
HXLINE( 588)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 588)						_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + 1);
HXDLIN( 588)						_hx_tmp = (this->input->readByte() != 83);
            					}
            					else {
HXLINE( 588)						_hx_tmp = true;
            					}
HXDLIN( 588)					if (_hx_tmp) {
HXLINE( 589)						continue;
            					}
HXLINE( 592)					::Array< int > this1 = ::Array_obj< int >::__new(27);
HXDLIN( 592)					::Array< int > header = this1;
HXLINE( 593)					header->__unsafe_set(0,79);
HXLINE( 594)					header->__unsafe_set(1,103);
HXLINE( 595)					header->__unsafe_set(2,103);
HXLINE( 596)					header->__unsafe_set(3,83);
HXLINE( 597)					{
HXLINE( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp3->inputPosition = (_hx_tmp3->inputPosition + 1);
HXDLIN( 598)							int val = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(4,val);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp4->inputPosition = (_hx_tmp4->inputPosition + 1);
HXDLIN( 598)							int val1 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(5,val1);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp5->inputPosition = (_hx_tmp5->inputPosition + 1);
HXDLIN( 598)							int val2 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(6,val2);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp6->inputPosition = (_hx_tmp6->inputPosition + 1);
HXDLIN( 598)							int val3 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(7,val3);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp7->inputPosition = (_hx_tmp7->inputPosition + 1);
HXDLIN( 598)							int val4 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(8,val4);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp8->inputPosition = (_hx_tmp8->inputPosition + 1);
HXDLIN( 598)							int val5 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(9,val5);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp9 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp9->inputPosition = (_hx_tmp9->inputPosition + 1);
HXDLIN( 598)							int val6 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(10,val6);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp10 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp10->inputPosition = (_hx_tmp10->inputPosition + 1);
HXDLIN( 598)							int val7 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(11,val7);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp11 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp11->inputPosition = (_hx_tmp11->inputPosition + 1);
HXDLIN( 598)							int val8 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(12,val8);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp12 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp12->inputPosition = (_hx_tmp12->inputPosition + 1);
HXDLIN( 598)							int val9 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(13,val9);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp13 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp13->inputPosition = (_hx_tmp13->inputPosition + 1);
HXDLIN( 598)							int val10 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(14,val10);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp14 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp14->inputPosition = (_hx_tmp14->inputPosition + 1);
HXDLIN( 598)							int val11 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(15,val11);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp15 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp15->inputPosition = (_hx_tmp15->inputPosition + 1);
HXDLIN( 598)							int val12 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(16,val12);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp16 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp16->inputPosition = (_hx_tmp16->inputPosition + 1);
HXDLIN( 598)							int val13 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(17,val13);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp17 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp17->inputPosition = (_hx_tmp17->inputPosition + 1);
HXDLIN( 598)							int val14 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(18,val14);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp18 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp18->inputPosition = (_hx_tmp18->inputPosition + 1);
HXDLIN( 598)							int val15 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(19,val15);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp19 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp19->inputPosition = (_hx_tmp19->inputPosition + 1);
HXDLIN( 598)							int val16 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(20,val16);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp20 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp20->inputPosition = (_hx_tmp20->inputPosition + 1);
HXDLIN( 598)							int val17 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(21,val17);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp21 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp21->inputPosition = (_hx_tmp21->inputPosition + 1);
HXDLIN( 598)							int val18 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(22,val18);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp22 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp22->inputPosition = (_hx_tmp22->inputPosition + 1);
HXDLIN( 598)							int val19 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(23,val19);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp23 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp23->inputPosition = (_hx_tmp23->inputPosition + 1);
HXDLIN( 598)							int val20 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(24,val20);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp24 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp24->inputPosition = (_hx_tmp24->inputPosition + 1);
HXDLIN( 598)							int val21 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(25,val21);
            						}
HXDLIN( 598)						{
HXLINE( 598)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp25 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 598)							_hx_tmp25->inputPosition = (_hx_tmp25->inputPosition + 1);
HXDLIN( 598)							int val22 = this->input->readByte();
HXDLIN( 598)							header->__unsafe_set(26,val22);
            						}
            					}
HXLINE( 601)					if ((( (int)(_hx_array_unsafe_get(header,4)) ) != 0)) {
HXLINE( 602)						seekFunc((this->inputPosition = retryLoc));
HXLINE( 603)						continue;
            					}
HXLINE( 606)					int a = ( (int)(_hx_array_unsafe_get(header,22)) );
HXDLIN( 606)					int a1 = (a + (( (int)(_hx_array_unsafe_get(header,23)) ) << 8));
HXDLIN( 606)					int a2 = (a1 + (( (int)(_hx_array_unsafe_get(header,24)) ) << 16));
HXDLIN( 606)					int goal = (a2 + (( (int)(_hx_array_unsafe_get(header,25)) ) << 24));
HXLINE( 607)					{
HXLINE( 608)						header->__unsafe_set(22,0);
HXDLIN( 608)						header->__unsafe_set(23,0);
HXDLIN( 608)						header->__unsafe_set(24,0);
HXDLIN( 608)						header->__unsafe_set(25,0);
            					}
HXLINE( 611)					int crc = 0;
HXLINE( 612)					{
HXLINE( 612)						int _g = 0;
HXDLIN( 612)						while((_g < 27)){
HXLINE( 612)							_g = (_g + 1);
HXDLIN( 612)							int i = (_g - 1);
HXLINE( 613)							int byte = ( (int)(_hx_array_unsafe_get(header,i)) );
HXDLIN( 613)							crc = ((crc << 8) ^ ( (int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,(byte ^ ::hx::UShr(crc,24)))) ));
            						}
            					}
HXLINE( 616)					int len = 0;
HXLINE( 617)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 618)						{
HXLINE( 618)							int _g = 0;
HXDLIN( 618)							int _g1 = ( (int)(_hx_array_unsafe_get(header,26)) );
HXDLIN( 618)							while((_g < _g1)){
HXLINE( 618)								_g = (_g + 1);
HXDLIN( 618)								int i = (_g - 1);
HXLINE( 619)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 619)								_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 619)								int s = this->input->readByte();
HXLINE( 620)								crc = ((crc << 8) ^ ( (int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,(s ^ ::hx::UShr(crc,24)))) ));
HXLINE( 621)								len = (len + s);
            							}
            						}
HXLINE( 623)						{
HXLINE( 623)							int _g2 = 0;
HXDLIN( 623)							int _g3 = len;
HXDLIN( 623)							while((_g2 < _g3)){
HXLINE( 623)								_g2 = (_g2 + 1);
HXDLIN( 623)								int i = (_g2 - 1);
HXLINE( 624)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState crc1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 624)								crc1->inputPosition = (crc1->inputPosition + 1);
HXDLIN( 624)								int byte = this->input->readByte();
HXDLIN( 624)								crc = ((crc << 8) ^ ( (int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,(byte ^ ::hx::UShr(crc,24)))) ));
            							}
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE(   1)							{
HXLINE(   1)								null();
            							}
HXLINE( 617)							if (::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 627)								return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            							}
            							else {
HXLINE( 617)								HX_STACK_DO_THROW(_g);
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 631)					if ((crc == goal)) {
HXLINE( 640)						int end = this->inputPosition;
HXLINE( 641)						seekFunc((this->inputPosition = (retryLoc - 1)));
HXLINE( 642)						return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::Found(end,((( (int)(_hx_array_unsafe_get(header,5)) ) & 4) != 0));
            					}
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXLINE( 578)				if (::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 647)					return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            				}
            				else {
HXDLIN( 578)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 578)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,findPage,return )

 ::kha::audio2::ogg::vorbis::data::ProbedPage VorbisDecodeState_obj::analyzePage( ::Dynamic seekFunc, ::kha::audio2::ogg::vorbis::data::Header h){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_652_analyzePage)
HXLINE( 653)		 ::kha::audio2::ogg::vorbis::data::ProbedPage z =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__alloc( HX_CTX );
HXLINE( 654)		::Array< bool > this1 = ::Array_obj< bool >::__new(255);
HXDLIN( 654)		::Array< bool > packetType = this1;
HXLINE( 657)		z->pageStart = this->inputPosition;
HXLINE( 660)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 660)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 27);
HXDLIN( 660)		::Array< int > this2 = ::Array_obj< int >::__new(27);
HXDLIN( 660)		::Array< int > vec = this2;
HXDLIN( 660)		{
HXLINE( 660)			int _g = 0;
HXDLIN( 660)			int _g1 = 27;
HXDLIN( 660)			while((_g < _g1)){
HXLINE( 660)				_g = (_g + 1);
HXDLIN( 660)				int i = (_g - 1);
HXDLIN( 660)				{
HXLINE( 660)					int val = this->input->readByte();
HXDLIN( 660)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN( 660)		::Array< int > pageHeader = vec;
HXLINE( 661)		{
HXLINE( 661)			bool b;
HXDLIN( 661)			bool b1;
HXDLIN( 661)			bool b2;
HXDLIN( 661)			if ((( (int)(_hx_array_unsafe_get(pageHeader,0)) ) == 79)) {
HXLINE( 661)				b2 = (( (int)(_hx_array_unsafe_get(pageHeader,1)) ) == 103);
            			}
            			else {
HXLINE( 661)				b2 = false;
            			}
HXDLIN( 661)			if (b2) {
HXLINE( 661)				b1 = (( (int)(_hx_array_unsafe_get(pageHeader,2)) ) == 103);
            			}
            			else {
HXLINE( 661)				b1 = false;
            			}
HXDLIN( 661)			if (b1) {
HXLINE( 661)				b = (( (int)(_hx_array_unsafe_get(pageHeader,3)) ) == 83);
            			}
            			else {
HXLINE( 661)				b = false;
            			}
            		}
HXLINE( 662)		int n = ( (int)(_hx_array_unsafe_get(pageHeader,26)) );
HXDLIN( 662)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 662)		_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + n);
HXDLIN( 662)		::Array< int > this3 = ::Array_obj< int >::__new(n);
HXDLIN( 662)		::Array< int > vec1 = this3;
HXDLIN( 662)		{
HXLINE( 662)			int _g2 = 0;
HXDLIN( 662)			int _g3 = n;
HXDLIN( 662)			while((_g2 < _g3)){
HXLINE( 662)				_g2 = (_g2 + 1);
HXDLIN( 662)				int i = (_g2 - 1);
HXDLIN( 662)				{
HXLINE( 662)					int val = this->input->readByte();
HXDLIN( 662)					vec1->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN( 662)		::Array< int > lacing = vec1;
HXLINE( 665)		int len = 0;
HXLINE( 666)		{
HXLINE( 666)			int _g4 = 0;
HXDLIN( 666)			int _g5 = ( (int)(_hx_array_unsafe_get(pageHeader,26)) );
HXDLIN( 666)			while((_g4 < _g5)){
HXLINE( 666)				_g4 = (_g4 + 1);
HXDLIN( 666)				int i = (_g4 - 1);
HXLINE( 667)				len = (len + ( (int)(_hx_array_unsafe_get(lacing,i)) ));
            			}
            		}
HXLINE( 671)		int _hx_tmp2 = (z->pageStart + 27);
HXDLIN( 671)		z->pageEnd = ((_hx_tmp2 + ( (int)(_hx_array_unsafe_get(pageHeader,26)) )) + len);
HXLINE( 674)		int _hx_tmp3 = ( (int)(_hx_array_unsafe_get(pageHeader,6)) );
HXDLIN( 674)		int _hx_tmp4 = (_hx_tmp3 + (( (int)(_hx_array_unsafe_get(pageHeader,7)) ) << 8));
HXDLIN( 674)		int _hx_tmp5 = (_hx_tmp4 + (( (int)(_hx_array_unsafe_get(pageHeader,8)) ) << 16));
HXDLIN( 674)		z->_hx_set_lastDecodedSample(HX_CTX, (_hx_tmp5 + (( (int)(_hx_array_unsafe_get(pageHeader,9)) ) << 16)));
HXLINE( 676)		if (((( (int)(_hx_array_unsafe_get(pageHeader,5)) ) & 4) != 0)) {
HXLINE( 679)			z->_hx_set_firstDecodedSample(HX_CTX, null());
HXLINE( 680)			seekFunc((this->inputPosition = z->pageStart));
HXLINE( 681)			return z;
            		}
HXLINE( 688)		int numPacket = 0;
HXLINE( 689)		bool packetStart = ((( (int)(_hx_array_unsafe_get(pageHeader,5)) ) & 1) == 0);
HXLINE( 691)		int modeCount = h->modes->length;
HXLINE( 693)		{
HXLINE( 693)			int _g6 = 0;
HXDLIN( 693)			int _g7 = ( (int)(_hx_array_unsafe_get(pageHeader,26)) );
HXDLIN( 693)			while((_g6 < _g7)){
HXLINE( 693)				_g6 = (_g6 + 1);
HXDLIN( 693)				int i = (_g6 - 1);
HXLINE( 694)				if (packetStart) {
HXLINE( 695)					if ((( (int)(_hx_array_unsafe_get(lacing,i)) ) == 0)) {
HXLINE( 697)						seekFunc((this->inputPosition = z->pageStart));
HXLINE( 698)						return null();
            					}
HXLINE( 700)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 700)					_hx_tmp->inputPosition = (_hx_tmp->inputPosition + 1);
HXDLIN( 700)					int n = this->input->readByte();
HXLINE( 703)					if (((n & 1) != 0)) {
HXLINE( 704)						seekFunc((this->inputPosition = z->pageStart));
HXLINE( 705)						return null();
            					}
HXLINE( 707)					n = (n >> 1);
HXLINE( 708)					int n1 = (modeCount - 1);
HXDLIN( 708)					::Array< int > log2_4 = ::Array_obj< int >::fromData( _hx_array_data_19036b3c_52,16);
HXDLIN( 708)					int b;
HXDLIN( 708)					if ((n1 < 16384)) {
HXLINE( 708)						if ((n1 < 16)) {
HXLINE( 708)							b = log2_4->__get(n1);
            						}
            						else {
HXLINE( 708)							if ((n1 < 512)) {
HXLINE( 708)								b = (5 + log2_4->__get((n1 >> 5)));
            							}
            							else {
HXLINE( 708)								b = (10 + log2_4->__get((n1 >> 10)));
            							}
            						}
            					}
            					else {
HXLINE( 708)						if ((n1 < 16777216)) {
HXLINE( 708)							if ((n1 < 524288)) {
HXLINE( 708)								b = (15 + log2_4->__get((n1 >> 15)));
            							}
            							else {
HXLINE( 708)								b = (20 + log2_4->__get((n1 >> 20)));
            							}
            						}
            						else {
HXLINE( 708)							if ((n1 < 536870912)) {
HXLINE( 708)								b = (25 + log2_4->__get((n1 >> 25)));
            							}
            							else {
HXLINE( 708)								if ((n1 < (int)-2147483648)) {
HXLINE( 708)									b = (30 + log2_4->__get((n1 >> 30)));
            								}
            								else {
HXLINE( 708)									b = 0;
            								}
            							}
            						}
            					}
HXLINE( 709)					n = (n & ((1 << b) - 1));
HXLINE( 710)					if ((n >= modeCount)) {
HXLINE( 711)						seekFunc((this->inputPosition = z->pageStart));
HXLINE( 712)						return null();
            					}
HXLINE( 714)					{
HXLINE( 714)						numPacket = (numPacket + 1);
HXDLIN( 714)						bool val = ( ( ::kha::audio2::ogg::vorbis::data::Mode)(_hx_array_unsafe_get(h->modes,n)) )->blockflag;
HXDLIN( 714)						packetType->__unsafe_set((numPacket - 1),val);
            					}
HXLINE( 715)					{
HXLINE( 715)						int len = (( (int)(_hx_array_unsafe_get(lacing,i)) ) - 1);
HXDLIN( 715)						{
HXLINE( 715)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 715)							_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + len);
HXDLIN( 715)							::Array< int > this1 = ::Array_obj< int >::__new(len);
HXDLIN( 715)							::Array< int > vec = this1;
HXDLIN( 715)							{
HXLINE( 715)								int _g = 0;
HXDLIN( 715)								int _g1 = len;
HXDLIN( 715)								while((_g < _g1)){
HXLINE( 715)									_g = (_g + 1);
HXDLIN( 715)									int i = (_g - 1);
HXDLIN( 715)									{
HXLINE( 715)										int val = this->input->readByte();
HXDLIN( 715)										vec->__unsafe_set(i,val);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 717)					int len = ( (int)(_hx_array_unsafe_get(lacing,i)) );
HXDLIN( 717)					{
HXLINE( 717)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 717)						_hx_tmp->inputPosition = (_hx_tmp->inputPosition + len);
HXDLIN( 717)						::Array< int > this1 = ::Array_obj< int >::__new(len);
HXDLIN( 717)						::Array< int > vec = this1;
HXDLIN( 717)						{
HXLINE( 717)							int _g = 0;
HXDLIN( 717)							int _g1 = len;
HXDLIN( 717)							while((_g < _g1)){
HXLINE( 717)								_g = (_g + 1);
HXDLIN( 717)								int i = (_g - 1);
HXDLIN( 717)								{
HXLINE( 717)									int val = this->input->readByte();
HXDLIN( 717)									vec->__unsafe_set(i,val);
            								}
            							}
            						}
            					}
            				}
HXLINE( 719)				packetStart = (( (int)(_hx_array_unsafe_get(lacing,i)) ) < 255);
            			}
            		}
HXLINE( 724)		int samples = 0;
HXLINE( 732)		if ((numPacket > 1)) {
HXLINE( 733)			int samples1;
HXDLIN( 733)			if (( (bool)(_hx_array_unsafe_get(packetType,(numPacket - 1))) )) {
HXLINE( 733)				samples1 = h->blocksize1;
            			}
            			else {
HXLINE( 733)				samples1 = h->blocksize0;
            			}
HXDLIN( 733)			samples = (samples + samples1);
            		}
HXLINE( 736)		int i = (numPacket - 2);
HXLINE( 737)		while((i >= 1)){
HXLINE( 738)			i = (i - 1);
HXLINE( 741)			if (( (bool)(_hx_array_unsafe_get(packetType,i)) )) {
HXLINE( 742)				if (( (bool)(_hx_array_unsafe_get(packetType,(i + 1))) )) {
HXLINE( 743)					samples = (samples + (h->blocksize1 >> 1));
            				}
            				else {
HXLINE( 745)					samples = (samples + (((h->blocksize1 - h->blocksize0) >> 2) + (h->blocksize0 >> 1)));
            				}
            			}
            			else {
HXLINE( 748)				samples = (samples + (h->blocksize0 >> 1));
            			}
HXLINE( 750)			i = (i - 1);
            		}
HXLINE( 776)		z->_hx_set_firstDecodedSample(HX_CTX, (( (int)(z->lastDecodedSample) ) - samples));
HXLINE( 779)		seekFunc((this->inputPosition = z->pageStart));
HXLINE( 780)		return z;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,analyzePage,return )

int VorbisDecodeState_obj::decodeScalarRaw( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_785_decodeScalarRaw)
HXLINE( 786)		this->prepHuffman();
HXLINE( 791)		::Array< int > codewordLengths = c->codewordLengths;
HXLINE( 792)		::Array< int > codewords = c->codewords;
HXLINE( 793)		::Array< int > sortedCodewords = c->sortedCodewords;
HXLINE( 795)		bool _hx_tmp;
HXDLIN( 795)		if ((c->entries > 8)) {
HXLINE( 795)			_hx_tmp = ::hx::IsNotNull( sortedCodewords );
            		}
            		else {
HXLINE( 795)			_hx_tmp = ::hx::IsNotNull( codewords );
            		}
HXDLIN( 795)		if (_hx_tmp) {
HXLINE( 797)			int n = this->acc;
HXDLIN( 797)			n = (::hx::UShr((n & (int)-1431655766),1) | ((n & (int)1431655765) << 1));
HXDLIN( 797)			n = (::hx::UShr((n & -858993460),2) | ((n & 858993459) << 2));
HXDLIN( 797)			n = (::hx::UShr((n & -252645136),4) | ((n & 252645135) << 4));
HXDLIN( 797)			n = (::hx::UShr((n & -16711936),8) | ((n & 16711935) << 8));
HXDLIN( 797)			int code = (::hx::UShr(n,16) | (n << 16));
HXLINE( 798)			int x = 0;
HXLINE( 799)			int n1 = c->sortedEntries;
HXLINE( 801)			while((n1 > 1)){
HXLINE( 803)				int m = (x + (n1 >> 1));
HXLINE( 804)				int a = sortedCodewords->__get(m);
HXDLIN( 804)				bool aNeg = (code < 0);
HXDLIN( 804)				bool bNeg = (a < 0);
HXDLIN( 804)				bool _hx_tmp;
HXDLIN( 804)				if ((aNeg != bNeg)) {
HXLINE( 804)					_hx_tmp = aNeg;
            				}
            				else {
HXLINE( 804)					_hx_tmp = (code >= a);
            				}
HXDLIN( 804)				if (_hx_tmp) {
HXLINE( 805)					x = m;
HXLINE( 806)					n1 = (n1 - (n1 >> 1));
            				}
            				else {
HXLINE( 808)					n1 = (n1 >> 1);
            				}
            			}
HXLINE( 813)			if (!(c->sparse)) {
HXLINE( 814)				x = ( (int)(_hx_array_unsafe_get(c->sortedValues,x)) );
            			}
HXLINE( 818)			int len = ( (int)(_hx_array_unsafe_get(codewordLengths,x)) );
HXLINE( 819)			if ((this->validBits >= len)) {
HXLINE( 820)				this->acc = ::hx::UShr(this->acc,len);
HXLINE( 821)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 821)				_hx_tmp->validBits = (_hx_tmp->validBits - len);
HXLINE( 822)				return x;
            			}
HXLINE( 825)			this->validBits = 0;
HXLINE( 826)			return -1;
            		}
HXLINE( 831)		{
HXLINE( 831)			int _g = 0;
HXDLIN( 831)			int _g1 = c->entries;
HXDLIN( 831)			while((_g < _g1)){
HXLINE( 831)				_g = (_g + 1);
HXDLIN( 831)				int i = (_g - 1);
HXLINE( 832)				int cl = ( (int)(_hx_array_unsafe_get(codewordLengths,i)) );
HXLINE( 833)				if ((cl == 255)) {
HXLINE( 834)					continue;
            				}
HXLINE( 836)				int a = ( (int)(_hx_array_unsafe_get(codewords,i)) );
HXDLIN( 836)				if ((a == (this->acc & ((1 << cl) - 1)))) {
HXLINE( 837)					if ((this->validBits >= cl)) {
HXLINE( 838)						this->acc = ::hx::UShr(this->acc,cl);
HXLINE( 839)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 839)						_hx_tmp->validBits = (_hx_tmp->validBits - cl);
HXLINE( 840)						return i;
            					}
HXLINE( 842)					this->validBits = 0;
HXLINE( 843)					return -1;
            				}
            			}
            		}
HXLINE( 847)		this->_hx_set_error(HX_CTX,  ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_dyn(),null(),::hx::SourceInfo(HX_("kha/audio2/ogg/vorbis/VorbisDecodeState.hx",02,79,2e,1d),847,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("decodeScalarRaw",0e,d7,cb,48))));
HXLINE( 848)		this->validBits = 0;
HXLINE( 849)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decodeScalarRaw,return )

int VorbisDecodeState_obj::INVALID_BITS;


::hx::ObjectPtr< VorbisDecodeState_obj > VorbisDecodeState_obj::__new( ::haxe::io::Input input) {
	::hx::ObjectPtr< VorbisDecodeState_obj > __this = new VorbisDecodeState_obj();
	__this->__construct(input);
	return __this;
}

::hx::ObjectPtr< VorbisDecodeState_obj > VorbisDecodeState_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Input input) {
	VorbisDecodeState_obj *__this = (VorbisDecodeState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VorbisDecodeState_obj), true, "kha.audio2.ogg.vorbis.VorbisDecodeState"));
	*(void **)__this = VorbisDecodeState_obj::_hx_vtable;
	__this->__construct(input);
	return __this;
}

VorbisDecodeState_obj::VorbisDecodeState_obj()
{
}

void VorbisDecodeState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VorbisDecodeState);
	HX_MARK_MEMBER_NAME(page,"page");
	HX_MARK_MEMBER_NAME(eof,"eof");
	HX_MARK_MEMBER_NAME(pFirst,"pFirst");
	HX_MARK_MEMBER_NAME(pLast,"pLast");
	HX_MARK_MEMBER_NAME(validBits,"validBits");
	HX_MARK_MEMBER_NAME(inputPosition,"inputPosition");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(discardSamplesDeferred,"discardSamplesDeferred");
	HX_MARK_MEMBER_NAME(segments,"segments");
	HX_MARK_MEMBER_NAME(bytesInSeg,"bytesInSeg");
	HX_MARK_MEMBER_NAME(channelBuffers,"channelBuffers");
	HX_MARK_MEMBER_NAME(channelBufferStart,"channelBufferStart");
	HX_MARK_MEMBER_NAME(channelBufferEnd,"channelBufferEnd");
	HX_MARK_MEMBER_NAME(currentSample,"currentSample");
	HX_MARK_MEMBER_NAME(previousWindow,"previousWindow");
	HX_MARK_MEMBER_NAME(previousLength,"previousLength");
	HX_MARK_MEMBER_NAME(finalY,"finalY");
	HX_MARK_MEMBER_NAME(firstDecode,"firstDecode");
	HX_MARK_MEMBER_NAME(nextSeg,"nextSeg");
	HX_MARK_MEMBER_NAME(acc,"acc");
	HX_MARK_MEMBER_NAME(lastSeg,"lastSeg");
	HX_MARK_MEMBER_NAME(lastSegWhich,"lastSegWhich");
	HX_MARK_MEMBER_NAME(endSegWithKnownLoc,"endSegWithKnownLoc");
	HX_MARK_MEMBER_NAME(knownLocForPacket,"knownLocForPacket");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(currentLoc,"currentLoc");
	HX_MARK_MEMBER_NAME(currentLocValid,"currentLocValid");
	HX_MARK_MEMBER_NAME(firstAudioPageOffset,"firstAudioPageOffset");
	HX_MARK_END_CLASS();
}

void VorbisDecodeState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(page,"page");
	HX_VISIT_MEMBER_NAME(eof,"eof");
	HX_VISIT_MEMBER_NAME(pFirst,"pFirst");
	HX_VISIT_MEMBER_NAME(pLast,"pLast");
	HX_VISIT_MEMBER_NAME(validBits,"validBits");
	HX_VISIT_MEMBER_NAME(inputPosition,"inputPosition");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(discardSamplesDeferred,"discardSamplesDeferred");
	HX_VISIT_MEMBER_NAME(segments,"segments");
	HX_VISIT_MEMBER_NAME(bytesInSeg,"bytesInSeg");
	HX_VISIT_MEMBER_NAME(channelBuffers,"channelBuffers");
	HX_VISIT_MEMBER_NAME(channelBufferStart,"channelBufferStart");
	HX_VISIT_MEMBER_NAME(channelBufferEnd,"channelBufferEnd");
	HX_VISIT_MEMBER_NAME(currentSample,"currentSample");
	HX_VISIT_MEMBER_NAME(previousWindow,"previousWindow");
	HX_VISIT_MEMBER_NAME(previousLength,"previousLength");
	HX_VISIT_MEMBER_NAME(finalY,"finalY");
	HX_VISIT_MEMBER_NAME(firstDecode,"firstDecode");
	HX_VISIT_MEMBER_NAME(nextSeg,"nextSeg");
	HX_VISIT_MEMBER_NAME(acc,"acc");
	HX_VISIT_MEMBER_NAME(lastSeg,"lastSeg");
	HX_VISIT_MEMBER_NAME(lastSegWhich,"lastSegWhich");
	HX_VISIT_MEMBER_NAME(endSegWithKnownLoc,"endSegWithKnownLoc");
	HX_VISIT_MEMBER_NAME(knownLocForPacket,"knownLocForPacket");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(currentLoc,"currentLoc");
	HX_VISIT_MEMBER_NAME(currentLocValid,"currentLocValid");
	HX_VISIT_MEMBER_NAME(firstAudioPageOffset,"firstAudioPageOffset");
}

::hx::Val VorbisDecodeState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eof") ) { return ::hx::Val( eof ); }
		if (HX_FIELD_EQ(inName,"acc") ) { return ::hx::Val( acc ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { return ::hx::Val( page ); }
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next_dyn() ); }
		if (HX_FIELD_EQ(inName,"skip") ) { return ::hx::Val( skip_dyn() ); }
		if (HX_FIELD_EQ(inName,"read") ) { return ::hx::Val( read_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pLast") ) { return ::hx::Val( pLast ); }
		if (HX_FIELD_EQ(inName,"input") ) { return ::hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"setup") ) { return ::hx::Val( setup_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pFirst") ) { return ::hx::Val( pFirst ); }
		if (HX_FIELD_EQ(inName,"finalY") ) { return ::hx::Val( finalY ); }
		if (HX_FIELD_EQ(inName,"decode") ) { return ::hx::Val( decode_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nextSeg") ) { return ::hx::Val( nextSeg ); }
		if (HX_FIELD_EQ(inName,"lastSeg") ) { return ::hx::Val( lastSeg ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segments") ) { return ::hx::Val( segments ); }
		if (HX_FIELD_EQ(inName,"readBits") ) { return ::hx::Val( readBits_dyn() ); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return ::hx::Val( readByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"findPage") ) { return ::hx::Val( findPage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"validBits") ) { return ::hx::Val( validBits ); }
		if (HX_FIELD_EQ(inName,"decodeRaw") ) { return ::hx::Val( decodeRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt32") ) { return ::hx::Val( readInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return ::hx::Val( readBytes_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesInSeg") ) { return ::hx::Val( bytesInSeg ); }
		if (HX_FIELD_EQ(inName,"currentLoc") ) { return ::hx::Val( currentLoc ); }
		if (HX_FIELD_EQ(inName,"readPacket") ) { return ::hx::Val( readPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"isLastByte") ) { return ::hx::Val( isLastByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"readString") ) { return ::hx::Val( readString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstDecode") ) { return ::hx::Val( firstDecode ); }
		if (HX_FIELD_EQ(inName,"startPacket") ) { return ::hx::Val( startPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"flushPacket") ) { return ::hx::Val( flushPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepHuffman") ) { return ::hx::Val( prepHuffman_dyn() ); }
		if (HX_FIELD_EQ(inName,"analyzePage") ) { return ::hx::Val( analyzePage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastSegWhich") ) { return ::hx::Val( lastSegWhich ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPosition") ) { return ::hx::Val( inputPosition ); }
		if (HX_FIELD_EQ(inName,"currentSample") ) { return ::hx::Val( currentSample ); }
		if (HX_FIELD_EQ(inName,"readPacketRaw") ) { return ::hx::Val( readPacketRaw_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"channelBuffers") ) { return ::hx::Val( channelBuffers ); }
		if (HX_FIELD_EQ(inName,"previousWindow") ) { return ::hx::Val( previousWindow ); }
		if (HX_FIELD_EQ(inName,"previousLength") ) { return ::hx::Val( previousLength ); }
		if (HX_FIELD_EQ(inName,"vorbisValidate") ) { return ::hx::Val( vorbisValidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"capturePattern") ) { return ::hx::Val( capturePattern_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInputOffset") ) { return ::hx::Val( setInputOffset_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentLocValid") ) { return ::hx::Val( currentLocValid ); }
		if (HX_FIELD_EQ(inName,"getSampleNumber") ) { return ::hx::Val( getSampleNumber_dyn() ); }
		if (HX_FIELD_EQ(inName,"forcePageResync") ) { return ::hx::Val( forcePageResync_dyn() ); }
		if (HX_FIELD_EQ(inName,"decodeScalarRaw") ) { return ::hx::Val( decodeScalarRaw_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"channelBufferEnd") ) { return ::hx::Val( channelBufferEnd ); }
		if (HX_FIELD_EQ(inName,"maybeStartPacket") ) { return ::hx::Val( maybeStartPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"startFirstDecode") ) { return ::hx::Val( startFirstDecode_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"knownLocForPacket") ) { return ::hx::Val( knownLocForPacket ); }
		if (HX_FIELD_EQ(inName,"firstPageValidate") ) { return ::hx::Val( firstPageValidate_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"channelBufferStart") ) { return ::hx::Val( channelBufferStart ); }
		if (HX_FIELD_EQ(inName,"endSegWithKnownLoc") ) { return ::hx::Val( endSegWithKnownLoc ); }
		if (HX_FIELD_EQ(inName,"finishDecodePacket") ) { return ::hx::Val( finishDecodePacket_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"firstAudioPageOffset") ) { return ::hx::Val( firstAudioPageOffset ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"discardSamplesDeferred") ) { return ::hx::Val( discardSamplesDeferred ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VorbisDecodeState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eof") ) { eof=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acc") ) { acc=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { _hx_set_page(HX_CTX_GET,inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Page >()); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pLast") ) { _hx_set_pLast(HX_CTX_GET,inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ProbedPage >()); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { _hx_set_input(HX_CTX_GET,inValue.Cast<  ::haxe::io::Input >()); return inValue; }
		if (HX_FIELD_EQ(inName,"error") ) { _hx_set_error(HX_CTX_GET,inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ReaderError >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pFirst") ) { _hx_set_pFirst(HX_CTX_GET,inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ProbedPage >()); return inValue; }
		if (HX_FIELD_EQ(inName,"finalY") ) { _hx_set_finalY(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nextSeg") ) { nextSeg=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSeg") ) { lastSeg=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segments") ) { _hx_set_segments(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"validBits") ) { validBits=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesInSeg") ) { bytesInSeg=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentLoc") ) { currentLoc=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstDecode") ) { firstDecode=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastSegWhich") ) { lastSegWhich=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPosition") ) { inputPosition=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSample") ) { currentSample=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"channelBuffers") ) { _hx_set_channelBuffers(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"previousWindow") ) { _hx_set_previousWindow(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"previousLength") ) { previousLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentLocValid") ) { currentLocValid=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"channelBufferEnd") ) { channelBufferEnd=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"knownLocForPacket") ) { knownLocForPacket=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"channelBufferStart") ) { channelBufferStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endSegWithKnownLoc") ) { endSegWithKnownLoc=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"firstAudioPageOffset") ) { firstAudioPageOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"discardSamplesDeferred") ) { discardSamplesDeferred=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VorbisDecodeState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("page",4f,da,51,4a));
	outFields->push(HX_("eof",bc,04,4d,00));
	outFields->push(HX_("pFirst",a0,51,c3,5b));
	outFields->push(HX_("pLast",e6,2e,67,af));
	outFields->push(HX_("validBits",22,ca,ec,2d));
	outFields->push(HX_("inputPosition",d3,3a,9c,59));
	outFields->push(HX_("input",0a,c4,1d,be));
	outFields->push(HX_("discardSamplesDeferred",ca,30,f6,72));
	outFields->push(HX_("segments",60,ed,26,4e));
	outFields->push(HX_("bytesInSeg",45,b8,af,ef));
	outFields->push(HX_("channelBuffers",f0,b8,bc,61));
	outFields->push(HX_("channelBufferStart",3f,1f,c8,ba));
	outFields->push(HX_("channelBufferEnd",78,4d,ee,d4));
	outFields->push(HX_("currentSample",43,e1,a6,00));
	outFields->push(HX_("previousWindow",87,47,23,41));
	outFields->push(HX_("previousLength",7d,48,9e,8d));
	outFields->push(HX_("finalY",23,28,79,86));
	outFields->push(HX_("firstDecode",7e,8d,8f,49));
	outFields->push(HX_("nextSeg",62,28,46,a5));
	outFields->push(HX_("acc",41,f1,49,00));
	outFields->push(HX_("lastSeg",df,e2,ac,d7));
	outFields->push(HX_("lastSegWhich",7e,00,e0,06));
	outFields->push(HX_("endSegWithKnownLoc",7d,01,c0,57));
	outFields->push(HX_("knownLocForPacket",f4,ab,ab,3c));
	outFields->push(HX_("error",c8,cb,29,73));
	outFields->push(HX_("currentLoc",c7,19,2d,c7));
	outFields->push(HX_("currentLocValid",b5,f9,a2,57));
	outFields->push(HX_("firstAudioPageOffset",68,75,67,0d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VorbisDecodeState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::audio2::ogg::vorbis::data::Page */ ,(int)offsetof(VorbisDecodeState_obj,page),HX_("page",4f,da,51,4a)},
	{::hx::fsBool,(int)offsetof(VorbisDecodeState_obj,eof),HX_("eof",bc,04,4d,00)},
	{::hx::fsObject /*  ::kha::audio2::ogg::vorbis::data::ProbedPage */ ,(int)offsetof(VorbisDecodeState_obj,pFirst),HX_("pFirst",a0,51,c3,5b)},
	{::hx::fsObject /*  ::kha::audio2::ogg::vorbis::data::ProbedPage */ ,(int)offsetof(VorbisDecodeState_obj,pLast),HX_("pLast",e6,2e,67,af)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,validBits),HX_("validBits",22,ca,ec,2d)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,inputPosition),HX_("inputPosition",d3,3a,9c,59)},
	{::hx::fsObject /*  ::haxe::io::Input */ ,(int)offsetof(VorbisDecodeState_obj,input),HX_("input",0a,c4,1d,be)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,discardSamplesDeferred),HX_("discardSamplesDeferred",ca,30,f6,72)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(VorbisDecodeState_obj,segments),HX_("segments",60,ed,26,4e)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,bytesInSeg),HX_("bytesInSeg",45,b8,af,ef)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(VorbisDecodeState_obj,channelBuffers),HX_("channelBuffers",f0,b8,bc,61)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,channelBufferStart),HX_("channelBufferStart",3f,1f,c8,ba)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,channelBufferEnd),HX_("channelBufferEnd",78,4d,ee,d4)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentSample),HX_("currentSample",43,e1,a6,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(VorbisDecodeState_obj,previousWindow),HX_("previousWindow",87,47,23,41)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,previousLength),HX_("previousLength",7d,48,9e,8d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(VorbisDecodeState_obj,finalY),HX_("finalY",23,28,79,86)},
	{::hx::fsBool,(int)offsetof(VorbisDecodeState_obj,firstDecode),HX_("firstDecode",7e,8d,8f,49)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,nextSeg),HX_("nextSeg",62,28,46,a5)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,acc),HX_("acc",41,f1,49,00)},
	{::hx::fsBool,(int)offsetof(VorbisDecodeState_obj,lastSeg),HX_("lastSeg",df,e2,ac,d7)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,lastSegWhich),HX_("lastSegWhich",7e,00,e0,06)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,endSegWithKnownLoc),HX_("endSegWithKnownLoc",7d,01,c0,57)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,knownLocForPacket),HX_("knownLocForPacket",f4,ab,ab,3c)},
	{::hx::fsObject /*  ::kha::audio2::ogg::vorbis::data::ReaderError */ ,(int)offsetof(VorbisDecodeState_obj,error),HX_("error",c8,cb,29,73)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentLoc),HX_("currentLoc",c7,19,2d,c7)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentLocValid),HX_("currentLocValid",b5,f9,a2,57)},
	{::hx::fsInt,(int)offsetof(VorbisDecodeState_obj,firstAudioPageOffset),HX_("firstAudioPageOffset",68,75,67,0d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo VorbisDecodeState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &VorbisDecodeState_obj::INVALID_BITS,HX_("INVALID_BITS",ae,04,71,11)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String VorbisDecodeState_obj_sMemberFields[] = {
	HX_("page",4f,da,51,4a),
	HX_("eof",bc,04,4d,00),
	HX_("pFirst",a0,51,c3,5b),
	HX_("pLast",e6,2e,67,af),
	HX_("validBits",22,ca,ec,2d),
	HX_("inputPosition",d3,3a,9c,59),
	HX_("input",0a,c4,1d,be),
	HX_("discardSamplesDeferred",ca,30,f6,72),
	HX_("segments",60,ed,26,4e),
	HX_("bytesInSeg",45,b8,af,ef),
	HX_("channelBuffers",f0,b8,bc,61),
	HX_("channelBufferStart",3f,1f,c8,ba),
	HX_("channelBufferEnd",78,4d,ee,d4),
	HX_("currentSample",43,e1,a6,00),
	HX_("previousWindow",87,47,23,41),
	HX_("previousLength",7d,48,9e,8d),
	HX_("finalY",23,28,79,86),
	HX_("firstDecode",7e,8d,8f,49),
	HX_("nextSeg",62,28,46,a5),
	HX_("acc",41,f1,49,00),
	HX_("lastSeg",df,e2,ac,d7),
	HX_("lastSegWhich",7e,00,e0,06),
	HX_("endSegWithKnownLoc",7d,01,c0,57),
	HX_("knownLocForPacket",f4,ab,ab,3c),
	HX_("error",c8,cb,29,73),
	HX_("currentLoc",c7,19,2d,c7),
	HX_("currentLocValid",b5,f9,a2,57),
	HX_("firstAudioPageOffset",68,75,67,0d),
	HX_("setup",7d,ae,2f,7a),
	HX_("clone",5d,13,63,48),
	HX_("next",f3,84,02,49),
	HX_("startPacket",8a,b5,7e,5b),
	HX_("maybeStartPacket",c2,0a,ad,2a),
	HX_("readBits",7c,d5,0e,69),
	HX_("readPacketRaw",0a,15,8a,da),
	HX_("readPacket",7e,3b,14,dd),
	HX_("flushPacket",6c,99,ec,8e),
	HX_("vorbisValidate",09,9b,51,16),
	HX_("firstPageValidate",55,1a,ec,1c),
	HX_("startFirstDecode",3c,28,8b,c8),
	HX_("capturePattern",6a,1a,b8,20),
	HX_("skip",7f,16,55,4c),
	HX_("prepHuffman",c0,3f,31,ba),
	HX_("decode",2e,5d,ed,64),
	HX_("decodeRaw",5a,21,b1,44),
	HX_("isLastByte",88,4a,1b,4f),
	HX_("finishDecodePacket",49,7c,b3,7f),
	HX_("readInt32",18,e0,07,8f),
	HX_("readByte",7e,f9,1a,69),
	HX_("read",56,4b,a7,4b),
	HX_("readBytes",35,55,7f,8e),
	HX_("readString",c7,0c,ac,0a),
	HX_("getSampleNumber",49,2c,d1,08),
	HX_("forcePageResync",08,51,06,c7),
	HX_("setInputOffset",bb,ae,31,fd),
	HX_("findPage",28,e7,e5,9c),
	HX_("analyzePage",bb,d7,d9,4e),
	HX_("decodeScalarRaw",0e,d7,cb,48),
	::String(null()) };

static void VorbisDecodeState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VorbisDecodeState_obj::INVALID_BITS,"INVALID_BITS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VorbisDecodeState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VorbisDecodeState_obj::INVALID_BITS,"INVALID_BITS");
};

#endif

::hx::Class VorbisDecodeState_obj::__mClass;

static ::String VorbisDecodeState_obj_sStaticFields[] = {
	HX_("INVALID_BITS",ae,04,71,11),
	::String(null())
};

void VorbisDecodeState_obj::__register()
{
	VorbisDecodeState_obj _hx_dummy;
	VorbisDecodeState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VorbisDecodeState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(VorbisDecodeState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VorbisDecodeState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VorbisDecodeState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VorbisDecodeState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VorbisDecodeState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VorbisDecodeState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VorbisDecodeState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_29_boot)
HXDLIN(  29)		INVALID_BITS = -1;
            	}
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis

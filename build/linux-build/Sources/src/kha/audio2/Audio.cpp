// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <hxinc/kha/Sound.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <hxinc/kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio
#include <hxinc/kha/audio2/Audio.h>
#endif
#ifndef INCLUDED_kha_audio2_Buffer
#include <hxinc/kha/audio2/Buffer.h>
#endif
#ifndef INCLUDED_kha_internal_IntBox
#include <hxinc/kha/internal/IntBox.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4c284ccaa8c50f8e_12__init,"kha.audio2.Audio","_init",0xded2726f,"kha.audio2.Audio._init","kha/audio2/Audio.hx",12,0xd33fa1b0)
HX_LOCAL_STACK_FRAME(_hx_pos_4c284ccaa8c50f8e_18__callCallback,"kha.audio2.Audio","_callCallback",0xe4856ae2,"kha.audio2.Audio._callCallback","kha/audio2/Audio.hx",18,0xd33fa1b0)
HX_LOCAL_STACK_FRAME(_hx_pos_4c284ccaa8c50f8e_37__readSample,"kha.audio2.Audio","_readSample",0xa617ccbf,"kha.audio2.Audio._readSample","kha/audio2/Audio.hx",37,0xd33fa1b0)
HX_LOCAL_STACK_FRAME(_hx_pos_4c284ccaa8c50f8e_54_stream,"kha.audio2.Audio","stream",0x707f0900,"kha.audio2.Audio.stream","kha/audio2/Audio.hx",54,0xd33fa1b0)
HX_LOCAL_STACK_FRAME(_hx_pos_4c284ccaa8c50f8e_9_boot,"kha.audio2.Audio","boot",0x446f58b2,"kha.audio2.Audio.boot","kha/audio2/Audio.hx",9,0xd33fa1b0)
HX_LOCAL_STACK_FRAME(_hx_pos_4c284ccaa8c50f8e_47_boot,"kha.audio2.Audio","boot",0x446f58b2,"kha.audio2.Audio.boot","kha/audio2/Audio.hx",47,0xd33fa1b0)
namespace kha{
namespace audio2{

void Audio_obj::__construct() { }

Dynamic Audio_obj::__CreateEmpty() { return new Audio_obj; }

void *Audio_obj::_hx_vtable = 0;

Dynamic Audio_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Audio_obj > _hx_result = new Audio_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Audio_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x39bafb36;
}

 ::kha::audio2::Buffer Audio_obj::buffer;

 ::kha::internal::IntBox Audio_obj::intBox;

void Audio_obj::_init(){
            	HX_GC_STACKFRAME(&_hx_pos_4c284ccaa8c50f8e_12__init)
HXLINE(  13)		int bufferSize = 2048;
HXLINE(  14)		::kha::audio2::Audio_obj::buffer =  ::kha::audio2::Buffer_obj::__alloc( HX_CTX ,(bufferSize * 4),2,44100);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,_init,(void))

void Audio_obj::_callCallback(int samples,int sampleRate){
            	HX_STACKFRAME(&_hx_pos_4c284ccaa8c50f8e_18__callCallback)
HXLINE(  19)		if (::hx::IsNull( ::kha::audio2::Audio_obj::buffer )) {
HXLINE(  19)			return;
            		}
HXLINE(  20)		::kha::audio2::Audio_obj::buffer->samplesPerSecond = sampleRate;
HXLINE(  21)		if (::hx::IsNotNull( ::kha::audio2::Audio_obj::audioCallback )) {
HXLINE(  22)			::kha::audio2::Audio_obj::intBox->value = samples;
HXLINE(  23)			::kha::audio2::Audio_obj::audioCallback(::kha::audio2::Audio_obj::intBox,::kha::audio2::Audio_obj::buffer);
            		}
            		else {
HXLINE(  26)			int _g = 0;
HXDLIN(  26)			int _g1 = samples;
HXDLIN(  26)			while((_g < _g1)){
HXLINE(  26)				_g = (_g + 1);
HXDLIN(  26)				int i = (_g - 1);
HXLINE(  27)				::kha::audio2::Audio_obj::buffer->data->self.set(::kha::audio2::Audio_obj::buffer->writeLocation,( (float)(0) ));
HXLINE(  28)				 ::kha::audio2::Buffer _hx_tmp = ::kha::audio2::Audio_obj::buffer;
HXDLIN(  28)				_hx_tmp->writeLocation = (_hx_tmp->writeLocation + 1);
HXLINE(  29)				if ((::kha::audio2::Audio_obj::buffer->writeLocation >= ::kha::audio2::Audio_obj::buffer->size)) {
HXLINE(  30)					::kha::audio2::Audio_obj::buffer->writeLocation = 0;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,_callCallback,(void))

Float Audio_obj::_readSample(){
            	HX_STACKFRAME(&_hx_pos_4c284ccaa8c50f8e_37__readSample)
HXLINE(  38)		if (::hx::IsNull( ::kha::audio2::Audio_obj::buffer )) {
HXLINE(  38)			return ( (Float)(0) );
            		}
HXLINE(  39)		float value = ::kha::audio2::Audio_obj::buffer->data->self.get(::kha::audio2::Audio_obj::buffer->readLocation);
HXLINE(  40)		++::kha::audio2::Audio_obj::buffer->readLocation;
HXLINE(  41)		if ((::kha::audio2::Audio_obj::buffer->readLocation >= ::kha::audio2::Audio_obj::buffer->size)) {
HXLINE(  42)			::kha::audio2::Audio_obj::buffer->readLocation = 0;
            		}
HXLINE(  44)		return ( (Float)(value) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,_readSample,return )

bool Audio_obj::disableGcInteractions;

int Audio_obj::samplesPerSecond;

 ::Dynamic Audio_obj::audioCallback;

::Dynamic Audio_obj::stream( ::kha::Sound sound,::hx::Null< bool >  __o_loop){
            		bool loop = __o_loop.Default(false);
            	HX_STACKFRAME(&_hx_pos_4c284ccaa8c50f8e_54_stream)
HXDLIN(  54)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,stream,return )


Audio_obj::Audio_obj()
{
}

bool Audio_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_init") ) { outValue = _init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { outValue = ( buffer ); return true; }
		if (HX_FIELD_EQ(inName,"intBox") ) { outValue = ( intBox ); return true; }
		if (HX_FIELD_EQ(inName,"stream") ) { outValue = stream_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_readSample") ) { outValue = _readSample_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_callCallback") ) { outValue = _callCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"audioCallback") ) { outValue = ( audioCallback ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"samplesPerSecond") ) { outValue = ( samplesPerSecond ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"disableGcInteractions") ) { outValue = ( disableGcInteractions ); return true; }
	}
	return false;
}

bool Audio_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=ioValue.Cast<  ::kha::audio2::Buffer >(); return true; }
		if (HX_FIELD_EQ(inName,"intBox") ) { intBox=ioValue.Cast<  ::kha::internal::IntBox >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"audioCallback") ) { audioCallback=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"samplesPerSecond") ) { samplesPerSecond=ioValue.Cast< int >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"disableGcInteractions") ) { disableGcInteractions=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Audio_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Audio_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::kha::audio2::Buffer */ ,(void *) &Audio_obj::buffer,HX_("buffer",00,bd,94,d0)},
	{::hx::fsObject /*  ::kha::internal::IntBox */ ,(void *) &Audio_obj::intBox,HX_("intBox",5c,e8,6b,9e)},
	{::hx::fsBool,(void *) &Audio_obj::disableGcInteractions,HX_("disableGcInteractions",a5,84,33,e5)},
	{::hx::fsInt,(void *) &Audio_obj::samplesPerSecond,HX_("samplesPerSecond",e8,cd,b6,e5)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Audio_obj::audioCallback,HX_("audioCallback",bb,94,3e,7f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Audio_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Audio_obj::buffer,"buffer");
	HX_MARK_MEMBER_NAME(Audio_obj::intBox,"intBox");
	HX_MARK_MEMBER_NAME(Audio_obj::disableGcInteractions,"disableGcInteractions");
	HX_MARK_MEMBER_NAME(Audio_obj::samplesPerSecond,"samplesPerSecond");
	HX_MARK_MEMBER_NAME(Audio_obj::audioCallback,"audioCallback");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Audio_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Audio_obj::buffer,"buffer");
	HX_VISIT_MEMBER_NAME(Audio_obj::intBox,"intBox");
	HX_VISIT_MEMBER_NAME(Audio_obj::disableGcInteractions,"disableGcInteractions");
	HX_VISIT_MEMBER_NAME(Audio_obj::samplesPerSecond,"samplesPerSecond");
	HX_VISIT_MEMBER_NAME(Audio_obj::audioCallback,"audioCallback");
};

#endif

::hx::Class Audio_obj::__mClass;

static ::String Audio_obj_sStaticFields[] = {
	HX_("buffer",00,bd,94,d0),
	HX_("intBox",5c,e8,6b,9e),
	HX_("_init",ef,56,cc,f8),
	HX_("_callCallback",62,cf,b7,99),
	HX_("_readSample",3f,11,50,e9),
	HX_("disableGcInteractions",a5,84,33,e5),
	HX_("samplesPerSecond",e8,cd,b6,e5),
	HX_("audioCallback",bb,94,3e,7f),
	HX_("stream",80,14,2d,11),
	::String(null())
};

void Audio_obj::__register()
{
	Audio_obj _hx_dummy;
	Audio_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.Audio",ee,db,10,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Audio_obj::__GetStatic;
	__mClass->mSetStaticField = &Audio_obj::__SetStatic;
	__mClass->mMarkFunc = Audio_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Audio_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Audio_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Audio_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Audio_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Audio_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Audio_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_4c284ccaa8c50f8e_9_boot)
HXDLIN(   9)		intBox =  ::kha::internal::IntBox_obj::__alloc( HX_CTX ,0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4c284ccaa8c50f8e_47_boot)
HXDLIN(  47)		disableGcInteractions = false;
            	}
}

} // end namespace kha
} // end namespace audio2

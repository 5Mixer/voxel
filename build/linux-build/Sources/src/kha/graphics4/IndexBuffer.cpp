// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d3cb332205fc9ba7_15_new,"kha.graphics4.IndexBuffer","new",0x2cfac555,"kha.graphics4.IndexBuffer.new","kha/graphics4/IndexBuffer.hx",15,0xae48d67d)
HX_LOCAL_STACK_FRAME(_hx_pos_d3cb332205fc9ba7_22_delete,"kha.graphics4.IndexBuffer","delete",0x13f39256,"kha.graphics4.IndexBuffer.delete","kha/graphics4/IndexBuffer.hx",22,0xae48d67d)
HX_LOCAL_STACK_FRAME(_hx_pos_d3cb332205fc9ba7_31_lockPrivate,"kha.graphics4.IndexBuffer","lockPrivate",0xcc154e4d,"kha.graphics4.IndexBuffer.lockPrivate","kha/graphics4/IndexBuffer.hx",31,0xae48d67d)
HX_LOCAL_STACK_FRAME(_hx_pos_d3cb332205fc9ba7_34_lock,"kha.graphics4.IndexBuffer","lock",0x2d26fd56,"kha.graphics4.IndexBuffer.lock","kha/graphics4/IndexBuffer.hx",34,0xae48d67d)
HX_LOCAL_STACK_FRAME(_hx_pos_d3cb332205fc9ba7_41_unlockPrivate,"kha.graphics4.IndexBuffer","unlockPrivate",0xbcc7ebd4,"kha.graphics4.IndexBuffer.unlockPrivate","kha/graphics4/IndexBuffer.hx",41,0xae48d67d)
HX_LOCAL_STACK_FRAME(_hx_pos_d3cb332205fc9ba7_46_unlock,"kha.graphics4.IndexBuffer","unlock",0x0ea774ef,"kha.graphics4.IndexBuffer.unlock","kha/graphics4/IndexBuffer.hx",46,0xae48d67d)
HX_LOCAL_STACK_FRAME(_hx_pos_d3cb332205fc9ba7_50_count,"kha.graphics4.IndexBuffer","count",0x26692104,"kha.graphics4.IndexBuffer.count","kha/graphics4/IndexBuffer.hx",50,0xae48d67d)
namespace kha{
namespace graphics4{

void IndexBuffer_obj::__construct(int indexCount,int usage,::hx::Null< bool >  __o_canRead){
            		bool canRead = __o_canRead.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d3cb332205fc9ba7_15_new)
HXLINE(  16)		this->myCount = indexCount;
HXLINE(  17)		 ::kha::arrays::Uint32ArrayPrivate this1 =  ::kha::arrays::Uint32ArrayPrivate_obj::__alloc( HX_CTX ,0);
HXDLIN(  17)		this->_hx_set_data(HX_CTX, this1);
HXLINE(  18)		buffer = new Kore::Graphics4::IndexBuffer(indexCount);;
            	}

Dynamic IndexBuffer_obj::__CreateEmpty() { return new IndexBuffer_obj; }

void *IndexBuffer_obj::_hx_vtable = 0;

Dynamic IndexBuffer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IndexBuffer_obj > _hx_result = new IndexBuffer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool IndexBuffer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b0dca85;
}

void IndexBuffer_obj::_hx_delete(){
            	HX_STACKFRAME(&_hx_pos_d3cb332205fc9ba7_22_delete)
HXDLIN(  22)		delete buffer; buffer = nullptr;;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexBuffer_obj,_hx_delete,(void))

 ::kha::arrays::Uint32ArrayPrivate IndexBuffer_obj::lockPrivate(int start,int count){
            	HX_STACKFRAME(&_hx_pos_d3cb332205fc9ba7_31_lockPrivate)
            	
		data->self.data = (unsigned int*)buffer->lock() + start;
		data->self.myLength = count;
		return data;
	

HXDLIN(  31)		return this->data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IndexBuffer_obj,lockPrivate,return )

 ::kha::arrays::Uint32ArrayPrivate IndexBuffer_obj::lock( ::Dynamic start, ::Dynamic count){
            	HX_STACKFRAME(&_hx_pos_d3cb332205fc9ba7_34_lock)
HXLINE(  35)		if (::hx::IsNull( start )) {
HXLINE(  35)			start = 0;
            		}
HXLINE(  36)		if (::hx::IsNull( count )) {
HXLINE(  36)			count = this->count();
            		}
HXLINE(  37)		return this->lockPrivate(( (int)(start) ),( (int)(count) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(IndexBuffer_obj,lock,return )

void IndexBuffer_obj::unlockPrivate(){
            	HX_STACKFRAME(&_hx_pos_d3cb332205fc9ba7_41_unlockPrivate)
            	buffer->unlock(); data->self.data = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexBuffer_obj,unlockPrivate,(void))

void IndexBuffer_obj::unlock( ::Dynamic count){
            	HX_STACKFRAME(&_hx_pos_d3cb332205fc9ba7_46_unlock)
HXDLIN(  46)		this->unlockPrivate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexBuffer_obj,unlock,(void))

int IndexBuffer_obj::count(){
            	HX_STACKFRAME(&_hx_pos_d3cb332205fc9ba7_50_count)
HXDLIN(  50)		return this->myCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexBuffer_obj,count,return )


::hx::ObjectPtr< IndexBuffer_obj > IndexBuffer_obj::__new(int indexCount,int usage,::hx::Null< bool >  __o_canRead) {
	::hx::ObjectPtr< IndexBuffer_obj > __this = new IndexBuffer_obj();
	__this->__construct(indexCount,usage,__o_canRead);
	return __this;
}

::hx::ObjectPtr< IndexBuffer_obj > IndexBuffer_obj::__alloc(::hx::Ctx *_hx_ctx,int indexCount,int usage,::hx::Null< bool >  __o_canRead) {
	IndexBuffer_obj *__this = (IndexBuffer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IndexBuffer_obj), true, "kha.graphics4.IndexBuffer"));
	*(void **)__this = IndexBuffer_obj::_hx_vtable;
	__this->__construct(indexCount,usage,__o_canRead);
	return __this;
}

IndexBuffer_obj::IndexBuffer_obj()
{
}

void IndexBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IndexBuffer);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(myCount,"myCount");
	HX_MARK_END_CLASS();
}

void IndexBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(myCount,"myCount");
}

::hx::Val IndexBuffer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return ::hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return ::hx::Val( count_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return ::hx::Val( _hx_delete_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return ::hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myCount") ) { return ::hx::Val( myCount ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lockPrivate") ) { return ::hx::Val( lockPrivate_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unlockPrivate") ) { return ::hx::Val( unlockPrivate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val IndexBuffer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { _hx_set_data(HX_CTX_GET,inValue.Cast<  ::kha::arrays::Uint32ArrayPrivate >()); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myCount") ) { myCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IndexBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("myCount",c3,ed,62,f3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IndexBuffer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::arrays::Uint32ArrayPrivate */ ,(int)offsetof(IndexBuffer_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(IndexBuffer_obj,myCount),HX_("myCount",c3,ed,62,f3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IndexBuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String IndexBuffer_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("myCount",c3,ed,62,f3),
	HX_("delete",2b,c0,d8,6a),
	HX_("lockPrivate",58,dc,50,90),
	HX_("lock",eb,9b,b7,47),
	HX_("unlockPrivate",9f,52,8b,b1),
	HX_("unlock",c4,a2,8c,65),
	HX_("count",cf,44,63,4a),
	::String(null()) };

::hx::Class IndexBuffer_obj::__mClass;

void IndexBuffer_obj::__register()
{
	IndexBuffer_obj _hx_dummy;
	IndexBuffer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.IndexBuffer",e3,76,d6,ee);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IndexBuffer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IndexBuffer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IndexBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IndexBuffer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4

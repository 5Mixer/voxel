// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <hxinc/kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_InternalPipeline
#include <hxinc/kha/graphics4/InternalPipeline.h>
#endif
#ifndef INCLUDED_kha_graphics4_PerFramebufferPipelineCache
#include <hxinc/kha/graphics4/PerFramebufferPipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a1398f166f3e074_114_new,"kha.graphics4.ImageShaderPainter","new",0xa318bb6c,"kha.graphics4.ImageShaderPainter.new","kha/graphics4/Graphics2.hx",114,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_142_get_pipeline,"kha.graphics4.ImageShaderPainter","get_pipeline",0x44e0c29f,"kha.graphics4.ImageShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",142,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_145_set_pipeline,"kha.graphics4.ImageShaderPainter","set_pipeline",0x59d9e613,"kha.graphics4.ImageShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",145,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_151_setProjection,"kha.graphics4.ImageShaderPainter","setProjection",0xdca978dd,"kha.graphics4.ImageShaderPainter.setProjection","kha/graphics4/Graphics2.hx",151,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_165_initBuffers,"kha.graphics4.ImageShaderPainter","initBuffers",0xef73e94f,"kha.graphics4.ImageShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",165,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_187_setRectVertices,"kha.graphics4.ImageShaderPainter","setRectVertices",0x24abad0b,"kha.graphics4.ImageShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",187,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_206_setRectTexCoords,"kha.graphics4.ImageShaderPainter","setRectTexCoords",0x2a0ce013,"kha.graphics4.ImageShaderPainter.setRectTexCoords","kha/graphics4/Graphics2.hx",206,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_221_setRectColor,"kha.graphics4.ImageShaderPainter","setRectColor",0x3cb78511,"kha.graphics4.ImageShaderPainter.setRectColor","kha/graphics4/Graphics2.hx",221,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_244_drawBuffer,"kha.graphics4.ImageShaderPainter","drawBuffer",0x0d340698,"kha.graphics4.ImageShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",244,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_273_setBilinearFilter,"kha.graphics4.ImageShaderPainter","setBilinearFilter",0x7d147312,"kha.graphics4.ImageShaderPainter.setBilinearFilter","kha/graphics4/Graphics2.hx",273,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_279_setBilinearMipmapFilter,"kha.graphics4.ImageShaderPainter","setBilinearMipmapFilter",0x1f8fea3a,"kha.graphics4.ImageShaderPainter.setBilinearMipmapFilter","kha/graphics4/Graphics2.hx",279,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_290_drawImage,"kha.graphics4.ImageShaderPainter","drawImage",0xba3d10c3,"kha.graphics4.ImageShaderPainter.drawImage","kha/graphics4/Graphics2.hx",290,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_307_drawImage2,"kha.graphics4.ImageShaderPainter","drawImage2",0x3b319a0f,"kha.graphics4.ImageShaderPainter.drawImage2","kha/graphics4/Graphics2.hx",307,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_319_drawImageScale,"kha.graphics4.ImageShaderPainter","drawImageScale",0xc1fc8ac7,"kha.graphics4.ImageShaderPainter.drawImageScale","kha/graphics4/Graphics2.hx",319,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_331_end,"kha.graphics4.ImageShaderPainter","end",0xa311eee7,"kha.graphics4.ImageShaderPainter.end","kha/graphics4/Graphics2.hx",331,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_154_initShaders,"kha.graphics4.ImageShaderPainter","initShaders",0x9d69c78a,"kha.graphics4.ImageShaderPainter.initShaders","kha/graphics4/Graphics2.hx",154,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_116_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",116,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_117_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",117,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_118_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",118,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_119_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",119,0x0c1de808)
namespace kha{
namespace graphics4{

void ImageShaderPainter_obj::__construct(::Dynamic g4){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_114_new)
HXLINE( 129)		this->_hx_set_myPipeline(HX_CTX, null());
HXLINE( 127)		this->bilinearMipmaps = false;
HXLINE( 126)		this->bilinear = false;
HXLINE( 133)		this->_hx_set_g(HX_CTX, g4);
HXLINE( 134)		::kha::graphics4::ImageShaderPainter_obj::bufferStart = 0;
HXLINE( 135)		::kha::graphics4::ImageShaderPainter_obj::bufferIndex = 0;
HXLINE( 136)		::kha::graphics4::ImageShaderPainter_obj::initShaders();
HXLINE( 137)		this->_hx_set_myPipeline(HX_CTX, ::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline);
HXLINE( 138)		this->initBuffers();
            	}

Dynamic ImageShaderPainter_obj::__CreateEmpty() { return new ImageShaderPainter_obj; }

void *ImageShaderPainter_obj::_hx_vtable = 0;

Dynamic ImageShaderPainter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageShaderPainter_obj > _hx_result = new ImageShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ImageShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x039b07b4;
}

::Dynamic ImageShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_142_get_pipeline)
HXDLIN( 142)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,get_pipeline,return )

::Dynamic ImageShaderPainter_obj::set_pipeline(::Dynamic pipe){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_145_set_pipeline)
HXLINE( 146)		::Dynamic _hx_tmp;
HXDLIN( 146)		if (::hx::IsNotNull( pipe )) {
HXLINE( 146)			_hx_tmp = pipe;
            		}
            		else {
HXLINE( 146)			_hx_tmp = ::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline;
            		}
HXDLIN( 146)		this->_hx_set_myPipeline(HX_CTX, _hx_tmp);
HXLINE( 147)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,set_pipeline,return )

void ImageShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_151_setProjection)
HXDLIN( 151)		this->_hx_set_projectionMatrix(HX_CTX, projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setProjection,(void))

void ImageShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_165_initBuffers)
HXDLIN( 165)		if (::hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer )) {
HXLINE( 166)			::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,6000,::kha::graphics4::ImageShaderPainter_obj::structure,1,null(),null());
HXLINE( 167)			::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE( 169)			::kha::graphics4::ImageShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,9000,0,null());
HXLINE( 170)			 ::kha::arrays::Uint32ArrayPrivate indices = ::kha::graphics4::ImageShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 171)			{
HXLINE( 171)				int _g = 0;
HXDLIN( 171)				while((_g < 1500)){
HXLINE( 171)					_g = (_g + 1);
HXDLIN( 171)					int i = (_g - 1);
HXLINE( 172)					indices->self.set(((i * 3) * 2),(i * 4));
HXLINE( 173)					indices->self.set((((i * 3) * 2) + 1),((i * 4) + 1));
HXLINE( 174)					indices->self.set((((i * 3) * 2) + 2),((i * 4) + 2));
HXLINE( 175)					indices->self.set((((i * 3) * 2) + 3),(i * 4));
HXLINE( 176)					indices->self.set((((i * 3) * 2) + 4),((i * 4) + 2));
HXLINE( 177)					indices->self.set((((i * 3) * 2) + 5),((i * 4) + 3));
            				}
            			}
HXLINE( 179)			::kha::graphics4::ImageShaderPainter_obj::indexBuffer->unlock(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initBuffers,(void))

void ImageShaderPainter_obj::setRectVertices(float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_187_setRectVertices)
HXLINE( 188)		int baseIndex = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXLINE( 189)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex,bottomleftx);
HXLINE( 190)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 1),bottomlefty);
HXLINE( 191)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 2),( (float)(((Float)-5.0)) ));
HXLINE( 193)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 9),topleftx);
HXLINE( 194)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 10),toplefty);
HXLINE( 195)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 11),( (float)(((Float)-5.0)) ));
HXLINE( 197)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 18),toprightx);
HXLINE( 198)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 19),toprighty);
HXLINE( 199)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 20),( (float)(((Float)-5.0)) ));
HXLINE( 201)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 27),bottomrightx);
HXLINE( 202)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 28),bottomrighty);
HXLINE( 203)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 29),( (float)(((Float)-5.0)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC8(ImageShaderPainter_obj,setRectVertices,(void))

void ImageShaderPainter_obj::setRectTexCoords(float left,float top,float right,float bottom){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_206_setRectTexCoords)
HXLINE( 207)		int baseIndex = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXLINE( 208)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 3),left);
HXLINE( 209)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 4),bottom);
HXLINE( 211)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 12),left);
HXLINE( 212)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 13),top);
HXLINE( 214)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 21),right);
HXLINE( 215)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 22),top);
HXLINE( 217)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 30),right);
HXLINE( 218)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 31),bottom);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectTexCoords,(void))

void ImageShaderPainter_obj::setRectColor(float r,float g,float b,float a){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_221_setRectColor)
HXLINE( 222)		int baseIndex = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXLINE( 223)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 5),r);
HXLINE( 224)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 6),g);
HXLINE( 225)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 7),b);
HXLINE( 226)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 8),a);
HXLINE( 228)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 14),r);
HXLINE( 229)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 15),g);
HXLINE( 230)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 16),b);
HXLINE( 231)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 17),a);
HXLINE( 233)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 23),r);
HXLINE( 234)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 24),g);
HXLINE( 235)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 25),b);
HXLINE( 236)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 26),a);
HXLINE( 238)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 32),r);
HXLINE( 239)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 33),g);
HXLINE( 240)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 34),b);
HXLINE( 241)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 35),a);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectColor,(void))

void ImageShaderPainter_obj::drawBuffer(bool end){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_244_drawBuffer)
HXLINE( 245)		if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) == 0)) {
HXLINE( 246)			return;
            		}
HXLINE( 249)		::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->unlock(((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 4));
HXLINE( 250)		 ::kha::graphics4::InternalPipeline pipeline = ::kha::graphics4::PipelineCache_obj::get(this->myPipeline,null(),3);
HXLINE( 251)		::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline->pipeline);
HXLINE( 252)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer);
HXLINE( 253)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ImageShaderPainter_obj::indexBuffer);
HXLINE( 254)		::kha::graphics4::Graphics_obj::setTexture(this->g,pipeline->textureLocation,::kha::graphics4::ImageShaderPainter_obj::lastTexture);
HXLINE( 255)		int _hx_tmp;
HXDLIN( 255)		if (this->bilinear) {
HXLINE( 255)			_hx_tmp = 1;
            		}
            		else {
HXLINE( 255)			_hx_tmp = 0;
            		}
HXDLIN( 255)		int _hx_tmp1;
HXDLIN( 255)		if (this->bilinear) {
HXLINE( 255)			_hx_tmp1 = 1;
            		}
            		else {
HXLINE( 255)			_hx_tmp1 = 0;
            		}
HXDLIN( 255)		int _hx_tmp2;
HXDLIN( 255)		if (this->bilinearMipmaps) {
HXLINE( 255)			_hx_tmp2 = 2;
            		}
            		else {
HXLINE( 255)			_hx_tmp2 = 0;
            		}
HXDLIN( 255)		::kha::graphics4::Graphics_obj::setTextureParameters(this->g,pipeline->textureLocation,2,2,_hx_tmp,_hx_tmp1,_hx_tmp2);
HXLINE( 256)		::kha::graphics4::Graphics_obj::setMatrix(this->g,pipeline->projectionLocation,this->projectionMatrix);
HXLINE( 258)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,((::kha::graphics4::ImageShaderPainter_obj::bufferStart * 2) * 3),(((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 2) * 3));
HXLINE( 260)		::kha::graphics4::Graphics_obj::setTexture(this->g,pipeline->textureLocation,null());
HXLINE( 262)		bool _hx_tmp3;
HXDLIN( 262)		if (!(end)) {
HXLINE( 262)			_hx_tmp3 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) * 4) >= 1500);
            		}
            		else {
HXLINE( 262)			_hx_tmp3 = true;
            		}
HXDLIN( 262)		if (_hx_tmp3) {
HXLINE( 263)			::kha::graphics4::ImageShaderPainter_obj::bufferStart = 0;
HXLINE( 264)			::kha::graphics4::ImageShaderPainter_obj::bufferIndex = 0;
HXLINE( 265)			::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock(0,null());
            		}
            		else {
HXLINE( 268)			::kha::graphics4::ImageShaderPainter_obj::bufferStart = ::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 269)			::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock((::kha::graphics4::ImageShaderPainter_obj::bufferStart * 4),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,drawBuffer,(void))

void ImageShaderPainter_obj::setBilinearFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_273_setBilinearFilter)
HXLINE( 274)		this->drawBuffer(false);
HXLINE( 275)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = null();
HXLINE( 276)		this->bilinear = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearFilter,(void))

void ImageShaderPainter_obj::setBilinearMipmapFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_279_setBilinearMipmapFilter)
HXLINE( 280)		this->drawBuffer(false);
HXLINE( 281)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = null();
HXLINE( 282)		this->bilinearMipmaps = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearMipmapFilter,(void))

void ImageShaderPainter_obj::drawImage( ::kha::Image img,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_290_drawImage)
HXLINE( 291)		 ::kha::Image tex = img;
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		if ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) < 1500)) {
HXLINE( 292)			if (::hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 292)				_hx_tmp = ::hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 292)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 292)			_hx_tmp = true;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 292)			this->drawBuffer(false);
            		}
HXLINE( 294)		{
HXLINE( 294)			float r = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 294)			float g = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 294)			float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 294)			float a = ((( (float)(::hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 294)			int baseIndex = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 5),r);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 6),g);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 7),b);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 8),a);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 14),r);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 15),g);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 16),b);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 17),a);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 23),r);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 24),g);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 25),b);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 26),a);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 32),r);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 33),g);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 34),b);
HXDLIN( 294)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 35),a);
            		}
HXLINE( 295)		{
HXLINE( 295)			int right = tex->get_width();
HXDLIN( 295)			float right1 = ( (float)((( (Float)(right) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 295)			int bottom = tex->get_height();
HXDLIN( 295)			float bottom1 = ( (float)((( (Float)(bottom) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 295)			int baseIndex1 = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 3),( (float)(0) ));
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 4),bottom1);
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 12),( (float)(0) ));
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 13),( (float)(0) ));
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 21),right1);
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 22),( (float)(0) ));
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 30),right1);
HXDLIN( 295)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 31),bottom1);
            		}
HXLINE( 296)		{
HXLINE( 296)			int baseIndex2 = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,bottomleftx);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 1),bottomlefty);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 2),( (float)(((Float)-5.0)) ));
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 9),topleftx);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 10),toplefty);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 11),( (float)(((Float)-5.0)) ));
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 18),toprightx);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 19),toprighty);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 20),( (float)(((Float)-5.0)) ));
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 27),bottomrightx);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 28),bottomrighty);
HXDLIN( 296)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 29),( (float)(((Float)-5.0)) ));
            		}
HXLINE( 298)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 299)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImage,(void))

void ImageShaderPainter_obj::drawImage2( ::kha::Image img,float sx,float sy,float sw,float sh,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_307_drawImage2)
HXLINE( 308)		 ::kha::Image tex = img;
HXLINE( 309)		bool _hx_tmp;
HXDLIN( 309)		if ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) < 1500)) {
HXLINE( 309)			if (::hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 309)				_hx_tmp = ::hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 309)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 309)			_hx_tmp = true;
            		}
HXDLIN( 309)		if (_hx_tmp) {
HXLINE( 309)			this->drawBuffer(false);
            		}
HXLINE( 311)		{
HXLINE( 311)			float left = ( (float)((( (Float)(sx) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 311)			float top = ( (float)((( (Float)(sy) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 311)			float right = ( (float)((( (Float)((sx + sw)) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 311)			float bottom = ( (float)((( (Float)((sy + sh)) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 311)			int baseIndex = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 3),left);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 4),bottom);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 12),left);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 13),top);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 21),right);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 22),top);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 30),right);
HXDLIN( 311)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 31),bottom);
            		}
HXLINE( 312)		{
HXLINE( 312)			float r = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 312)			float g = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 312)			float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 312)			float a = ((( (float)(::hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 312)			int baseIndex1 = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 5),r);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 6),g);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 7),b);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 8),a);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 14),r);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 15),g);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 16),b);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 17),a);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 23),r);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 24),g);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 25),b);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 26),a);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 32),r);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 33),g);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 34),b);
HXDLIN( 312)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 35),a);
            		}
HXLINE( 313)		{
HXLINE( 313)			int baseIndex2 = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,bottomleftx);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 1),bottomlefty);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 2),( (float)(((Float)-5.0)) ));
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 9),topleftx);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 10),toplefty);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 11),( (float)(((Float)-5.0)) ));
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 18),toprightx);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 19),toprighty);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 20),( (float)(((Float)-5.0)) ));
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 27),bottomrightx);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 28),bottomrighty);
HXDLIN( 313)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 29),( (float)(((Float)-5.0)) ));
            		}
HXLINE( 315)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 316)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC15(ImageShaderPainter_obj,drawImage2,(void))

void ImageShaderPainter_obj::drawImageScale( ::kha::Image img,float sx,float sy,float sw,float sh,float left,float top,float right,float bottom,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_319_drawImageScale)
HXLINE( 320)		 ::kha::Image tex = img;
HXLINE( 321)		bool _hx_tmp;
HXDLIN( 321)		if ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) < 1500)) {
HXLINE( 321)			if (::hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 321)				_hx_tmp = ::hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 321)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 321)			_hx_tmp = true;
            		}
HXDLIN( 321)		if (_hx_tmp) {
HXLINE( 321)			this->drawBuffer(false);
            		}
HXLINE( 323)		{
HXLINE( 323)			float left1 = ( (float)((( (Float)(sx) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 323)			float top1 = ( (float)((( (Float)(sy) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 323)			float right1 = ( (float)((( (Float)((sx + sw)) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 323)			float bottom1 = ( (float)((( (Float)((sy + sh)) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 323)			int baseIndex = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 3),left1);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 4),bottom1);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 12),left1);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 13),top1);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 21),right1);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 22),top1);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 30),right1);
HXDLIN( 323)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 31),bottom1);
            		}
HXLINE( 324)		{
HXLINE( 324)			float r = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 324)			float g = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 324)			float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 324)			int baseIndex1 = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 5),r);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 6),g);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 7),b);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 8),opacity);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 14),r);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 15),g);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 16),b);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 17),opacity);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 23),r);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 24),g);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 25),b);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 26),opacity);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 32),r);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 33),g);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 34),b);
HXDLIN( 324)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 35),opacity);
            		}
HXLINE( 325)		{
HXLINE( 325)			int baseIndex2 = (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 9) * 4);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,left);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 1),bottom);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 2),( (float)(((Float)-5.0)) ));
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 9),left);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 10),top);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 11),( (float)(((Float)-5.0)) ));
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 18),right);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 19),top);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 20),( (float)(((Float)-5.0)) ));
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 27),right);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 28),bottom);
HXDLIN( 325)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 29),( (float)(((Float)-5.0)) ));
            		}
HXLINE( 327)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 328)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImageScale,(void))

void ImageShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_331_end)
HXLINE( 332)		if ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 333)			this->drawBuffer(true);
            		}
HXLINE( 335)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,end,(void))

::Dynamic ImageShaderPainter_obj::standardImagePipeline;

 ::kha::graphics4::VertexStructure ImageShaderPainter_obj::structure;

int ImageShaderPainter_obj::bufferSize;

int ImageShaderPainter_obj::vertexSize;

int ImageShaderPainter_obj::bufferStart;

int ImageShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer ImageShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::Float32ArrayPrivate ImageShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer ImageShaderPainter_obj::indexBuffer;

 ::kha::Image ImageShaderPainter_obj::lastTexture;

void ImageShaderPainter_obj::initShaders(){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_154_initShaders)
HXLINE( 155)		if (::hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::structure )) {
HXLINE( 156)			::kha::graphics4::ImageShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createImageVertexStructure();
            		}
HXLINE( 158)		if (::hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline )) {
HXLINE( 159)			 ::kha::graphics4::PipelineState pipeline = ::kha::graphics4::Graphics2_obj::createImagePipeline(::kha::graphics4::ImageShaderPainter_obj::structure);
HXLINE( 160)			::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline =  ::kha::graphics4::PerFramebufferPipelineCache_obj::__alloc( HX_CTX ,pipeline,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initShaders,(void))


::hx::ObjectPtr< ImageShaderPainter_obj > ImageShaderPainter_obj::__new(::Dynamic g4) {
	::hx::ObjectPtr< ImageShaderPainter_obj > __this = new ImageShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

::hx::ObjectPtr< ImageShaderPainter_obj > ImageShaderPainter_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic g4) {
	ImageShaderPainter_obj *__this = (ImageShaderPainter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ImageShaderPainter_obj), true, "kha.graphics4.ImageShaderPainter"));
	*(void **)__this = ImageShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

ImageShaderPainter_obj::ImageShaderPainter_obj()
{
}

void ImageShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(bilinear,"bilinear");
	HX_MARK_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_END_CLASS();
}

void ImageShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(bilinear,"bilinear");
	HX_VISIT_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
}

::hx::Val ImageShaderPainter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { return ::hx::Val( bilinear ); }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pipeline() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return ::hx::Val( drawImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return ::hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return ::hx::Val( drawBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawImage2") ) { return ::hx::Val( drawImage2_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return ::hx::Val( initBuffers_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return ::hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return ::hx::Val( set_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColor") ) { return ::hx::Val( setRectColor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return ::hx::Val( setProjection_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawImageScale") ) { return ::hx::Val( drawImageScale_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { return ::hx::Val( bilinearMipmaps ); }
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return ::hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return ::hx::Val( projectionMatrix ); }
		if (HX_FIELD_EQ(inName,"setRectTexCoords") ) { return ::hx::Val( setRectTexCoords_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setBilinearFilter") ) { return ::hx::Val( setBilinearFilter_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setBilinearMipmapFilter") ) { return ::hx::Val( setBilinearMipmapFilter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ImageShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferStart") ) { outValue = ( bufferStart ); return true; }
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { outValue = ( lastTexture ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardImagePipeline") ) { outValue = ( standardImagePipeline ); return true; }
	}
	return false;
}

::hx::Val ImageShaderPainter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { _hx_set_g(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { bilinear=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pipeline(inValue.Cast< ::Dynamic >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { _hx_set_myPipeline(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { bilinearMipmaps=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { _hx_set_projectionMatrix(HX_CTX_GET,inValue.Cast<  ::kha::math::FastMatrix4 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ImageShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferStart") ) { bufferStart=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=ioValue.Cast<  ::kha::Image >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardImagePipeline") ) { standardImagePipeline=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

void ImageShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("bilinear",ec,b6,3d,e0));
	outFields->push(HX_("bilinearMipmaps",5f,10,ab,2b));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myPipeline",ae,22,05,b9));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ImageShaderPainter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(ImageShaderPainter_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{::hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinear),HX_("bilinear",ec,b6,3d,e0)},
	{::hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinearMipmaps),HX_("bilinearMipmaps",5f,10,ab,2b)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(ImageShaderPainter_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(ImageShaderPainter_obj,myPipeline),HX_("myPipeline",ae,22,05,b9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ImageShaderPainter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(void *) &ImageShaderPainter_obj::standardImagePipeline,HX_("standardImagePipeline",20,80,d4,fd)},
	{::hx::fsObject /*  ::kha::graphics4::VertexStructure */ ,(void *) &ImageShaderPainter_obj::structure,HX_("structure",33,54,4f,47)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::vertexSize,HX_("vertexSize",45,2a,10,dd)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::bufferStart,HX_("bufferStart",42,07,57,21)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::bufferIndex,HX_("bufferIndex",f2,2d,60,5b)},
	{::hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ImageShaderPainter_obj::rectVertexBuffer,HX_("rectVertexBuffer",c8,6e,b4,97)},
	{::hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(void *) &ImageShaderPainter_obj::rectVertices,HX_("rectVertices",3d,8d,f6,54)},
	{::hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ImageShaderPainter_obj::indexBuffer,HX_("indexBuffer",b2,65,a6,f5)},
	{::hx::fsObject /*  ::kha::Image */ ,(void *) &ImageShaderPainter_obj::lastTexture,HX_("lastTexture",25,7d,8c,53)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ImageShaderPainter_obj_sMemberFields[] = {
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("bilinear",ec,b6,3d,e0),
	HX_("bilinearMipmaps",5f,10,ab,2b),
	HX_("g",67,00,00,00),
	HX_("myPipeline",ae,22,05,b9),
	HX_("get_pipeline",2b,6f,9d,00),
	HX_("set_pipeline",9f,92,96,15),
	HX_("setProjection",d1,c6,03,66),
	HX_("initBuffers",43,12,fb,69),
	HX_("setRectVertices",ff,5f,ac,73),
	HX_("setRectTexCoords",9f,c2,a8,fb),
	HX_("setRectColor",9d,31,74,f8),
	HX_("drawBuffer",24,38,58,12),
	HX_("setBilinearFilter",06,cb,de,13),
	HX_("setBilinearMipmapFilter",2e,b1,aa,57),
	HX_("drawImage",b7,54,74,85),
	HX_("drawImage2",9b,cb,55,40),
	HX_("drawImageScale",53,72,a6,67),
	HX_("end",db,03,4d,00),
	::String(null()) };

static void ImageShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::standardImagePipeline,"standardImagePipeline");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferStart,"bufferStart");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::lastTexture,"lastTexture");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::standardImagePipeline,"standardImagePipeline");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferStart,"bufferStart");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::lastTexture,"lastTexture");
};

#endif

::hx::Class ImageShaderPainter_obj::__mClass;

static ::String ImageShaderPainter_obj_sStaticFields[] = {
	HX_("standardImagePipeline",20,80,d4,fd),
	HX_("structure",33,54,4f,47),
	HX_("bufferSize",e1,09,64,9d),
	HX_("vertexSize",45,2a,10,dd),
	HX_("bufferStart",42,07,57,21),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("rectVertexBuffer",c8,6e,b4,97),
	HX_("rectVertices",3d,8d,f6,54),
	HX_("indexBuffer",b2,65,a6,f5),
	HX_("lastTexture",25,7d,8c,53),
	HX_("initShaders",7e,f0,f0,17),
	::String(null())
};

void ImageShaderPainter_obj::__register()
{
	ImageShaderPainter_obj _hx_dummy;
	ImageShaderPainter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.ImageShaderPainter",7a,d5,6b,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ImageShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ImageShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageShaderPainter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_116_boot)
HXDLIN( 116)		standardImagePipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_117_boot)
HXDLIN( 117)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_118_boot)
HXDLIN( 118)		bufferSize = 1500;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_119_boot)
HXDLIN( 119)		vertexSize = 9;
            	}
}

} // end namespace kha
} // end namespace graphics4

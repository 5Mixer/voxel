// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_InternalPipeline
#include <hxinc/kha/graphics4/InternalPipeline.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_66da5d90c9e9a906_37_new,"kha.graphics4.InternalPipeline","new",0x65c470a0,"kha.graphics4.InternalPipeline.new","kha/graphics4/Graphics2.hx",37,0x0c1de808)
namespace kha{
namespace graphics4{

void InternalPipeline_obj::__construct( ::kha::graphics4::PipelineState pipeline,::Dynamic projectionLocation,::Dynamic textureLocation){
            	HX_GC_STACKFRAME(&_hx_pos_66da5d90c9e9a906_37_new)
HXLINE(  38)		this->_hx_set_pipeline(HX_CTX, pipeline);
HXLINE(  39)		this->_hx_set_projectionLocation(HX_CTX, projectionLocation);
HXLINE(  40)		this->_hx_set_textureLocation(HX_CTX, textureLocation);
            	}

Dynamic InternalPipeline_obj::__CreateEmpty() { return new InternalPipeline_obj; }

void *InternalPipeline_obj::_hx_vtable = 0;

Dynamic InternalPipeline_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InternalPipeline_obj > _hx_result = new InternalPipeline_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool InternalPipeline_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b0c21cc;
}


::hx::ObjectPtr< InternalPipeline_obj > InternalPipeline_obj::__new( ::kha::graphics4::PipelineState pipeline,::Dynamic projectionLocation,::Dynamic textureLocation) {
	::hx::ObjectPtr< InternalPipeline_obj > __this = new InternalPipeline_obj();
	__this->__construct(pipeline,projectionLocation,textureLocation);
	return __this;
}

::hx::ObjectPtr< InternalPipeline_obj > InternalPipeline_obj::__alloc(::hx::Ctx *_hx_ctx, ::kha::graphics4::PipelineState pipeline,::Dynamic projectionLocation,::Dynamic textureLocation) {
	InternalPipeline_obj *__this = (InternalPipeline_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InternalPipeline_obj), true, "kha.graphics4.InternalPipeline"));
	*(void **)__this = InternalPipeline_obj::_hx_vtable;
	__this->__construct(pipeline,projectionLocation,textureLocation);
	return __this;
}

InternalPipeline_obj::InternalPipeline_obj()
{
}

void InternalPipeline_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InternalPipeline);
	HX_MARK_MEMBER_NAME(pipeline,"pipeline");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(textureLocation,"textureLocation");
	HX_MARK_END_CLASS();
}

void InternalPipeline_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pipeline,"pipeline");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(textureLocation,"textureLocation");
}

::hx::Val InternalPipeline_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { return ::hx::Val( pipeline ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { return ::hx::Val( textureLocation ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return ::hx::Val( projectionLocation ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InternalPipeline_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { _hx_set_pipeline(HX_CTX_GET,inValue.Cast<  ::kha::graphics4::PipelineState >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { _hx_set_textureLocation(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { _hx_set_projectionLocation(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InternalPipeline_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pipeline",22,bb,83,4b));
	outFields->push(HX_("projectionLocation",e4,59,25,9b));
	outFields->push(HX_("textureLocation",30,c6,65,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InternalPipeline_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::graphics4::PipelineState */ ,(int)offsetof(InternalPipeline_obj,pipeline),HX_("pipeline",22,bb,83,4b)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(InternalPipeline_obj,projectionLocation),HX_("projectionLocation",e4,59,25,9b)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(InternalPipeline_obj,textureLocation),HX_("textureLocation",30,c6,65,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InternalPipeline_obj_sStaticStorageInfo = 0;
#endif

static ::String InternalPipeline_obj_sMemberFields[] = {
	HX_("pipeline",22,bb,83,4b),
	HX_("projectionLocation",e4,59,25,9b),
	HX_("textureLocation",30,c6,65,4c),
	::String(null()) };

::hx::Class InternalPipeline_obj::__mClass;

void InternalPipeline_obj::__register()
{
	InternalPipeline_obj _hx_dummy;
	InternalPipeline_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.InternalPipeline",ae,e0,df,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InternalPipeline_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InternalPipeline_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InternalPipeline_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InternalPipeline_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <hxinc/haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_InternalPipeline
#include <hxinc/kha/graphics4/InternalPipeline.h>
#endif
#ifndef INCLUDED_kha_graphics4_PerFramebufferPipelineCache
#include <hxinc/kha/graphics4/PerFramebufferPipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d6993cbdf3e95b17_78_new,"kha.graphics4.PerFramebufferPipelineCache","new",0x37f33733,"kha.graphics4.PerFramebufferPipelineCache.new","kha/graphics4/Graphics2.hx",78,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_d6993cbdf3e95b17_106_get,"kha.graphics4.PerFramebufferPipelineCache","get",0x37ede769,"kha.graphics4.PerFramebufferPipelineCache.get","kha/graphics4/Graphics2.hx",106,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_d6993cbdf3e95b17_110_hash,"kha.graphics4.PerFramebufferPipelineCache","hash",0xb8e2c19b,"kha.graphics4.PerFramebufferPipelineCache.hash","kha/graphics4/Graphics2.hx",110,0x0c1de808)
namespace kha{
namespace graphics4{

void PerFramebufferPipelineCache_obj::__construct( ::kha::graphics4::PipelineState pipeline,bool texture){
            	HX_GC_STACKFRAME(&_hx_pos_d6993cbdf3e95b17_78_new)
HXLINE(  79)		this->_hx_set_pipelines(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(  82)		pipeline->compile();
HXLINE(  84)		::Dynamic projectionLocation = null();
HXLINE(  85)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  86)			projectionLocation = pipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				 ::Dynamic x = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(  89)				::haxe::Log_obj::trace(x,::hx::SourceInfo(HX_("kha/graphics4/Graphics2.hx",08,e8,1d,0c),89,HX_("kha.graphics4.PerFramebufferPipelineCache",c1,21,3d,dd),HX_("new",60,d0,53,00)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  92)		::Dynamic textureLocation = null();
HXLINE(  93)		if (texture) {
HXLINE(  94)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  95)				textureLocation = pipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					 ::Dynamic x = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(  98)					::haxe::Log_obj::trace(x,::hx::SourceInfo(HX_("kha/graphics4/Graphics2.hx",08,e8,1d,0c),98,HX_("kha.graphics4.PerFramebufferPipelineCache",c1,21,3d,dd),HX_("new",60,d0,53,00)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 102)		::Array< ::Dynamic> _hx_tmp = this->pipelines;
HXDLIN( 102)		_hx_tmp->push( ::kha::graphics4::InternalPipeline_obj::__alloc( HX_CTX ,pipeline,projectionLocation,textureLocation));
            	}

Dynamic PerFramebufferPipelineCache_obj::__CreateEmpty() { return new PerFramebufferPipelineCache_obj; }

void *PerFramebufferPipelineCache_obj::_hx_vtable = 0;

Dynamic PerFramebufferPipelineCache_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PerFramebufferPipelineCache_obj > _hx_result = new PerFramebufferPipelineCache_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PerFramebufferPipelineCache_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5218572b;
}

static ::kha::graphics4::PipelineCache_obj _hx_kha_graphics4_PerFramebufferPipelineCache__hx_kha_graphics4_PipelineCache= {
	(  ::kha::graphics4::InternalPipeline (::hx::Object::*)(::Array< int >,int))&::kha::graphics4::PerFramebufferPipelineCache_obj::get,
};

void *PerFramebufferPipelineCache_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x47778ddb: return &_hx_kha_graphics4_PerFramebufferPipelineCache__hx_kha_graphics4_PipelineCache;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::kha::graphics4::InternalPipeline PerFramebufferPipelineCache_obj::get(::Array< int > colorFormats,int depthStencilFormat){
            	HX_STACKFRAME(&_hx_pos_d6993cbdf3e95b17_106_get)
HXDLIN( 106)		return this->pipelines->__get(this->hash(colorFormats,depthStencilFormat)).StaticCast<  ::kha::graphics4::InternalPipeline >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PerFramebufferPipelineCache_obj,get,return )

int PerFramebufferPipelineCache_obj::hash(::Array< int > colorFormats,int depthStencilFormat){
            	HX_STACKFRAME(&_hx_pos_d6993cbdf3e95b17_110_hash)
HXDLIN( 110)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PerFramebufferPipelineCache_obj,hash,return )


::hx::ObjectPtr< PerFramebufferPipelineCache_obj > PerFramebufferPipelineCache_obj::__new( ::kha::graphics4::PipelineState pipeline,bool texture) {
	::hx::ObjectPtr< PerFramebufferPipelineCache_obj > __this = new PerFramebufferPipelineCache_obj();
	__this->__construct(pipeline,texture);
	return __this;
}

::hx::ObjectPtr< PerFramebufferPipelineCache_obj > PerFramebufferPipelineCache_obj::__alloc(::hx::Ctx *_hx_ctx, ::kha::graphics4::PipelineState pipeline,bool texture) {
	PerFramebufferPipelineCache_obj *__this = (PerFramebufferPipelineCache_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PerFramebufferPipelineCache_obj), true, "kha.graphics4.PerFramebufferPipelineCache"));
	*(void **)__this = PerFramebufferPipelineCache_obj::_hx_vtable;
	__this->__construct(pipeline,texture);
	return __this;
}

PerFramebufferPipelineCache_obj::PerFramebufferPipelineCache_obj()
{
}

void PerFramebufferPipelineCache_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PerFramebufferPipelineCache);
	HX_MARK_MEMBER_NAME(pipelines,"pipelines");
	HX_MARK_END_CLASS();
}

void PerFramebufferPipelineCache_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pipelines,"pipelines");
}

::hx::Val PerFramebufferPipelineCache_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"hash") ) { return ::hx::Val( hash_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pipelines") ) { return ::hx::Val( pipelines ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PerFramebufferPipelineCache_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"pipelines") ) { _hx_set_pipelines(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PerFramebufferPipelineCache_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pipelines",11,03,c0,c7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PerFramebufferPipelineCache_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PerFramebufferPipelineCache_obj,pipelines),HX_("pipelines",11,03,c0,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PerFramebufferPipelineCache_obj_sStaticStorageInfo = 0;
#endif

static ::String PerFramebufferPipelineCache_obj_sMemberFields[] = {
	HX_("pipelines",11,03,c0,c7),
	HX_("get",96,80,4e,00),
	HX_("hash",ce,2f,08,45),
	::String(null()) };

::hx::Class PerFramebufferPipelineCache_obj::__mClass;

void PerFramebufferPipelineCache_obj::__register()
{
	PerFramebufferPipelineCache_obj _hx_dummy;
	PerFramebufferPipelineCache_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.PerFramebufferPipelineCache",c1,21,3d,dd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PerFramebufferPipelineCache_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PerFramebufferPipelineCache_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PerFramebufferPipelineCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PerFramebufferPipelineCache_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4

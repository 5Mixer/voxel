// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_vertex
#include <hxinc/kha/graphics2/truetype/Stbtt_vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a0bea14738bd3c17_151_new,"kha.graphics2.truetype.Stbtt_vertex","new",0x518bfd89,"kha.graphics2.truetype.Stbtt_vertex.new","kha/graphics2/truetype/StbTruetype.hx",151,0x5d9e0de9)
namespace kha{
namespace graphics2{
namespace truetype{

void Stbtt_vertex_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a0bea14738bd3c17_151_new)
            	}

Dynamic Stbtt_vertex_obj::__CreateEmpty() { return new Stbtt_vertex_obj; }

void *Stbtt_vertex_obj::_hx_vtable = 0;

Dynamic Stbtt_vertex_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stbtt_vertex_obj > _hx_result = new Stbtt_vertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Stbtt_vertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2172e031;
}


Stbtt_vertex_obj::Stbtt_vertex_obj()
{
}

::hx::Val Stbtt_vertex_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"cx") ) { return ::hx::Val( cx ); }
		if (HX_FIELD_EQ(inName,"cy") ) { return ::hx::Val( cy ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { return ::hx::Val( cx1 ); }
		if (HX_FIELD_EQ(inName,"cy1") ) { return ::hx::Val( cy1 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { return ::hx::Val( padding ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Stbtt_vertex_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"cx") ) { cx=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy") ) { cy=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { cx1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy1") ) { cy1=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { padding=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stbtt_vertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("cx",b5,56,00,00));
	outFields->push(HX_("cy",b6,56,00,00));
	outFields->push(HX_("cx1",dc,87,4b,00));
	outFields->push(HX_("cy1",bb,88,4b,00));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("padding",d1,59,7d,d0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stbtt_vertex_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,cx),HX_("cx",b5,56,00,00)},
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,cy),HX_("cy",b6,56,00,00)},
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,cx1),HX_("cx1",dc,87,4b,00)},
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,cy1),HX_("cy1",bb,88,4b,00)},
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsInt,(int)offsetof(Stbtt_vertex_obj,padding),HX_("padding",d1,59,7d,d0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Stbtt_vertex_obj_sStaticStorageInfo = 0;
#endif

static ::String Stbtt_vertex_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("cx",b5,56,00,00),
	HX_("cy",b6,56,00,00),
	HX_("cx1",dc,87,4b,00),
	HX_("cy1",bb,88,4b,00),
	HX_("type",ba,f2,08,4d),
	HX_("padding",d1,59,7d,d0),
	::String(null()) };

::hx::Class Stbtt_vertex_obj::__mClass;

void Stbtt_vertex_obj::__register()
{
	Stbtt_vertex_obj _hx_dummy;
	Stbtt_vertex_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics2.truetype.Stbtt_vertex",17,85,72,88);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stbtt_vertex_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stbtt_vertex_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stbtt_vertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stbtt_vertex_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics2
} // end namespace truetype

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__csctx
#include <hxinc/kha/graphics2/truetype/Stbtt__csctx.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_vertex
#include <hxinc/kha/graphics2/truetype/Stbtt_vertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c3aad078a31dc91b_198_new,"kha.graphics2.truetype.Stbtt__csctx","new",0xda985f5d,"kha.graphics2.truetype.Stbtt__csctx.new","kha/graphics2/truetype/StbTruetype.hx",198,0x5d9e0de9)
namespace kha{
namespace graphics2{
namespace truetype{

void Stbtt__csctx_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c3aad078a31dc91b_198_new)
            	}

Dynamic Stbtt__csctx_obj::__CreateEmpty() { return new Stbtt__csctx_obj; }

void *Stbtt__csctx_obj::_hx_vtable = 0;

Dynamic Stbtt__csctx_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stbtt__csctx_obj > _hx_result = new Stbtt__csctx_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Stbtt__csctx_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2cdef0cd;
}


Stbtt__csctx_obj::Stbtt__csctx_obj()
{
}

void Stbtt__csctx_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stbtt__csctx);
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(started,"started");
	HX_MARK_MEMBER_NAME(first_x,"first_x");
	HX_MARK_MEMBER_NAME(first_y,"first_y");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(min_x,"min_x");
	HX_MARK_MEMBER_NAME(min_y,"min_y");
	HX_MARK_MEMBER_NAME(max_x,"max_x");
	HX_MARK_MEMBER_NAME(max_y,"max_y");
	HX_MARK_MEMBER_NAME(pvertices,"pvertices");
	HX_MARK_MEMBER_NAME(num_vertices,"num_vertices");
	HX_MARK_END_CLASS();
}

void Stbtt__csctx_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(started,"started");
	HX_VISIT_MEMBER_NAME(first_x,"first_x");
	HX_VISIT_MEMBER_NAME(first_y,"first_y");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(min_x,"min_x");
	HX_VISIT_MEMBER_NAME(min_y,"min_y");
	HX_VISIT_MEMBER_NAME(max_x,"max_x");
	HX_VISIT_MEMBER_NAME(max_y,"max_y");
	HX_VISIT_MEMBER_NAME(pvertices,"pvertices");
	HX_VISIT_MEMBER_NAME(num_vertices,"num_vertices");
}

::hx::Val Stbtt__csctx_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"min_x") ) { return ::hx::Val( min_x ); }
		if (HX_FIELD_EQ(inName,"min_y") ) { return ::hx::Val( min_y ); }
		if (HX_FIELD_EQ(inName,"max_x") ) { return ::hx::Val( max_x ); }
		if (HX_FIELD_EQ(inName,"max_y") ) { return ::hx::Val( max_y ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { return ::hx::Val( bounds ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return ::hx::Val( started ); }
		if (HX_FIELD_EQ(inName,"first_x") ) { return ::hx::Val( first_x ); }
		if (HX_FIELD_EQ(inName,"first_y") ) { return ::hx::Val( first_y ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pvertices") ) { return ::hx::Val( pvertices ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"num_vertices") ) { return ::hx::Val( num_vertices ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Stbtt__csctx_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"min_x") ) { min_x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"min_y") ) { min_y=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max_x") ) { max_x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max_y") ) { max_y=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { started=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"first_x") ) { first_x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"first_y") ) { first_y=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pvertices") ) { _hx_set_pvertices(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"num_vertices") ) { num_vertices=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stbtt__csctx_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bounds",75,86,1d,66));
	outFields->push(HX_("started",41,29,1b,35));
	outFields->push(HX_("first_x",69,37,10,7d));
	outFields->push(HX_("first_y",6a,37,10,7d));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("min_x",4b,6d,68,08));
	outFields->push(HX_("min_y",4c,6d,68,08));
	outFields->push(HX_("max_x",dd,4e,26,03));
	outFields->push(HX_("max_y",de,4e,26,03));
	outFields->push(HX_("pvertices",69,b0,b3,b3));
	outFields->push(HX_("num_vertices",52,e0,48,b7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stbtt__csctx_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Stbtt__csctx_obj,bounds),HX_("bounds",75,86,1d,66)},
	{::hx::fsBool,(int)offsetof(Stbtt__csctx_obj,started),HX_("started",41,29,1b,35)},
	{::hx::fsFloat,(int)offsetof(Stbtt__csctx_obj,first_x),HX_("first_x",69,37,10,7d)},
	{::hx::fsFloat,(int)offsetof(Stbtt__csctx_obj,first_y),HX_("first_y",6a,37,10,7d)},
	{::hx::fsFloat,(int)offsetof(Stbtt__csctx_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Stbtt__csctx_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(Stbtt__csctx_obj,min_x),HX_("min_x",4b,6d,68,08)},
	{::hx::fsInt,(int)offsetof(Stbtt__csctx_obj,min_y),HX_("min_y",4c,6d,68,08)},
	{::hx::fsInt,(int)offsetof(Stbtt__csctx_obj,max_x),HX_("max_x",dd,4e,26,03)},
	{::hx::fsInt,(int)offsetof(Stbtt__csctx_obj,max_y),HX_("max_y",de,4e,26,03)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stbtt__csctx_obj,pvertices),HX_("pvertices",69,b0,b3,b3)},
	{::hx::fsInt,(int)offsetof(Stbtt__csctx_obj,num_vertices),HX_("num_vertices",52,e0,48,b7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Stbtt__csctx_obj_sStaticStorageInfo = 0;
#endif

static ::String Stbtt__csctx_obj_sMemberFields[] = {
	HX_("bounds",75,86,1d,66),
	HX_("started",41,29,1b,35),
	HX_("first_x",69,37,10,7d),
	HX_("first_y",6a,37,10,7d),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("min_x",4b,6d,68,08),
	HX_("min_y",4c,6d,68,08),
	HX_("max_x",dd,4e,26,03),
	HX_("max_y",de,4e,26,03),
	HX_("pvertices",69,b0,b3,b3),
	HX_("num_vertices",52,e0,48,b7),
	::String(null()) };

::hx::Class Stbtt__csctx_obj::__mClass;

void Stbtt__csctx_obj::__register()
{
	Stbtt__csctx_obj _hx_dummy;
	Stbtt__csctx_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics2.truetype.Stbtt__csctx",eb,6c,0c,30);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stbtt__csctx_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stbtt__csctx_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stbtt__csctx_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stbtt__csctx_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics2
} // end namespace truetype

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_DisplayMode
#include <hxinc/kha/DisplayMode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_43ca94455628af2a_9_new,"kha.DisplayMode","new",0xef46d9cd,"kha.DisplayMode.new","kha/DisplayMode.hx",9,0xc2d3be04)
namespace kha{

void DisplayMode_obj::__construct(int width,int height,int frequency,int bitsPerPixel){
            	HX_STACKFRAME(&_hx_pos_43ca94455628af2a_9_new)
HXLINE(  10)		this->width = width;
HXLINE(  11)		this->height = height;
HXLINE(  12)		this->frequency = frequency;
HXLINE(  13)		this->bitsPerPixel = bitsPerPixel;
            	}

Dynamic DisplayMode_obj::__CreateEmpty() { return new DisplayMode_obj; }

void *DisplayMode_obj::_hx_vtable = 0;

Dynamic DisplayMode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DisplayMode_obj > _hx_result = new DisplayMode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool DisplayMode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2869b001;
}


DisplayMode_obj::DisplayMode_obj()
{
}

::hx::Val DisplayMode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frequency") ) { return ::hx::Val( frequency ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitsPerPixel") ) { return ::hx::Val( bitsPerPixel ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DisplayMode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frequency") ) { frequency=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitsPerPixel") ) { bitsPerPixel=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayMode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("frequency",9c,82,ea,bb));
	outFields->push(HX_("bitsPerPixel",8f,4d,ee,1c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DisplayMode_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(DisplayMode_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(DisplayMode_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(DisplayMode_obj,frequency),HX_("frequency",9c,82,ea,bb)},
	{::hx::fsInt,(int)offsetof(DisplayMode_obj,bitsPerPixel),HX_("bitsPerPixel",8f,4d,ee,1c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DisplayMode_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayMode_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("frequency",9c,82,ea,bb),
	HX_("bitsPerPixel",8f,4d,ee,1c),
	::String(null()) };

::hx::Class DisplayMode_obj::__mClass;

void DisplayMode_obj::__register()
{
	DisplayMode_obj _hx_dummy;
	DisplayMode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.DisplayMode",5b,ef,70,ae);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DisplayMode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DisplayMode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayMode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayMode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha

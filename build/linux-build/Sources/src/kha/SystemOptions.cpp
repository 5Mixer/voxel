// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_FramebufferOptions
#include <hxinc/kha/FramebufferOptions.h>
#endif
#ifndef INCLUDED_kha_SystemOptions
#include <hxinc/kha/SystemOptions.h>
#endif
#ifndef INCLUDED_kha_WindowOptions
#include <hxinc/kha/WindowOptions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c5c1faf3324daaa6_6_new,"kha.SystemOptions","new",0x1e7305b7,"kha.SystemOptions.new","kha/System.hx",6,0xeb7aee24)
namespace kha{

void SystemOptions_obj::__construct(::String __o_title, ::Dynamic __o_width, ::Dynamic __o_height, ::kha::WindowOptions window, ::kha::FramebufferOptions framebuffer){
            		::String title = __o_title;
            		if (::hx::IsNull(__o_title)) title = HX_("Kha",04,44,39,00);
            		 ::Dynamic width = __o_width;
            		if (::hx::IsNull(__o_width)) width = -1;
            		 ::Dynamic height = __o_height;
            		if (::hx::IsNull(__o_height)) height = -1;
            	HX_GC_STACKFRAME(&_hx_pos_c5c1faf3324daaa6_6_new)
HXLINE(  11)		this->_hx_set_framebuffer(HX_CTX, null());
HXLINE(  10)		this->_hx_set_window(HX_CTX, null());
HXLINE(   9)		this->height = -1;
HXLINE(   8)		this->width = -1;
HXLINE(   7)		this->_hx_set_title(HX_CTX, HX_("Kha",04,44,39,00));
HXLINE(  23)		this->_hx_set_title(HX_CTX, title);
HXLINE(  24)		 ::kha::WindowOptions _hx_tmp;
HXDLIN(  24)		if (::hx::IsNull( window )) {
HXLINE(  24)			_hx_tmp =  ::kha::WindowOptions_obj::__alloc( HX_CTX ,null(),-1,-1,800,600,-1,true,null(),0);
            		}
            		else {
HXLINE(  24)			_hx_tmp = window;
            		}
HXDLIN(  24)		this->_hx_set_window(HX_CTX, _hx_tmp);
HXLINE(  26)		if (::hx::IsGreater( width,0 )) {
HXLINE(  27)			this->window->width = ( (int)(width) );
HXLINE(  28)			this->width = ( (int)(width) );
            		}
            		else {
HXLINE(  31)			this->width = this->window->width;
            		}
HXLINE(  34)		if (::hx::IsGreater( height,0 )) {
HXLINE(  35)			this->window->height = ( (int)(height) );
HXLINE(  36)			this->height = ( (int)(height) );
            		}
            		else {
HXLINE(  39)			this->height = this->window->height;
            		}
HXLINE(  42)		if (::hx::IsNull( this->window->title )) {
HXLINE(  43)			this->window->_hx_set_title(HX_CTX, title);
            		}
HXLINE(  46)		 ::kha::FramebufferOptions _hx_tmp1;
HXDLIN(  46)		if (::hx::IsNull( framebuffer )) {
HXLINE(  46)			_hx_tmp1 =  ::kha::FramebufferOptions_obj::__alloc( HX_CTX ,60,true,32,16,8,1);
            		}
            		else {
HXLINE(  46)			_hx_tmp1 = framebuffer;
            		}
HXDLIN(  46)		this->_hx_set_framebuffer(HX_CTX, _hx_tmp1);
            	}

Dynamic SystemOptions_obj::__CreateEmpty() { return new SystemOptions_obj; }

void *SystemOptions_obj::_hx_vtable = 0;

Dynamic SystemOptions_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SystemOptions_obj > _hx_result = new SystemOptions_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool SystemOptions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55992933;
}


::hx::ObjectPtr< SystemOptions_obj > SystemOptions_obj::__new(::String __o_title, ::Dynamic __o_width, ::Dynamic __o_height, ::kha::WindowOptions window, ::kha::FramebufferOptions framebuffer) {
	::hx::ObjectPtr< SystemOptions_obj > __this = new SystemOptions_obj();
	__this->__construct(__o_title,__o_width,__o_height,window,framebuffer);
	return __this;
}

::hx::ObjectPtr< SystemOptions_obj > SystemOptions_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_title, ::Dynamic __o_width, ::Dynamic __o_height, ::kha::WindowOptions window, ::kha::FramebufferOptions framebuffer) {
	SystemOptions_obj *__this = (SystemOptions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SystemOptions_obj), true, "kha.SystemOptions"));
	*(void **)__this = SystemOptions_obj::_hx_vtable;
	__this->__construct(__o_title,__o_width,__o_height,window,framebuffer);
	return __this;
}

SystemOptions_obj::SystemOptions_obj()
{
}

void SystemOptions_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SystemOptions);
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(framebuffer,"framebuffer");
	HX_MARK_END_CLASS();
}

void SystemOptions_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(framebuffer,"framebuffer");
}

::hx::Val SystemOptions_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framebuffer") ) { return ::hx::Val( framebuffer ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SystemOptions_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { _hx_set_title(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"window") ) { _hx_set_window(HX_CTX_GET,inValue.Cast<  ::kha::WindowOptions >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framebuffer") ) { _hx_set_framebuffer(HX_CTX_GET,inValue.Cast<  ::kha::FramebufferOptions >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SystemOptions_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("framebuffer",ed,14,48,7a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SystemOptions_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(SystemOptions_obj,title),HX_("title",98,15,3b,10)},
	{::hx::fsInt,(int)offsetof(SystemOptions_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(SystemOptions_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::kha::WindowOptions */ ,(int)offsetof(SystemOptions_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsObject /*  ::kha::FramebufferOptions */ ,(int)offsetof(SystemOptions_obj,framebuffer),HX_("framebuffer",ed,14,48,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SystemOptions_obj_sStaticStorageInfo = 0;
#endif

static ::String SystemOptions_obj_sMemberFields[] = {
	HX_("title",98,15,3b,10),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("window",f0,93,8c,52),
	HX_("framebuffer",ed,14,48,7a),
	::String(null()) };

::hx::Class SystemOptions_obj::__mClass;

void SystemOptions_obj::__register()
{
	SystemOptions_obj _hx_dummy;
	SystemOptions_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.SystemOptions",45,5e,8a,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SystemOptions_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SystemOptions_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemOptions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemOptions_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha

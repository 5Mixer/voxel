// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <hxinc/haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_BlobCallback
#include <hxinc/kha/BlobCallback.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_ImageCallback
#include <hxinc/kha/ImageCallback.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_LoaderImpl
#include <hxinc/kha/LoaderImpl.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <hxinc/kha/Sound.h>
#endif
#ifndef INCLUDED_kha_SoundCallback
#include <hxinc/kha/SoundCallback.h>
#endif
#ifndef INCLUDED_kha_Video
#include <hxinc/kha/Video.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <hxinc/kha/internal/BytesBlob.h>
#endif
#ifndef INCLUDED_kha_kore_Video
#include <hxinc/kha/kore/Video.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_49_loadSoundFromDescription,"kha.LoaderImpl","loadSoundFromDescription",0xe0aa28ba,"kha.LoaderImpl.loadSoundFromDescription","kha/LoaderImpl.hx",49,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_54_loadSound,"kha.LoaderImpl","loadSound",0x059c31d8,"kha.LoaderImpl.loadSound","kha/LoaderImpl.hx",54,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_58_getSoundFormats,"kha.LoaderImpl","getSoundFormats",0x27f48852,"kha.LoaderImpl.getSoundFormats","kha/LoaderImpl.hx",58,0xe7c84980)
static const ::String _hx_array_data_73b9a0bd_3[] = {
	HX_("wav",2c,a1,5a,00),HX_("ogg",4f,94,54,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_61_loadImageFromDescription,"kha.LoaderImpl","loadImageFromDescription",0x995853ae,"kha.LoaderImpl.loadImageFromDescription","kha/LoaderImpl.hx",61,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_69_loadImage,"kha.LoaderImpl","loadImage",0x4238c464,"kha.LoaderImpl.loadImage","kha/LoaderImpl.hx",69,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_73_getImageFormats,"kha.LoaderImpl","getImageFormats",0x03849f46,"kha.LoaderImpl.getImageFormats","kha/LoaderImpl.hx",73,0xe7c84980)
static const ::String _hx_array_data_73b9a0bd_7[] = {
	HX_("png",a9,5c,55,00),HX_("jpg",e1,d0,50,00),HX_("hdr",f6,41,4f,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_77_loadBlobFromDescription,"kha.LoaderImpl","loadBlobFromDescription",0xc375dd9e,"kha.LoaderImpl.loadBlobFromDescription","kha/LoaderImpl.hx",77,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_82_loadBlob,"kha.LoaderImpl","loadBlob",0xe826cc74,"kha.LoaderImpl.loadBlob","kha/LoaderImpl.hx",82,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_87_loadFontFromDescription,"kha.LoaderImpl","loadFontFromDescription",0x8d450d6c,"kha.LoaderImpl.loadFontFromDescription","kha/LoaderImpl.hx",87,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_86_loadFontFromDescription,"kha.LoaderImpl","loadFontFromDescription",0x8d450d6c,"kha.LoaderImpl.loadFontFromDescription","kha/LoaderImpl.hx",86,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_92_loadVideoFromDescription,"kha.LoaderImpl","loadVideoFromDescription",0xb166228e,"kha.LoaderImpl.loadVideoFromDescription","kha/LoaderImpl.hx",92,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_97_videoFormat,"kha.LoaderImpl","videoFormat",0xb96220e1,"kha.LoaderImpl.videoFormat","kha/LoaderImpl.hx",97,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_101_getVideoFormats,"kha.LoaderImpl","getVideoFormats",0x2db88e26,"kha.LoaderImpl.getVideoFormats","kha/LoaderImpl.hx",101,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_105_showKeyboard,"kha.LoaderImpl","showKeyboard",0x17068d15,"kha.LoaderImpl.showKeyboard","kha/LoaderImpl.hx",105,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_110_hideKeyboard,"kha.LoaderImpl","hideKeyboard",0xac7eb9da,"kha.LoaderImpl.hideKeyboard","kha/LoaderImpl.hx",110,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_115_loadURL,"kha.LoaderImpl","loadURL",0x42883038,"kha.LoaderImpl.loadURL","kha/LoaderImpl.hx",115,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_120_blobLoaded,"kha.LoaderImpl","blobLoaded",0xdb2a7153,"kha.LoaderImpl.blobLoaded","kha/LoaderImpl.hx",120,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_124_blobErrored,"kha.LoaderImpl","blobErrored",0xcb13a119,"kha.LoaderImpl.blobErrored","kha/LoaderImpl.hx",124,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_127_soundLoadedCompressed,"kha.LoaderImpl","soundLoadedCompressed",0xe6841b64,"kha.LoaderImpl.soundLoadedCompressed","kha/LoaderImpl.hx",127,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_137_soundLoadedUncompressed,"kha.LoaderImpl","soundLoadedUncompressed",0xabcf09bd,"kha.LoaderImpl.soundLoadedUncompressed","kha/LoaderImpl.hx",137,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_148_soundErrored,"kha.LoaderImpl","soundErrored",0x81928369,"kha.LoaderImpl.soundErrored","kha/LoaderImpl.hx",148,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_152_createFloat32Array,"kha.LoaderImpl","createFloat32Array",0x8da4c08b,"kha.LoaderImpl.createFloat32Array","kha/LoaderImpl.hx",152,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_156_createEmptyImage,"kha.LoaderImpl","createEmptyImage",0xcff2ea7b,"kha.LoaderImpl.createEmptyImage","kha/LoaderImpl.hx",156,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_160_imageLoaded,"kha.LoaderImpl","imageLoaded",0xe3db4c8f,"kha.LoaderImpl.imageLoaded","kha/LoaderImpl.hx",160,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_164_imageErrored,"kha.LoaderImpl","imageErrored",0x5d229a5d,"kha.LoaderImpl.imageErrored","kha/LoaderImpl.hx",164,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_212_tick,"kha.LoaderImpl","tick",0xe24104ae,"kha.LoaderImpl.tick","kha/LoaderImpl.hx",212,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_44_boot,"kha.LoaderImpl","boot",0xd65fc583,"kha.LoaderImpl.boot","kha/LoaderImpl.hx",44,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_45_boot,"kha.LoaderImpl","boot",0xd65fc583,"kha.LoaderImpl.boot","kha/LoaderImpl.hx",45,0xe7c84980)
HX_LOCAL_STACK_FRAME(_hx_pos_ca15ff0e900ea23d_46_boot,"kha.LoaderImpl","boot",0xd65fc583,"kha.LoaderImpl.boot","kha/LoaderImpl.hx",46,0xe7c84980)
namespace kha{

void LoaderImpl_obj::__construct() { }

Dynamic LoaderImpl_obj::__CreateEmpty() { return new LoaderImpl_obj; }

void *LoaderImpl_obj::_hx_vtable = 0;

Dynamic LoaderImpl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LoaderImpl_obj > _hx_result = new LoaderImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LoaderImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b0436d7;
}

 ::haxe::ds::IntMap LoaderImpl_obj::blobCallbacks;

 ::haxe::ds::IntMap LoaderImpl_obj::imageCallbacks;

 ::haxe::ds::IntMap LoaderImpl_obj::soundCallbacks;

void LoaderImpl_obj::loadSoundFromDescription( ::Dynamic desc, ::Dynamic done, ::Dynamic failed){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_49_loadSoundFromDescription)
HXDLIN(  49)		::Dynamic this1 = ::kha::LoaderImpl_obj::soundCallbacks;
HXDLIN(  49)		::cpp::UInt64 k = ::kha::LoaderImpl_obj::loadSound(( (::String)( ::Dynamic(desc->__Field(HX_("files",77,de,98,00),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN(  49)		 ::kha::SoundCallback v =  ::kha::SoundCallback_obj::__alloc( HX_CTX ,done,failed);
HXDLIN(  49)		( ( ::haxe::ds::IntMap)(this1) )->set(( (int)(k) ),v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LoaderImpl_obj,loadSoundFromDescription,(void))

::cpp::UInt64 LoaderImpl_obj::loadSound(::String filename){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_54_loadSound)
            	return kha_loader_load_sound(filename);

HXDLIN(  54)		return ( (::cpp::UInt64)(0) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoaderImpl_obj,loadSound,return )

::Array< ::String > LoaderImpl_obj::getSoundFormats(){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_58_getSoundFormats)
HXDLIN(  58)		return ::Array_obj< ::String >::fromData( _hx_array_data_73b9a0bd_3,2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,getSoundFormats,return )

void LoaderImpl_obj::loadImageFromDescription( ::Dynamic desc, ::Dynamic done, ::Dynamic failed){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_61_loadImageFromDescription)
HXLINE(  62)		bool readable;
HXDLIN(  62)		if (::Reflect_obj::hasField(desc,HX_("readable",f0,1b,87,7d))) {
HXLINE(  62)			readable = ( (bool)(desc->__Field(HX_("readable",f0,1b,87,7d),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  62)			readable = false;
            		}
HXLINE(  64)		{
HXLINE(  64)			::Dynamic this1 = ::kha::LoaderImpl_obj::imageCallbacks;
HXDLIN(  64)			::cpp::UInt64 k = ::kha::LoaderImpl_obj::loadImage(( (::String)( ::Dynamic(desc->__Field(HX_("files",77,de,98,00),::hx::paccDynamic))->__GetItem(0)) ),readable);
HXDLIN(  64)			 ::kha::ImageCallback v =  ::kha::ImageCallback_obj::__alloc( HX_CTX ,done,failed);
HXDLIN(  64)			( ( ::haxe::ds::IntMap)(this1) )->set(( (int)(k) ),v);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LoaderImpl_obj,loadImageFromDescription,(void))

::cpp::UInt64 LoaderImpl_obj::loadImage(::String filename,bool readable){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_69_loadImage)
            	return kha_loader_load_image(filename, readable);

HXDLIN(  69)		return ( (::cpp::UInt64)(0) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,loadImage,return )

::Array< ::String > LoaderImpl_obj::getImageFormats(){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_73_getImageFormats)
HXDLIN(  73)		return ::Array_obj< ::String >::fromData( _hx_array_data_73b9a0bd_7,3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,getImageFormats,return )

void LoaderImpl_obj::loadBlobFromDescription( ::Dynamic desc, ::Dynamic done, ::Dynamic failed){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_77_loadBlobFromDescription)
HXDLIN(  77)		::Dynamic this1 = ::kha::LoaderImpl_obj::blobCallbacks;
HXDLIN(  77)		::cpp::UInt64 k = ::kha::LoaderImpl_obj::loadBlob(( (::String)( ::Dynamic(desc->__Field(HX_("files",77,de,98,00),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN(  77)		 ::kha::BlobCallback v =  ::kha::BlobCallback_obj::__alloc( HX_CTX ,done,failed);
HXDLIN(  77)		( ( ::haxe::ds::IntMap)(this1) )->set(( (int)(k) ),v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LoaderImpl_obj,loadBlobFromDescription,(void))

::cpp::UInt64 LoaderImpl_obj::loadBlob(::String filename){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_82_loadBlob)
            	return kha_loader_load_blob(filename);

HXDLIN(  82)		return ( (::cpp::UInt64)(0) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoaderImpl_obj,loadBlob,return )

void LoaderImpl_obj::loadFontFromDescription( ::Dynamic desc, ::Dynamic done, ::Dynamic failed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::kha::internal::BytesBlob blob){
            			HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_87_loadFontFromDescription)
HXLINE(  87)			 ::Dynamic done1 = done;
HXDLIN(  87)			done1( ::kha::Kravur_obj::__alloc( HX_CTX ,blob,null()));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_86_loadFontFromDescription)
HXDLIN(  86)		::kha::LoaderImpl_obj::loadBlobFromDescription(desc, ::Dynamic(new _hx_Closure_0(done)),failed);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LoaderImpl_obj,loadFontFromDescription,(void))

void LoaderImpl_obj::loadVideoFromDescription( ::Dynamic desc, ::Dynamic done, ::Dynamic failed){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_92_loadVideoFromDescription)
HXDLIN(  92)		done( ::kha::kore::Video_obj::__alloc( HX_CTX ,( (::String)( ::Dynamic(desc->__Field(HX_("files",77,de,98,00),::hx::paccDynamic))->__GetItem(0)) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LoaderImpl_obj,loadVideoFromDescription,(void))

::String LoaderImpl_obj::videoFormat(){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_97_videoFormat)
            	return ::String(Kore::System::videoFormats()[0]);

HXDLIN(  97)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,videoFormat,return )

::Array< ::String > LoaderImpl_obj::getVideoFormats(){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_101_getVideoFormats)
HXDLIN( 101)		return ::Array_obj< ::String >::__new(1)->init(0,::kha::LoaderImpl_obj::videoFormat());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,getVideoFormats,return )

void LoaderImpl_obj::showKeyboard(){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_105_showKeyboard)
            	Kore::System::showKeyboard();

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,showKeyboard,(void))

void LoaderImpl_obj::hideKeyboard(){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_110_hideKeyboard)
            	Kore::System::hideKeyboard();

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,hideKeyboard,(void))

void LoaderImpl_obj::loadURL(::String url){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_115_loadURL)
            	Kore::System::loadURL(url);

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoaderImpl_obj,loadURL,(void))

void LoaderImpl_obj::blobLoaded(::cpp::UInt64 index,::Array< unsigned char > bytes){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_120_blobLoaded)
HXDLIN( 120)		 ::Dynamic _hx_tmp = ( ( ::kha::BlobCallback)(::kha::LoaderImpl_obj::blobCallbacks->get(index)) )->success;
HXDLIN( 120)		_hx_tmp( ::kha::internal::BytesBlob_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::ofData(bytes)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,blobLoaded,(void))

void LoaderImpl_obj::blobErrored(::cpp::UInt64 index,::String filename){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_124_blobErrored)
HXDLIN( 124)		 ::kha::BlobCallback _hx_tmp = ( ( ::kha::BlobCallback)(::kha::LoaderImpl_obj::blobCallbacks->get(index)) );
HXDLIN( 124)		_hx_tmp->error( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("url",6f,2b,59,00),filename)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,blobErrored,(void))

void LoaderImpl_obj::soundLoadedCompressed(::cpp::UInt64 index,::Array< unsigned char > bytes){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_127_soundLoadedCompressed)
HXLINE( 128)		 ::kha::Sound sound =  ::kha::Sound_obj::__alloc( HX_CTX );
HXLINE( 129)		sound->_hx_set_compressedData(HX_CTX, ::haxe::io::Bytes_obj::ofData(bytes));
HXLINE( 130)		sound->_hx_set_uncompressedData(HX_CTX, null());
HXLINE( 131)		sound->channels = 0;
HXLINE( 132)		sound->sampleRate = 0;
HXLINE( 133)		sound->length = ( (Float)(0) );
HXLINE( 134)		( ( ::kha::SoundCallback)(::kha::LoaderImpl_obj::soundCallbacks->get(index)) )->success(sound);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,soundLoadedCompressed,(void))

void LoaderImpl_obj::soundLoadedUncompressed(::cpp::UInt64 index, ::kha::arrays::Float32ArrayPrivate samples,int channels,int sampleRate,Float length){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_137_soundLoadedUncompressed)
HXLINE( 138)		 ::kha::Sound sound =  ::kha::Sound_obj::__alloc( HX_CTX );
HXLINE( 139)		sound->_hx_set_compressedData(HX_CTX, null());
HXLINE( 140)		sound->_hx_set_uncompressedData(HX_CTX, samples);
HXLINE( 141)		sound->channels = channels;
HXLINE( 142)		sound->sampleRate = sampleRate;
HXLINE( 143)		sound->length = length;
HXLINE( 144)		( ( ::kha::SoundCallback)(::kha::LoaderImpl_obj::soundCallbacks->get(index)) )->success(sound);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(LoaderImpl_obj,soundLoadedUncompressed,(void))

void LoaderImpl_obj::soundErrored(::cpp::UInt64 index,::String filename){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_148_soundErrored)
HXDLIN( 148)		 ::kha::SoundCallback _hx_tmp = ( ( ::kha::SoundCallback)(::kha::LoaderImpl_obj::soundCallbacks->get(index)) );
HXDLIN( 148)		_hx_tmp->error( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("url",6f,2b,59,00),filename)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,soundErrored,(void))

 ::kha::arrays::Float32ArrayPrivate LoaderImpl_obj::createFloat32Array(){
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_152_createFloat32Array)
HXDLIN( 152)		 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,0);
HXDLIN( 152)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,createFloat32Array,return )

 ::kha::Image LoaderImpl_obj::createEmptyImage(bool readable,bool floatFormat){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_156_createEmptyImage)
HXDLIN( 156)		return ::kha::Image_obj::createEmpty(readable,floatFormat);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,createEmptyImage,return )

void LoaderImpl_obj::imageLoaded(::cpp::UInt64 index, ::kha::Image image){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_160_imageLoaded)
HXDLIN( 160)		( ( ::kha::ImageCallback)(::kha::LoaderImpl_obj::imageCallbacks->get(index)) )->success(image);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,imageLoaded,(void))

void LoaderImpl_obj::imageErrored(::cpp::UInt64 index,::String filename){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_164_imageErrored)
HXDLIN( 164)		 ::kha::ImageCallback _hx_tmp = ( ( ::kha::ImageCallback)(::kha::LoaderImpl_obj::imageCallbacks->get(index)) );
HXDLIN( 164)		_hx_tmp->error( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("url",6f,2b,59,00),filename)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LoaderImpl_obj,imageErrored,(void))

void LoaderImpl_obj::tick(){
            	HX_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_212_tick)
            	
		kha_file_reference_t file = kha_loader_get_file();
		while (file.index != 0) {
			switch (file.type) {
				case KHA_FILE_TYPE_BLOB:
					if (file.error) {
						blobErrored(file.index, file.name);
					}
					else {
						Array<unsigned char> buffer = Array_obj<unsigned char>::fromData(file.data.blob.bytes, file.data.blob.size);
						blobLoaded(file.index, buffer);
						kha_loader_cleanup_blob(file.data.blob);
					}
					break;
				case KHA_FILE_TYPE_IMAGE:
					if (file.error) {
						imageErrored(file.index, file.name);
					}
					else {
						::kha::Image image = createEmptyImage(file.data.image.readable, file.data.image.image.format == KINC_IMAGE_FORMAT_RGBA128);
						image->texture = new Kore::Graphics4::Texture(file.data.image.image.data, file.data.image.image.width, file.data.image.image.height, (Kore::Graphics1::Image::Format)file.data.image.image.format, file.data.image.readable);
						imageLoaded(file.index, image);
					}
					break;
				case KHA_FILE_TYPE_SOUND:
					if (file.error) {
						soundErrored(file.index, file.name);
					}
					else if (file.data.sound.samples != NULL) {
						::kha::arrays::Float32ArrayPrivate buffer = createFloat32Array();
						buffer->self.data = file.data.sound.samples;
						buffer->self.myLength = file.data.sound.size;
						soundLoadedUncompressed(file.index, buffer, file.data.sound.channels, file.data.sound.sample_rate, file.data.sound.length);
					}
					else {
						Array<unsigned char> buffer = Array_obj<unsigned char>::fromData(file.data.sound.compressed_samples, file.data.sound.size);
						soundLoadedCompressed(file.index, buffer);
						kha_loader_cleanup_sound(file.data.sound);
					}
					break;
			}

			file = kha_loader_get_file();
		}
	

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LoaderImpl_obj,tick,(void))


LoaderImpl_obj::LoaderImpl_obj()
{
}

bool LoaderImpl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { outValue = tick_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadURL") ) { outValue = loadURL_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadBlob") ) { outValue = loadBlob_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadSound") ) { outValue = loadSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadImage") ) { outValue = loadImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"blobLoaded") ) { outValue = blobLoaded_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"videoFormat") ) { outValue = videoFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blobErrored") ) { outValue = blobErrored_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imageLoaded") ) { outValue = imageLoaded_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"showKeyboard") ) { outValue = showKeyboard_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hideKeyboard") ) { outValue = hideKeyboard_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"soundErrored") ) { outValue = soundErrored_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imageErrored") ) { outValue = imageErrored_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"blobCallbacks") ) { outValue = ( blobCallbacks ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"imageCallbacks") ) { outValue = ( imageCallbacks ); return true; }
		if (HX_FIELD_EQ(inName,"soundCallbacks") ) { outValue = ( soundCallbacks ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getSoundFormats") ) { outValue = getSoundFormats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImageFormats") ) { outValue = getImageFormats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVideoFormats") ) { outValue = getVideoFormats_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"createEmptyImage") ) { outValue = createEmptyImage_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createFloat32Array") ) { outValue = createFloat32Array_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"soundLoadedCompressed") ) { outValue = soundLoadedCompressed_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"loadBlobFromDescription") ) { outValue = loadBlobFromDescription_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFontFromDescription") ) { outValue = loadFontFromDescription_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"soundLoadedUncompressed") ) { outValue = soundLoadedUncompressed_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"loadSoundFromDescription") ) { outValue = loadSoundFromDescription_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadImageFromDescription") ) { outValue = loadImageFromDescription_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadVideoFromDescription") ) { outValue = loadVideoFromDescription_dyn(); return true; }
	}
	return false;
}

bool LoaderImpl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"blobCallbacks") ) { blobCallbacks=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"imageCallbacks") ) { imageCallbacks=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"soundCallbacks") ) { soundCallbacks=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LoaderImpl_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo LoaderImpl_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &LoaderImpl_obj::blobCallbacks,HX_("blobCallbacks",f1,81,f7,35)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &LoaderImpl_obj::imageCallbacks,HX_("imageCallbacks",33,70,06,75)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &LoaderImpl_obj::soundCallbacks,HX_("soundCallbacks",3f,b4,0b,84)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void LoaderImpl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LoaderImpl_obj::blobCallbacks,"blobCallbacks");
	HX_MARK_MEMBER_NAME(LoaderImpl_obj::imageCallbacks,"imageCallbacks");
	HX_MARK_MEMBER_NAME(LoaderImpl_obj::soundCallbacks,"soundCallbacks");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LoaderImpl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LoaderImpl_obj::blobCallbacks,"blobCallbacks");
	HX_VISIT_MEMBER_NAME(LoaderImpl_obj::imageCallbacks,"imageCallbacks");
	HX_VISIT_MEMBER_NAME(LoaderImpl_obj::soundCallbacks,"soundCallbacks");
};

#endif

::hx::Class LoaderImpl_obj::__mClass;

static ::String LoaderImpl_obj_sStaticFields[] = {
	HX_("blobCallbacks",f1,81,f7,35),
	HX_("imageCallbacks",33,70,06,75),
	HX_("soundCallbacks",3f,b4,0b,84),
	HX_("loadSoundFromDescription",e9,f8,23,55),
	HX_("loadSound",c9,d8,03,9c),
	HX_("getSoundFormats",03,7a,51,16),
	HX_("loadImageFromDescription",dd,23,d2,0d),
	HX_("loadImage",55,6b,a0,d8),
	HX_("getImageFormats",f7,90,e1,f1),
	HX_("loadBlobFromDescription",4f,68,95,8a),
	HX_("loadBlob",a3,0e,b9,b1),
	HX_("loadFontFromDescription",1d,98,64,54),
	HX_("loadVideoFromDescription",bd,f2,df,25),
	HX_("videoFormat",12,26,36,76),
	HX_("getVideoFormats",d7,7f,15,1c),
	HX_("showKeyboard",c4,12,b7,93),
	HX_("hideKeyboard",89,3f,2f,29),
	HX_("loadURL",e9,88,e3,08),
	HX_("blobLoaded",42,dd,74,df),
	HX_("blobErrored",4a,a6,e7,87),
	HX_("soundLoadedCompressed",d5,e7,02,77),
	HX_("soundLoadedUncompressed",6e,94,ee,72),
	HX_("soundErrored",18,09,43,fe),
	HX_("createFloat32Array",7a,33,33,c2),
	HX_("createEmptyImage",aa,73,e9,72),
	HX_("imageLoaded",c0,51,af,a0),
	HX_("imageErrored",0c,20,d3,d9),
	HX_("tick",5d,c3,fc,4c),
	::String(null())
};

void LoaderImpl_obj::__register()
{
	LoaderImpl_obj _hx_dummy;
	LoaderImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.LoaderImpl",bd,a0,b9,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LoaderImpl_obj::__GetStatic;
	__mClass->mSetStaticField = &LoaderImpl_obj::__SetStatic;
	__mClass->mMarkFunc = LoaderImpl_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LoaderImpl_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< LoaderImpl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LoaderImpl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoaderImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoaderImpl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LoaderImpl_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_44_boot)
HXDLIN(  44)		blobCallbacks =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_45_boot)
HXDLIN(  45)		imageCallbacks =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ca15ff0e900ea23d_46_boot)
HXDLIN(  46)		soundCallbacks =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace kha

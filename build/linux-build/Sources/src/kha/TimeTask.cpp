// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_TimeTask
#include <hxinc/kha/TimeTask.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8f7ed6afeb08a1de_16_new,"kha.TimeTask","new",0xd6704a8e,"kha.TimeTask.new","kha/Scheduler.hx",16,0xd275db8e)
namespace kha{

void TimeTask_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8f7ed6afeb08a1de_16_new)
            	}

Dynamic TimeTask_obj::__CreateEmpty() { return new TimeTask_obj; }

void *TimeTask_obj::_hx_vtable = 0;

Dynamic TimeTask_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TimeTask_obj > _hx_result = new TimeTask_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TimeTask_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f31b752;
}


TimeTask_obj::TimeTask_obj()
{
}

void TimeTask_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TimeTask);
	HX_MARK_MEMBER_NAME(task,"task");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(period,"period");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(groupId,"groupId");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_END_CLASS();
}

void TimeTask_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(task,"task");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(period,"period");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(groupId,"groupId");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(paused,"paused");
}

::hx::Val TimeTask_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"task") ) { return ::hx::Val( task ); }
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"period") ) { return ::hx::Val( period ); }
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupId") ) { return ::hx::Val( groupId ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return ::hx::Val( duration ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TimeTask_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"task") ) { _hx_set_task(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"period") ) { period=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupId") ) { groupId=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TimeTask_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("period",01,61,1b,3b));
	outFields->push(HX_("duration",54,0f,8e,14));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("groupId",fa,80,f7,86));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("paused",ae,40,84,ef));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TimeTask_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TimeTask_obj,task),HX_("task",45,bf,f6,4c)},
	{::hx::fsFloat,(int)offsetof(TimeTask_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsFloat,(int)offsetof(TimeTask_obj,period),HX_("period",01,61,1b,3b)},
	{::hx::fsFloat,(int)offsetof(TimeTask_obj,duration),HX_("duration",54,0f,8e,14)},
	{::hx::fsFloat,(int)offsetof(TimeTask_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsInt,(int)offsetof(TimeTask_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsInt,(int)offsetof(TimeTask_obj,groupId),HX_("groupId",fa,80,f7,86)},
	{::hx::fsBool,(int)offsetof(TimeTask_obj,active),HX_("active",c6,41,46,16)},
	{::hx::fsBool,(int)offsetof(TimeTask_obj,paused),HX_("paused",ae,40,84,ef)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TimeTask_obj_sStaticStorageInfo = 0;
#endif

static ::String TimeTask_obj_sMemberFields[] = {
	HX_("task",45,bf,f6,4c),
	HX_("start",62,74,0b,84),
	HX_("period",01,61,1b,3b),
	HX_("duration",54,0f,8e,14),
	HX_("next",f3,84,02,49),
	HX_("id",db,5b,00,00),
	HX_("groupId",fa,80,f7,86),
	HX_("active",c6,41,46,16),
	HX_("paused",ae,40,84,ef),
	::String(null()) };

::hx::Class TimeTask_obj::__mClass;

void TimeTask_obj::__register()
{
	TimeTask_obj _hx_dummy;
	TimeTask_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.TimeTask",9c,ab,00,60);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TimeTask_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TimeTask_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimeTask_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimeTask_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha

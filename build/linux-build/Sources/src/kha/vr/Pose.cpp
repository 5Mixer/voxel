// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_math_Quaternion
#include <hxinc/kha/math/Quaternion.h>
#endif
#ifndef INCLUDED_kha_math_Vector3
#include <hxinc/kha/math/Vector3.h>
#endif
#ifndef INCLUDED_kha_vr_Pose
#include <hxinc/kha/vr/Pose.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_90598e51271b189d_11_new,"kha.vr.Pose","new",0xb1cb720b,"kha.vr.Pose.new","kha/vr/Pose.hx",11,0x3366b525)
namespace kha{
namespace vr{

void Pose_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_90598e51271b189d_11_new)
HXLINE(  12)		this->_hx_set_Orientation(HX_CTX,  ::kha::math::Quaternion_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE(  13)		this->_hx_set_Position(HX_CTX,  ::kha::math::Vector3_obj::__alloc( HX_CTX ,null(),null(),null()));
            	}

Dynamic Pose_obj::__CreateEmpty() { return new Pose_obj; }

void *Pose_obj::_hx_vtable = 0;

Dynamic Pose_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Pose_obj > _hx_result = new Pose_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Pose_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x651d78ad;
}


::hx::ObjectPtr< Pose_obj > Pose_obj::__new() {
	::hx::ObjectPtr< Pose_obj > __this = new Pose_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Pose_obj > Pose_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Pose_obj *__this = (Pose_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Pose_obj), true, "kha.vr.Pose"));
	*(void **)__this = Pose_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Pose_obj::Pose_obj()
{
}

void Pose_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Pose);
	HX_MARK_MEMBER_NAME(Orientation,"Orientation");
	HX_MARK_MEMBER_NAME(Position,"Position");
	HX_MARK_END_CLASS();
}

void Pose_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(Orientation,"Orientation");
	HX_VISIT_MEMBER_NAME(Position,"Position");
}

::hx::Val Pose_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"Position") ) { return ::hx::Val( Position ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Orientation") ) { return ::hx::Val( Orientation ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Pose_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"Position") ) { _hx_set_Position(HX_CTX_GET,inValue.Cast<  ::kha::math::Vector3 >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Orientation") ) { _hx_set_Orientation(HX_CTX_GET,inValue.Cast<  ::kha::math::Quaternion >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Pose_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("Orientation",b0,86,31,e2));
	outFields->push(HX_("Position",c9,5c,ac,a4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Pose_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::math::Quaternion */ ,(int)offsetof(Pose_obj,Orientation),HX_("Orientation",b0,86,31,e2)},
	{::hx::fsObject /*  ::kha::math::Vector3 */ ,(int)offsetof(Pose_obj,Position),HX_("Position",c9,5c,ac,a4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Pose_obj_sStaticStorageInfo = 0;
#endif

static ::String Pose_obj_sMemberFields[] = {
	HX_("Orientation",b0,86,31,e2),
	HX_("Position",c9,5c,ac,a4),
	::String(null()) };

::hx::Class Pose_obj::__mClass;

void Pose_obj::__register()
{
	Pose_obj _hx_dummy;
	Pose_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.vr.Pose",99,10,f9,a0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Pose_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Pose_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pose_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pose_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace vr

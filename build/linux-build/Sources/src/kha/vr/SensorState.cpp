// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_vr_PoseState
#include <hxinc/kha/vr/PoseState.h>
#endif
#ifndef INCLUDED_kha_vr_SensorState
#include <hxinc/kha/vr/SensorState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_93d01868deda17fb_19_new,"kha.vr.SensorState","new",0xdbc352a1,"kha.vr.SensorState.new","kha/vr/SensorState.hx",19,0x60092a8f)
namespace kha{
namespace vr{

void SensorState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_93d01868deda17fb_19_new)
            	}

Dynamic SensorState_obj::__CreateEmpty() { return new SensorState_obj; }

void *SensorState_obj::_hx_vtable = 0;

Dynamic SensorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SensorState_obj > _hx_result = new SensorState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SensorState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x16b68537;
}


SensorState_obj::SensorState_obj()
{
}

void SensorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SensorState);
	HX_MARK_MEMBER_NAME(Predicted,"Predicted");
	HX_MARK_MEMBER_NAME(Recorded,"Recorded");
	HX_MARK_MEMBER_NAME(Temperature,"Temperature");
	HX_MARK_MEMBER_NAME(Status,"Status");
	HX_MARK_END_CLASS();
}

void SensorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(Predicted,"Predicted");
	HX_VISIT_MEMBER_NAME(Recorded,"Recorded");
	HX_VISIT_MEMBER_NAME(Temperature,"Temperature");
	HX_VISIT_MEMBER_NAME(Status,"Status");
}

::hx::Val SensorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"Status") ) { return ::hx::Val( Status ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Recorded") ) { return ::hx::Val( Recorded ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"Predicted") ) { return ::hx::Val( Predicted ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Temperature") ) { return ::hx::Val( Temperature ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SensorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"Status") ) { Status=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Recorded") ) { _hx_set_Recorded(HX_CTX_GET,inValue.Cast<  ::kha::vr::PoseState >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"Predicted") ) { _hx_set_Predicted(HX_CTX_GET,inValue.Cast<  ::kha::vr::PoseState >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Temperature") ) { Temperature=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SensorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("Predicted",98,f7,6a,7e));
	outFields->push(HX_("Recorded",50,11,96,84));
	outFields->push(HX_("Temperature",14,4c,c3,20));
	outFields->push(HX_("Status",52,5b,90,3a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SensorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::vr::PoseState */ ,(int)offsetof(SensorState_obj,Predicted),HX_("Predicted",98,f7,6a,7e)},
	{::hx::fsObject /*  ::kha::vr::PoseState */ ,(int)offsetof(SensorState_obj,Recorded),HX_("Recorded",50,11,96,84)},
	{::hx::fsFloat,(int)offsetof(SensorState_obj,Temperature),HX_("Temperature",14,4c,c3,20)},
	{::hx::fsInt,(int)offsetof(SensorState_obj,Status),HX_("Status",52,5b,90,3a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SensorState_obj_sStaticStorageInfo = 0;
#endif

static ::String SensorState_obj_sMemberFields[] = {
	HX_("Predicted",98,f7,6a,7e),
	HX_("Recorded",50,11,96,84),
	HX_("Temperature",14,4c,c3,20),
	HX_("Status",52,5b,90,3a),
	::String(null()) };

::hx::Class SensorState_obj::__mClass;

void SensorState_obj::__register()
{
	SensorState_obj _hx_dummy;
	SensorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.vr.SensorState",2f,6e,e3,6b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SensorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SensorState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SensorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SensorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace vr

// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_vr_SensorState
#include <hxinc/kha/vr/SensorState.h>
#endif
#ifndef INCLUDED_kha_vr_TimeWarpParms
#include <hxinc/kha/vr/TimeWarpParms.h>
#endif
#ifndef INCLUDED_kha_vr_VrInterface
#include <hxinc/kha/vr/VrInterface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_762cff4ae71864db_69_new,"kha.vr.VrInterface","new",0x7eec7f07,"kha.vr.VrInterface.new","kha/vr/VrInterface.hx",69,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_11_GetSensorState,"kha.vr.VrInterface","GetSensorState",0x5524dd5a,"kha.vr.VrInterface.GetSensorState","kha/vr/VrInterface.hx",11,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_16_GetPredictedSensorState,"kha.vr.VrInterface","GetPredictedSensorState",0x54937c5c,"kha.vr.VrInterface.GetPredictedSensorState","kha/vr/VrInterface.hx",16,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_20_WarpSwapBlack,"kha.vr.VrInterface","WarpSwapBlack",0xd89b500b,"kha.vr.VrInterface.WarpSwapBlack","kha/vr/VrInterface.hx",20,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_24_WarpSwapLoadingIcon,"kha.vr.VrInterface","WarpSwapLoadingIcon",0xe70e0b61,"kha.vr.VrInterface.WarpSwapLoadingIcon","kha/vr/VrInterface.hx",24,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_28_WarpSwap,"kha.vr.VrInterface","WarpSwap",0xf3580d14,"kha.vr.VrInterface.WarpSwap","kha/vr/VrInterface.hx",28,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_33_IsPresenting,"kha.vr.VrInterface","IsPresenting",0xeae3d9ea,"kha.vr.VrInterface.IsPresenting","kha/vr/VrInterface.hx",33,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_38_IsVrEnabled,"kha.vr.VrInterface","IsVrEnabled",0x4964e0e2,"kha.vr.VrInterface.IsVrEnabled","kha/vr/VrInterface.hx",38,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_44_GetTimeInSeconds,"kha.vr.VrInterface","GetTimeInSeconds",0xc5741df0,"kha.vr.VrInterface.GetTimeInSeconds","kha/vr/VrInterface.hx",44,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_49_GetProjectionMatrix,"kha.vr.VrInterface","GetProjectionMatrix",0x3da2156d,"kha.vr.VrInterface.GetProjectionMatrix","kha/vr/VrInterface.hx",49,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_54_GetViewMatrix,"kha.vr.VrInterface","GetViewMatrix",0x8c0e0803,"kha.vr.VrInterface.GetViewMatrix","kha/vr/VrInterface.hx",54,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_58_onVRRequestPresent,"kha.vr.VrInterface","onVRRequestPresent",0x971ee020,"kha.vr.VrInterface.onVRRequestPresent","kha/vr/VrInterface.hx",58,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_62_onVRExitPresent,"kha.vr.VrInterface","onVRExitPresent",0x6bef2e49,"kha.vr.VrInterface.onVRExitPresent","kha/vr/VrInterface.hx",62,0x16260ce9)
HX_LOCAL_STACK_FRAME(_hx_pos_762cff4ae71864db_66_onResetPose,"kha.vr.VrInterface","onResetPose",0x39fd9e48,"kha.vr.VrInterface.onResetPose","kha/vr/VrInterface.hx",66,0x16260ce9)
namespace kha{
namespace vr{

void VrInterface_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_69_new)
            	}

Dynamic VrInterface_obj::__CreateEmpty() { return new VrInterface_obj; }

void *VrInterface_obj::_hx_vtable = 0;

Dynamic VrInterface_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VrInterface_obj > _hx_result = new VrInterface_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VrInterface_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2fac069d;
}

 ::kha::vr::SensorState VrInterface_obj::GetSensorState(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_11_GetSensorState)
HXDLIN(  11)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,GetSensorState,return )

 ::kha::vr::SensorState VrInterface_obj::GetPredictedSensorState(Float time){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_16_GetPredictedSensorState)
HXDLIN(  16)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VrInterface_obj,GetPredictedSensorState,return )

void VrInterface_obj::WarpSwapBlack(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_20_WarpSwapBlack)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,WarpSwapBlack,(void))

void VrInterface_obj::WarpSwapLoadingIcon(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_24_WarpSwapLoadingIcon)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,WarpSwapLoadingIcon,(void))

void VrInterface_obj::WarpSwap( ::kha::vr::TimeWarpParms parms){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_28_WarpSwap)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VrInterface_obj,WarpSwap,(void))

bool VrInterface_obj::IsPresenting(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_33_IsPresenting)
HXDLIN(  33)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,IsPresenting,return )

bool VrInterface_obj::IsVrEnabled(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_38_IsVrEnabled)
HXDLIN(  38)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,IsVrEnabled,return )

Float VrInterface_obj::GetTimeInSeconds(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_44_GetTimeInSeconds)
HXDLIN(  44)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,GetTimeInSeconds,return )

 ::kha::math::FastMatrix4 VrInterface_obj::GetProjectionMatrix(int eye){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_49_GetProjectionMatrix)
HXDLIN(  49)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VrInterface_obj,GetProjectionMatrix,return )

 ::kha::math::FastMatrix4 VrInterface_obj::GetViewMatrix(int eye){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_54_GetViewMatrix)
HXDLIN(  54)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VrInterface_obj,GetViewMatrix,return )

void VrInterface_obj::onVRRequestPresent(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_58_onVRRequestPresent)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,onVRRequestPresent,(void))

void VrInterface_obj::onVRExitPresent(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_62_onVRExitPresent)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,onVRExitPresent,(void))

void VrInterface_obj::onResetPose(){
            	HX_STACKFRAME(&_hx_pos_762cff4ae71864db_66_onResetPose)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VrInterface_obj,onResetPose,(void))

 ::kha::vr::VrInterface VrInterface_obj::instance;


::hx::ObjectPtr< VrInterface_obj > VrInterface_obj::__new() {
	::hx::ObjectPtr< VrInterface_obj > __this = new VrInterface_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VrInterface_obj > VrInterface_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VrInterface_obj *__this = (VrInterface_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VrInterface_obj), false, "kha.vr.VrInterface"));
	*(void **)__this = VrInterface_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VrInterface_obj::VrInterface_obj()
{
}

::hx::Val VrInterface_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"WarpSwap") ) { return ::hx::Val( WarpSwap_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"IsVrEnabled") ) { return ::hx::Val( IsVrEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResetPose") ) { return ::hx::Val( onResetPose_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"IsPresenting") ) { return ::hx::Val( IsPresenting_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"WarpSwapBlack") ) { return ::hx::Val( WarpSwapBlack_dyn() ); }
		if (HX_FIELD_EQ(inName,"GetViewMatrix") ) { return ::hx::Val( GetViewMatrix_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"GetSensorState") ) { return ::hx::Val( GetSensorState_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onVRExitPresent") ) { return ::hx::Val( onVRExitPresent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"GetTimeInSeconds") ) { return ::hx::Val( GetTimeInSeconds_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onVRRequestPresent") ) { return ::hx::Val( onVRRequestPresent_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"WarpSwapLoadingIcon") ) { return ::hx::Val( WarpSwapLoadingIcon_dyn() ); }
		if (HX_FIELD_EQ(inName,"GetProjectionMatrix") ) { return ::hx::Val( GetProjectionMatrix_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"GetPredictedSensorState") ) { return ::hx::Val( GetPredictedSensorState_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VrInterface_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
	}
	return false;
}

bool VrInterface_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::kha::vr::VrInterface >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *VrInterface_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo VrInterface_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::kha::vr::VrInterface */ ,(void *) &VrInterface_obj::instance,HX_("instance",95,1f,e1,59)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String VrInterface_obj_sMemberFields[] = {
	HX_("GetSensorState",a1,48,5a,fc),
	HX_("GetPredictedSensorState",35,f0,7f,13),
	HX_("WarpSwapBlack",a4,2a,05,ee),
	HX_("WarpSwapLoadingIcon",ba,5e,ab,92),
	HX_("WarpSwap",1b,39,8e,7a),
	HX_("IsPresenting",71,15,6e,ee),
	HX_("IsVrEnabled",3b,b3,f2,c1),
	HX_("GetTimeInSeconds",f7,28,50,b5),
	HX_("GetProjectionMatrix",c6,68,3f,e9),
	HX_("GetViewMatrix",9c,e2,77,a1),
	HX_("onVRRequestPresent",e7,fa,58,3e),
	HX_("onVRExitPresent",22,a1,77,13),
	HX_("onResetPose",a1,70,8b,b2),
	::String(null()) };

static void VrInterface_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VrInterface_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VrInterface_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VrInterface_obj::instance,"instance");
};

#endif

::hx::Class VrInterface_obj::__mClass;

static ::String VrInterface_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	::String(null())
};

void VrInterface_obj::__register()
{
	VrInterface_obj _hx_dummy;
	VrInterface_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.vr.VrInterface",95,ef,d8,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VrInterface_obj::__GetStatic;
	__mClass->mSetStaticField = &VrInterface_obj::__SetStatic;
	__mClass->mMarkFunc = VrInterface_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(VrInterface_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VrInterface_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VrInterface_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VrInterface_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VrInterface_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VrInterface_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace vr

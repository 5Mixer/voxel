// Generated by Haxe 4.1.3
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <hxinc/Date.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <hxinc/haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <hxinc/sys/FileSystem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5b57601632a1f3ce_38_stat,"sys.FileSystem","stat",0xa630df16,"sys.FileSystem.stat","/home/mixer/tools/Kha/Tools/haxe/std/cpp/_std/sys/FileSystem.hx",38,0x345c6f0d)
namespace sys{

void FileSystem_obj::__construct() { }

Dynamic FileSystem_obj::__CreateEmpty() { return new FileSystem_obj; }

void *FileSystem_obj::_hx_vtable = 0;

Dynamic FileSystem_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FileSystem_obj > _hx_result = new FileSystem_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FileSystem_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2378c654;
}

 ::Dynamic FileSystem_obj::stat(::String path){
            	HX_STACKFRAME(&_hx_pos_5b57601632a1f3ce_38_stat)
HXLINE(  39)		::String s;
HXDLIN(  39)		bool s1;
HXDLIN(  39)		if (::hx::IsEq( path.charCodeAt(1),58 )) {
HXLINE(  39)			s1 = (path.length <= 3);
            		}
            		else {
HXLINE(  39)			s1 = false;
            		}
HXDLIN(  39)		if (s1) {
HXLINE(  39)			s = ::haxe::io::Path_obj::addTrailingSlash(path);
            		}
            		else {
HXLINE(  39)			if ((path == HX_("/",2f,00,00,00))) {
HXLINE(  39)				s = HX_("/",2f,00,00,00);
            			}
            			else {
HXLINE(  39)				s = ::haxe::io::Path_obj::removeTrailingSlashes(path);
            			}
            		}
HXDLIN(  39)		 ::Dynamic s2 = _hx_std_sys_stat(s);
HXLINE(  40)		if (::hx::IsNull( s2 )) {
HXLINE(  44)			 ::Date _hx_tmp = ::Date_obj::fromTime(( (Float)(0) ));
HXLINE(  45)			 ::Date _hx_tmp1 = ::Date_obj::fromTime(( (Float)(0) ));
HXLINE(  41)			return  ::Dynamic(::hx::Anon_obj::Create(11)
            				->setFixed(0,HX_("nlink",68,e7,c6,9d),0)
            				->setFixed(1,HX_("dev",d5,39,4c,00),0)
            				->setFixed(2,HX_("gid",02,84,4e,00),0)
            				->setFixed(3,HX_("ino",ea,0c,50,00),0)
            				->setFixed(4,HX_("uid",90,23,59,00),0)
            				->setFixed(5,HX_("mtime",fa,06,aa,0f),_hx_tmp1)
            				->setFixed(6,HX_("atime",ee,10,db,26),_hx_tmp)
            				->setFixed(7,HX_("mode",63,d3,60,48),0)
            				->setFixed(8,HX_("rdev",a3,8c,a6,4b),0)
            				->setFixed(9,HX_("size",c1,a0,53,4c),0)
            				->setFixed(10,HX_("ctime",f0,39,a8,4d),::Date_obj::fromTime(( (Float)(0) ))));
            		}
HXLINE(  54)		s2->__SetField(HX_("atime",ee,10,db,26),::Date_obj::fromTime((((Float)1000.0) * ( (Float)(s2->__Field(HX_("atime",ee,10,db,26),::hx::paccDynamic)) ))),::hx::paccDynamic);
HXLINE(  55)		s2->__SetField(HX_("mtime",fa,06,aa,0f),::Date_obj::fromTime((((Float)1000.0) * ( (Float)(s2->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) ))),::hx::paccDynamic);
HXLINE(  56)		s2->__SetField(HX_("ctime",f0,39,a8,4d),::Date_obj::fromTime((((Float)1000.0) * ( (Float)(s2->__Field(HX_("ctime",f0,39,a8,4d),::hx::paccDynamic)) ))),::hx::paccDynamic);
HXLINE(  57)		return s2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,stat,return )


FileSystem_obj::FileSystem_obj()
{
}

bool FileSystem_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stat") ) { outValue = stat_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FileSystem_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FileSystem_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FileSystem_obj::__mClass;

static ::String FileSystem_obj_sStaticFields[] = {
	HX_("stat",d4,e3,5b,4c),
	::String(null())
};

void FileSystem_obj::__register()
{
	FileSystem_obj _hx_dummy;
	FileSystem_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.FileSystem",6c,2c,e5,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FileSystem_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FileSystem_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FileSystem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FileSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FileSystem_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
